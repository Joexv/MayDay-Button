<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SdkApi.Core</name>
    </assembly>
    <members>
        <member name="T:Zebra.Sdk.Certificate.CertificateParser">
            <summary>
      Takes in a certificate file (P12, DER, PEM, etc) and processes it into a ZebraCertificateInfo object which contains 
      the selected certificate, Certificate Authority certificate chain, and private key (if applicable).
    </summary><example>
      Desktop
      <code source="../SdkApi_Test/Test/Zebra/Sdk/Printer/Examples/CertificateParserExample.cs" />
    </example><example>
      Androidâ„¢
      <code source="../XamarinSdk/XamarinTest/XamarinTest.Android/Test/Zebra/Sdk/Printer/Examples/CertificateParserExample.cs" />
    </example><example>
      iOS
      <code source="../XamarinSdk/XamarinTest/XamarinTest.iOS/Test/Zebra/Sdk/Printer/Examples/CertificateParserExample.cs" />
    </example>
        </member>
        <member name="M:Zebra.Sdk.Certificate.CertificateParser.ParseCertificate(System.IO.Stream,System.String,System.String)">
            <summary>
            Takes in a certificate file (P12, DER, PEM, etc) and processes it into a ZebraCertificateInfo object which contains
            the selected certificate, Certificate Authority certificate chain, and private key (if applicable).
            </summary>
            <param name="certificateStream">Data stream for the certificate file to be processed.</param>
            <param name="alias">The certificate to use within a multi-certificate (like PKCS12) file.</param>
            <param name="password">Used to unlock a protected certificate file.</param>
            <returns>Instance containing all certificate and key information for the processed file.</returns>
            <exception cref="T:System.IO.IOException">If there is an issue reading the certificate file.</exception>
            <exception cref="T:Zebra.Sdk.Certificate.ZebraCertificateException">If there is an issue processing the certificate file.</exception>
        </member>
        <member name="M:Zebra.Sdk.Certificate.CertificateParser.StripPkcs7OpenSSLHeader(System.Byte[])">
            <summary>
            </summary>
            <param name="buffer"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Certificate.CertificateParser.ParseAsP12(System.Byte[],Zebra.Sdk.Certificate.ZebraCertificateInfo,System.String,System.String)">
            <summary>
            </summary>
            <param name="buffer"></param>
            <param name="pemCertificateData"></param>
            <param name="alias"></param>
            <param name="p12Password"></param>
            <exception cref="T:Zebra.Sdk.Certificate.ZebraCertificateException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Certificate.Internal.CertUtilities.GetPrivateKeyFromPkcs12Keystore(System.String,System.String,System.IO.Stream,Org.BouncyCastle.Pkcs.Pkcs12Store)">
            <summary>
            </summary>
            <param name="alias"></param>
            <param name="privateKeyPassphrase"></param>
            <param name="keyStream"></param>
            <param name="keyStore"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Certificate.Internal.CertUtilities.GetCaFromPkcs12Keystore(System.String,System.IO.Stream,Org.BouncyCastle.Pkcs.Pkcs12Store)">
            <summary>
            </summary>
            <param name="alias"></param>
            <param name="caStream"></param>
            <param name="keyStore"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Certificate.Internal.CertUtilities.GetCertificateChain(System.String,Org.BouncyCastle.Pkcs.Pkcs12Store)">
            <summary>
            </summary>
            <param name="alias"></param>
            <param name="keyStore"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Certificate.ZebraCertificateException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Certificate.Internal.CertUtilities.GetPrivateKey(System.String,Org.BouncyCastle.Pkcs.Pkcs12Store)">
            <summary>
            </summary>
            <param name="alias"></param>
            <param name="keyStore"></param>
            <returns></returns>
            <exception cref="T:Org.BouncyCastle.Security.KeyException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Certificate.Internal.CertUtilities.GetCertificateFromPkcs12Keystore(System.String,System.IO.Stream,Org.BouncyCastle.Pkcs.Pkcs12Store)">
            <summary>
            </summary>
            <param name="alias"></param>
            <param name="certificateStream"></param>
            <param name="keyStore"></param>
            <exception cref="T:Zebra.Sdk.Certificate.ZebraCertificateException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Certificate.Internal.CertUtilities.ConvertDerKeyToPemKey(System.Byte[])">
            <summary>
            </summary>
            <param name="derContents"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Certificate.ZebraCertificateException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Certificate.Internal.CertUtilities.ConvertDerCertToPemCert(System.Byte[])">
            <summary>
            </summary>
            <param name="derContents"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Certificate.ZebraCertificateException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Certificate.Internal.CertUtilities.ConvertDerToPem(System.Byte[])">
            <summary>
            </summary>
            <param name="derContents"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Certificate.ZebraCertificateException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Certificate.Internal.CertUtilities.GetWriter(System.String)">
            <summary>
            </summary>
            <param name="writerInfo"></param>
            <returns></returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:Zebra.Sdk.Certificate.ZebraCertificateException">
            <summary>
            Signals that an error occurred while converting a certificate.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Certificate.ZebraCertificateException.#ctor(System.String)">
            <summary>
            Constructs a <c>ZebraCertificateConversionException</c> with <c>message</c> as the detailed error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Zebra.Sdk.Certificate.ZebraCertificateException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a <c>ZebraCertificateConversionException</c> with <c>message</c> as the detailed error
            message and <c>cause</c> as the underlying exception.
            </summary>
            <param name="message">User defined message for the exception.</param>
            <param name="cause">What created the exception.</param>
        </member>
        <member name="T:Zebra.Sdk.Certificate.ZebraCertificateInfo">
            <summary>
            Handler class for managing certificate and private key information.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Certificate.ZebraCertificateInfo.CLIENT_PRIVATE_KEY_NRD_PRINTER_FILE_NAME">
            <summary>
            The file name on a printer to which a private key must be saved for wireless security.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Certificate.ZebraCertificateInfo.CA_CERT_NRD_PRINTER_FILE_NAME">
            <summary>
            The file name on a printer to which a wireless ca must be saved for wireless security.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Certificate.ZebraCertificateInfo.CLIENT_CERT_NRD_PRINTER_FILE_NAME">
            <summary>
            The file name on a printer to which a client cert must be saved for wireless security.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Certificate.ZebraCertificateInfo.#ctor">
            <summary>
            Initializes a new instance of the ZebraCertificateInfo class.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Certificate.ZebraCertificateInfo.GetCaChain">
            <summary>
            Returns the CA Certificate chain.
            </summary>
            <returns>CA Certificate chain in PEM format.</returns>
        </member>
        <member name="P:Zebra.Sdk.Certificate.ZebraCertificateInfo.ClientCertificate">
            <summary>
            Contains the client certificate, if set.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Certificate.ZebraCertificateInfo.CaCertificates">
            <summary>
            Contains the Certificate Authority certificate chain, if set.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Certificate.ZebraCertificateInfo.PrivateKey">
            <summary>
            Contains the private key, if set.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Certificate.ZebraP12Info">
            <summary>
            A utility class used to extract info from certificate files and convert the contents into Zebra friendly formats.
            </summary>
            <example><code source="../SdkApi_Test/Test/Zebra/Sdk/Util/Examples/ZebraP12InfoExample.cs"/></example>
        </member>
        <member name="M:Zebra.Sdk.Certificate.ZebraP12Info.#ctor(System.IO.Stream,System.String)">
            <summary>
            Creates a wrapper that opens up the provided certificate keystore stream.
            </summary>
            <param name="pkcs12Stream">The stream containing certificate keystore file contents.</param>
            <param name="p12Password">The password used to access the certificate file.</param>
            <exception cref="T:Zebra.Sdk.Certificate.ZebraCertificateException">Thrown if the certificate stream contents cannot be accessed or if the
            certificate password was incorrect.</exception>
        </member>
        <member name="M:Zebra.Sdk.Certificate.ZebraP12Info.GetAliases">
            <summary>
            Get a list of aliases present in the certificate keystore.
            </summary>
            <returns>A list of the aliases present in the certificate keystore.</returns>
            <exception cref="T:Zebra.Sdk.Certificate.ZebraCertificateException">If the keystore has not been initialized (loaded).</exception>
        </member>
        <member name="M:Zebra.Sdk.Certificate.ZebraP12Info.GetCertificateContent">
            <summary>
            Get the content of the first entry in the certificate's certificate chain.
            </summary>
            <remarks>The returned content is converted to PEM format. The resulting content can be stored to a printer for use 
            with wireless security. Since no alias is provided, the first entry in the certificate file will be used.</remarks>
            <returns>The Zebra-friendly certificate content</returns>
            <exception cref="T:Zebra.Sdk.Certificate.ZebraCertificateException">If the provided alias does not exist or the certificate content is corrupt</exception>
        </member>
        <member name="M:Zebra.Sdk.Certificate.ZebraP12Info.GetCertificateContent(System.String)">
            <summary>
            Get the content of the first entry in the certificate's certificate chain.
            </summary>
            <remarks>The returned content is converted to PEM format. The resulting content can be stored to a printer for use 
            with wireless security.</remarks>
            <param name="alias">The alias name of the specific entry to extract from the certificate file.</param>
            <returns>The Zebra-friendly certificate content.</returns>
            <exception cref="T:Zebra.Sdk.Certificate.ZebraCertificateException">If the provided alias does not exist or the certificate content is corrupt</exception>
        </member>
        <member name="M:Zebra.Sdk.Certificate.ZebraP12Info.GetCaContent">
            <summary>
            Get the content of the ca, which is determined to be all entries in the certificate chain after the first entry.
            </summary>
            <remarks>The returned ca is converted to PEM format. The resulting content can be stored to a printer for use with
            wireless security. Since no alias is provided, the first entry in the certificate file will be used.</remarks>
            <returns>The Zebra-friendly ca content.</returns>
            <exception cref="T:Zebra.Sdk.Certificate.ZebraCertificateException">If the provided alias does not exist or the ca content is corrupt.</exception>
        </member>
        <member name="M:Zebra.Sdk.Certificate.ZebraP12Info.GetCaContent(System.String)">
            <summary>
            Get the content of the ca, which is determined to be all entries in the certificate chain after the first entry.
            </summary>
            <remarks>The returned ca is converted to PEM format. The resulting content can be stored to a printer for use with
            wireless security.</remarks>
            <param name="alias">The alias name of the specific entry to extract from the certificate file.</param>
            <returns>The Zebra-friendly ca content.</returns>
            <exception cref="T:Zebra.Sdk.Certificate.ZebraCertificateException">If the provided alias does not exist or the ca content is corrupt.</exception>
        </member>
        <member name="M:Zebra.Sdk.Certificate.ZebraP12Info.GetEncryptedPrivateKeyContent(System.String)">
            <summary>
            Get the encrypted private key content.
            </summary>
            <remarks>The returned key is encrypted and converted to PEM format. The resulting content can be stored 
            to a printer for use with wireless security.Since no alias is provided, the first entry in the certificate 
            file will be used. Note: Any printer using the generated private key must also be configured to use the 
            password provided here to encrypt the private key.Send the following command to the printer to configure
            it to use a private key encryption password: ! U1 setvar "wlan.private_key_password" "value".</remarks>
            <param name="passwordToEncryptKey">The password used to encrypt the resulting private key.</param>
            <returns>The encrypted private key in PEM format.</returns>
            <exception cref="T:Zebra.Sdk.Certificate.ZebraCertificateException">If the provided alias does not exist, certificate password is 
            incorrect, or private key content is corrupt.</exception>
        </member>
        <member name="M:Zebra.Sdk.Certificate.ZebraP12Info.GetEncryptedPrivateKeyContent(System.String,System.String)">
            <summary>
            Get the encrypted private key content.
            </summary>
            <remarks>The resulting content can be stored to a printer for use with wireless security. 
            Note: Any printer using the generated private key must also be configured to use the provided password to 
            encrypt the private key. Send the following command to the printer to configure it to use a private key 
            encryption password: ! U1 setvar "wlan.private_key_password" "value".</remarks>
            <param name="alias">The alias name of the specific entry to extract from the certificate file.</param>
            <param name="passwordToEncryptKey">The password used to encrypt the resulting private key.</param>
            <returns>The encrypted private key in PEM format.</returns>
            <exception cref="T:Zebra.Sdk.Certificate.ZebraCertificateException">If the provided alias does not exist, certificate password is 
            incorrect, or private key content is corrupt.</exception>
        </member>
        <member name="M:Zebra.Sdk.Certificate.ZebraP12Info.GetCertificateCommonName">
            <summary>
            Get the common name of the client certificate associated with the certificate file.
            </summary>
            <remarks>Since no alias is provided, the first entry in the certificate file will be used.</remarks>
            <returns>The certificate common name.</returns>
            <exception cref="T:Zebra.Sdk.Certificate.ZebraCertificateException">If the provided alias does not exist or the underlying 
            certificate could not be parsed.</exception>
        </member>
        <member name="M:Zebra.Sdk.Certificate.ZebraP12Info.GetCertificateCommonName(System.String)">
            <summary>
            Get the common name of the client certificate associated with the certificate file.
            </summary>
            <param name="alias">The alias name of the specific entry to extract from the certificate file.</param>
            <returns>The certificate common name.</returns>
            <exception cref="T:Zebra.Sdk.Certificate.ZebraCertificateException">If the provided alias does not exist or the underlying 
            certificate could not be parsed.</exception>
        </member>
        <member name="M:Zebra.Sdk.Certificate.ZebraP12Info.GetCaCommonName">
            <summary>
            Get the common name of the CA associated with the certificate file.
            </summary>
            <remarks>Since no alias is provided, the first entry in the certificate file will be used.</remarks>
            <returns>The CA common name.</returns>
            <exception cref="T:Zebra.Sdk.Certificate.ZebraCertificateException">If the provided alias does not exist or the underlying 
            certificate could not be parsed.</exception>
        </member>
        <member name="M:Zebra.Sdk.Certificate.ZebraP12Info.GetCaCommonName(System.String)">
            <summary>
            Get the common name of the CA associated with the certificate file.
            </summary>
            <param name="alias">The alias name of the specific entry to extract from the certificate file</param>
            <returns>The CA common name.</returns>
            <exception cref="T:Zebra.Sdk.Certificate.ZebraCertificateException">If the provided alias does not exist or the underlying 
            certificate could not be parsed.</exception>
        </member>
        <member name="M:Zebra.Sdk.Certificate.ZebraP12Info.GetCertificateExpirationDate">
            <summary>
            Get the expiration data of the client certificate associated with the certificate file.
            </summary>
            <remarks>Since no alias is provided, the first entry in the certificate file will be used.</remarks>
            <returns>The client certificate expiration date.</returns>
            <exception cref="T:Zebra.Sdk.Certificate.ZebraCertificateException">If the certificate keystore is invalid or the provided alias 
            does not exist in the certificate keystore.</exception>
        </member>
        <member name="M:Zebra.Sdk.Certificate.ZebraP12Info.GetCertificateExpirationDate(System.String)">
            <summary>
            Get the expiration data of the client certificate associated with the certificate file.
            </summary>
            <param name="alias">The alias name of the specific entry to extract from the certificate file.</param>
            <returns>The client certificate expiration date.</returns>
            <exception cref="T:Zebra.Sdk.Certificate.ZebraCertificateException">If the certificate keystore is invalid or the provided alias 
            does not exist in the certificate keystore.</exception>
        </member>
        <member name="M:Zebra.Sdk.Certificate.ZebraP12Info.GetCaExpirationDate">
            <summary>
            Get the expiration data of the CA associated with the certificate file.
            </summary>
            <remarks>Since no alias is provided, the first entry in the certificate file will be used.</remarks>
            <returns>The CA expiration date.</returns>
            <exception cref="T:Zebra.Sdk.Certificate.ZebraCertificateException">If the certificate keystore is invalid or the provided alias 
            does not exist in the certificate keystore.</exception>
        </member>
        <member name="M:Zebra.Sdk.Certificate.ZebraP12Info.GetCaExpirationDate(System.String)">
            <summary>
            Get the expiration data of the CA associated with the certificate file.
            </summary>
            <param name="alias">The alias name of the specific entry to extract from the certificate file.</param>
            <returns>The CA expiration date.</returns>
            <exception cref="T:Zebra.Sdk.Certificate.ZebraCertificateException">If the certificate keystore is invalid or the provided alias 
            does not exist in the certificate keystore.</exception>
        </member>
        <member name="M:Zebra.Sdk.Certificate.ZebraP12Info.GetPrivateKeyAlgorithm">
            <summary>
            Get the algorithm used by the private key.
            </summary>
            <remarks>Since no alias is provided, the first entry in the certificate file will be used.</remarks>
            <returns>The private key algorithm.</returns>
            <exception cref="T:Zebra.Sdk.Certificate.ZebraCertificateException">If the provided certificate file is invalid, alias does not exist, 
            or contained private key is corrupt or unsupported.</exception>
        </member>
        <member name="M:Zebra.Sdk.Certificate.ZebraP12Info.GetPrivateKeyAlgorithm(System.String)">
            <summary>
            Get the algorithm used by the private key.
            </summary>
            <param name="alias">The alias name of the specific entry to extract from the certificate file.</param>
            <returns>The private key algorithm.</returns>
            <exception cref="T:Zebra.Sdk.Certificate.ZebraCertificateException">If the provided certificate file is invalid, alias does not exist, 
            or contained private key is corrupt or unsupported.</exception>
        </member>
        <member name="M:Zebra.Sdk.Certificate.ZebraP12Info.GetCertificateIssuer">
            <summary>
            Get the issuer of the client certificate.
            </summary>
            <remarks>Since no alias is provided, the first entry in the certificate file will be used.</remarks>
            <returns>The client certificate issuer.</returns>
            <exception cref="T:Zebra.Sdk.Certificate.ZebraCertificateException">If the provided certificate file is invalid, alias does not exist, 
            or contained private key is corrupt or unsupported.</exception>
        </member>
        <member name="M:Zebra.Sdk.Certificate.ZebraP12Info.GetCertificateIssuer(System.String)">
            <summary>
            Get the issuer of the client certificate.
            </summary>
            <param name="alias">The alias name of the specific entry to extract from the certificate file.</param>
            <returns>The client certificate issuer.</returns>
            <exception cref="T:Zebra.Sdk.Certificate.ZebraCertificateException">If the provided certificate file is invalid, alias does not exist, 
            or contained private key is corrupt or unsupported.</exception>
        </member>
        <member name="P:Zebra.Sdk.Certificate.ZebraP12Info.KeyStore">
            <summary>
            Gets the keystore of the processed client certificate.
            </summary>
            <returns>The Pkcs12Store containing information about the processed certificate file.</returns>
        </member>
        <member name="T:Zebra.Sdk.Comm.Connection">
            <summary>
            A connection to a device.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.Connection.Open">
            <summary>
            Opens the connection to a device.
            </summary>
            <remarks>
            If the <c>open</c> method is called when this connection has already been
            opened, this call is ignored. When a handle to the connection is no longer needed, you must call <see cref="M:Zebra.Sdk.Comm.Connection.Close"/>
            to free up system resources.
            </remarks>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the connection cannot be established.</exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.Connection.Close">
            <summary>
            Closes this connection and releases any system resources associated with the connection.
            </summary>
            <remarks>If the connection is already closed then invoking this method has no effect.</remarks>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.Connection.Write(System.Byte[])">
            <summary>
            Writes <c>data.Length</c> bytes from the specified byte array to this output stream.
            </summary>
            <remarks>
            The connection must be open before this method is called. If<c> write</c> is called when a connection is closed, a
            <c>ConnectionException</c> is thrown.
            </remarks>
            <param name="data">Data to write</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.Connection.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes <c>length</c> bytes from <c>data</c> starting at <c>offset</c>.
            </summary>
            <remarks>
            The connection must be open before this method is called. If <c>Write</c> is called when a 
            connection is closed, a <c>ConnectionException</c> is thrown.
            </remarks>
            <param name="data">The data.</param>
            <param name="offset">The start offset in the <c>data</c>.</param>
            <param name="length">The number of bytes to write.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">if an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.Connection.Write(System.IO.BinaryReader)">
            <summary>
             Writes all available bytes from the data source to this output stream.
            </summary>
            <remarks>
            The connection must be open before this method is called. If <c>write</c> is called when a connection is closed, 
            a <c>ConnectionException</c> is thrown.
            </remarks>
            <param name="dataSource">The data.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.Connection.Read">
            <summary>
            Reads all the available data from the connection. This call is non-blocking.
            </summary>
            <returns>Data read from the connection.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.Connection.ReadChar">
            <summary>
            Reads the next byte of data from the connection.
            </summary>
            <remarks>
            The value byte is returned as an int in the range of 0 to 255. If no byte is available on the 
            connection the value -1 is returned.
            </remarks>
            <returns>The next byte from the connection.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.Connection.Read(System.IO.BinaryWriter)">
            <summary>
            Reads all the available data from the connection.
            </summary>
            <remarks>This call is non-blocking.</remarks>
            <param name="destinationStream">For read data.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="P:Zebra.Sdk.Comm.Connection.Connected">
            <summary>
            Returns true if the connection is open.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.Connection.BytesAvailable">
            <summary>
            Returns an estimate of the number of bytes that can be read from this connection without blocking.
            </summary>
            <returns>The estimated number of bytes available.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.Connection.ToString">
            <summary>
            See the classes which implement this method for the format of the description string.
            </summary>
            <returns>The connection description string.</returns>
        </member>
        <member name="P:Zebra.Sdk.Comm.Connection.SimpleConnectionName">
            <summary>
            Gets a human-readable description of the connection.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.Connection.WaitForData(System.Int32)">
            <summary>
            Causes the currently executing thread to sleep until <see cref="M:Zebra.Sdk.Comm.Connection.BytesAvailable"/> > 0, or for a maximum of 
            <c>maxTimeout</c> milliseconds.
            </summary>
            <param name="maxTimeout">The maximum time in milliseconds to wait for an initial response from the printer.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="P:Zebra.Sdk.Comm.Connection.MaxTimeoutForRead">
            <summary>
            Gets or sets the maximum time, in milliseconds, to wait for any data to be received.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Comm.Connection.TimeToWaitForMoreData">
            <summary>
            Gets or sets the maximum time, in milliseconds, to wait in-between reads after the initial read.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.Connection.SendAndWaitForResponse(System.Byte[],System.Int32,System.Int32,System.String)">
            <summary>
            Sends <c>dataToSend</c> and returns the response data.
            </summary>
            <remarks>
            The software returns immediately if the data received contains <c>terminator</c>. The connection must be open before this method 
            is called. If <c>sendAndWaitForResponse</c> is called when a connection is closed, a <c>ConnectionException</c> is thrown.
            </remarks>
            <param name="dataToSend">Byte array of data to send</param>
            <param name="initialResponseTimeout">The maximum time, in milliseconds, to wait for the initial response to be received. 
            If no data is received during this time, the function returns a zero length array.</param>
            <param name="responseCompletionTimeout">After the initial response, if no data is received for this period of time, the 
            input is considered complete and the method returns.</param>
            <param name="terminator">If the response contains this string, the input is considered complete and the method returns. 
            May be used to avoid waiting for more data when the response is always terminated with a known string. Use <c>null</c> 
            if no terminator is desired.</param>
            <returns>The received data.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.Connection.SendAndWaitForResponse(System.IO.BinaryWriter,System.IO.BinaryReader,System.Int32,System.Int32,System.String)">
            <summary>
            Sends data from <c>sourceStream</c> and writes the response data to destinationStream.
            </summary>
            <remarks>
            The software returns immediately if the data received contains <c>terminator</c>. The connection must be open before this method 
            is called. If <c>sendAndWaitForResponse</c> is called when a connection is closed, a <c>ConnectionException</c> is thrown.
            </remarks>
            <param name="destinationStream">Destination for response.</param>
            <param name="sourceStream">Source of data to be sent.</param>
            <param name="initialResponseTimeout">The maximum time, in milliseconds, to wait for the initial response to be received. 
            If no data is received during this time, the function does not write any data to the destination stream.</param>
            <param name="responseCompletionTimeout">After the initial response, if no data is received for this period of time, the 
            input is considered complete and the method returns.</param>
            <param name="terminator">If the response contains this string, the input is considered complete and the method returns. 
            May be used to avoid waiting for more data when the response is always terminated with a known string. Use <c>null</c> 
            if no terminator is desired.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.Connection.SendAndWaitForValidResponse(System.Byte[],System.Int32,System.Int32,Zebra.Sdk.Comm.ResponseValidator)">
            <summary>
            Sends <c>dataToSend</c> and returns the response data.
            </summary>
            <remarks>
            The software returns immediately if the data received satisfies <c>validator</c>. The connection must be open before this method is called. 
            If <c>sendAndWaitForResponse</c> is called when a connection is closed, a <c>ConnectionException</c> is thrown.
            </remarks>
            <param name="dataToSend">Byte array of data to send</param>
            <param name="initialResponseTimeout">The maximum time, in milliseconds, to wait for the initial response to be received. 
            If no data is received during this time, the function returns a zero length array.</param>
            <param name="responseCompletionTimeout">After the initial response, if no data is received for this period of time, the 
            input is considered complete and the method returns.</param>
            <param name="validator">If the response satisfies this validator, the input is considered complete and the method returns. 
            May be used to avoid waiting for more data when the response follows a known format.</param>
            <returns>received data</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.Connection.SendAndWaitForValidResponse(System.IO.BinaryWriter,System.IO.BinaryReader,System.Int32,System.Int32,Zebra.Sdk.Comm.ResponseValidator)">
            <summary>
            Sends data from <c>sourceStream</c> and writes the response data to destinationStream.
            </summary>
            <remarks>
            The software returns immediately if the data received satisfies <c>validator</c>. The connection must be open before this method is called. 
            If <c>sendAndWaitForResponse</c> is called when a connection is closed, a <c>ConnectionException</c> is thrown.
            </remarks>
            <param name="destinationStream">Destination for response.</param>
            <param name="sourceStream">Source of data to be sent.</param>
            <param name="initialResponseTimeout">The maximum time, in milliseconds, to wait for the initial response to be received. 
            If no data is received during this time, the function does not write any data to the destination stream.</param>
            <param name="responseCompletionTimeout">After the initial response, if no data is received for this period of time, the 
            input is considered complete and the method returns.</param>
            <param name="validator">If the response satisfies this validator, the input is considered complete and the method returns. 
            May be used to avoid waiting for more data when the response follows a known format.If validator is null, no validation is performed. 
            When performing validation, this method will use enough memory to hold the entire response.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.Connection.GetConnectionReestablisher(System.Int64)">
            <summary>
            Returns a <c>ConnectionReestablisher</c> which allows for easy recreation of a connection which may have been closed.
            </summary>
            <remarks>This call should be made while there is still an active connection to the printer (prior to issuing a command which will make the printer non-responsive).</remarks>
            <param name="thresholdTime">How long the Connection reestablisher will wait before attempting to reconnection to the printer.</param>
            <returns>Instance of <see cref="T:Zebra.Sdk.Comm.ConnectionReestablisher"/></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the ConnectionReestablisher could not be created.</exception>
        </member>
        <member name="T:Zebra.Sdk.Comm.ConnectionA">
            <summary>
            Abstract class which implements the default functionality of <c>Connection</c>.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Comm.ConnectionA.SIZE_OF_STREAM_BUFFERS">
            <summary>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Comm.ConnectionA.maxTimeoutForRead">
            <summary>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Comm.ConnectionA.timeToWaitForMoreData">
            <summary>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Comm.ConnectionA.commLink">
            <summary>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Comm.ConnectionA.outputStream">
            <summary>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Comm.ConnectionA.inputStream">
            <summary>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Comm.ConnectionA.isDeviceConnected">
            <summary>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Comm.ConnectionA.zebraConnector">
            <summary>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Comm.ConnectionA.myWriteLogStream">
            <summary>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Comm.ConnectionA.multipartTimeToWaitAfterSend">
            <summary>
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.ConnectionA.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.ConnectionA.Open">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Comm.ConnectionA.Close">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Comm.ConnectionA.Write(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Comm.ConnectionA.Write(System.IO.BinaryReader)">
            <inheritdoc cref="M:Zebra.Sdk.Comm.Connection.Write(System.IO.BinaryReader)"/>
        </member>
        <member name="M:Zebra.Sdk.Comm.ConnectionA.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Zebra.Sdk.Comm.ConnectionA.Connected">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Comm.ConnectionA.Read">
            <inheritdoc/> 
        </member>
        <member name="M:Zebra.Sdk.Comm.ConnectionA.Read(System.Int32)">
            <summary>
            Reads <c>maxBytesToRead</c> of the available data from the connection.
            </summary>
            <remarks>This call is non-blocking.</remarks>
            <param name="maxBytesToRead">number of bytes to read</param>
            <returns>the bytes read from the connection</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">if an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.ConnectionA.Read(System.IO.BinaryWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Comm.ConnectionA.ReadChar">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Comm.ConnectionA.BytesAvailable">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Comm.ConnectionA.WaitForData(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Zebra.Sdk.Comm.ConnectionA.MaxTimeoutForRead">
            <inheritdoc/>
        </member>
        <member name="P:Zebra.Sdk.Comm.ConnectionA.TimeToWaitForMoreData">
            <inheritdoc/>
        </member>
        <member name="P:Zebra.Sdk.Comm.ConnectionA.MultipartTimeToWaitAfterSend">
            <summary>
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.ConnectionA.SendAndWaitForResponse(System.Byte[],System.Int32,System.Int32,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Comm.ConnectionA.SendAndWaitForResponse(System.IO.BinaryWriter,System.IO.BinaryReader,System.Int32,System.Int32,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Comm.ConnectionA.SendAndWaitForValidResponse(System.Byte[],System.Int32,System.Int32,Zebra.Sdk.Comm.ResponseValidator)">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Comm.ConnectionA.SendAndWaitForValidResponse(System.IO.BinaryWriter,System.IO.BinaryReader,System.Int32,System.Int32,Zebra.Sdk.Comm.ResponseValidator)">
            <inheritdoc/> 
        </member>
        <member name="M:Zebra.Sdk.Comm.ConnectionA.GetConnectionReestablisher(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Comm.ConnectionA.AddWriteLogStream(System.IO.BinaryWriter)">
            <summary>
            Sets the stream to log the write data to.
            </summary>
            <param name="logStream">The stream to log the data to.</param>
        </member>
        <member name="M:Zebra.Sdk.Comm.ConnectionA.WriteToLogStream(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Log data sent to printer by sending to the WriteLogStream, if present
            </summary>
            <param name="buffer">The data written to connection, send to log stream</param>
            <param name="offset">The start offset in the <c>buffer</c>.</param>
            <param name="numBytes">The number of bytes to write</param>
            <exception cref="T:Zebra.Sdk.Comm.LogStreamException"></exception>
        </member>
        <member name="P:Zebra.Sdk.Comm.ConnectionA.MaxDataToWrite">
            <summary>
            Gets or sets the maximum number of bytes to write at one time
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.ConnectionA.Read(System.Int32,System.Boolean)">
            <summary>
            Reads <c>maxBytesToRead</c> of the available data from the connection.
            </summary>
            <param name="maxBytesToRead">number of bytes to read</param>
            <param name="exitOnFirstRead">true to exit on first data read</param>
            <returns>the bytes read from the connection.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">if an I/O error occurs.</exception>
        </member>
        <member name="P:Zebra.Sdk.Comm.ConnectionA.Manufacturer">
            <summary>
            See the classes which implement this property for the format of the printer manufacturer string.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.ConnectionA.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Zebra.Sdk.Comm.ConnectionA.SimpleConnectionName">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Comm.ConnectionA.SetReadTimeout(System.Int32)">
            <summary>
            Sets the underlying read timeout value.
            </summary>
            <param name="timeout">The read timeout in milliseconds.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an error occurs while attempting to set the read timeout.</exception>
        </member>
        <member name="T:Zebra.Sdk.Comm.ConnectionChannel">
            <summary>
            For printers that support both Status and Printing channel (Link OS printers).
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Comm.ConnectionChannel.STATUS_CHANNEL">
            <summary>
            The status channel of a connection.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Comm.ConnectionChannel.PRINTING_CHANNEL">
            <summary>
            The printing channel of a connection.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Comm.ConnectionException">
            <summary>
            Signals that an error has occurred on the connection.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.ConnectionException.#ctor(System.String)">
            <summary>
            onstructs a <c>ConnectionException</c> with <c>message</c> as the detailed error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Zebra.Sdk.Comm.ConnectionException.#ctor(System.Exception)">
            <summary>
            Constructs a <c>ConnectionException</c> with <c>cause</c> as the source of the exception.
            </summary>
            <param name="cause">The cause of the exception.</param>
        </member>
        <member name="M:Zebra.Sdk.Comm.ConnectionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a <c>ConnectionException</c> with the <c>message</c> as the detailed error message and 
            <c>cause</c> as the source of the exception.
            </summary>
            <param name="message">The error message.</param>
            <param name="cause">The cause of the exception.</param>
        </member>
        <member name="T:Zebra.Sdk.Comm.ConnectionReestablisher">
            <summary>
            Defines methods used to reestablish a connection to a printer which may have been closed.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.ConnectionReestablisher.ReestablishConnection(Zebra.Sdk.Printer.PrinterReconnectionHandler)">
            <summary>
            Reestablishes a connection to a printer which may have been closed due to an event, like a reboot.
            </summary>
            <param name="handler">Handles recreating and opening a connection to a printe.r</param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException">If the printer cannot be found.</exception>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the connection can not be created or open.</exception>
            <exception cref="T:System.TimeoutException">If a connection can not be reestablished after a defined timeout</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the connection can not talk to the printer.</exception>
        </member>
        <member name="T:Zebra.Sdk.Comm.ConnectionStatusA">
            <summary>
            Abstract class which implements the default functionality of <c>StatusConnection</c>.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.ConnectionStatusA.#ctor">
            <summary>
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Comm.ConnectionWithWriteLogging">
            <summary>
            A connection to a device that copies data sent to the connection to the provided stream.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.ConnectionWithWriteLogging.AddWriteLogStream(System.IO.BinaryWriter)">
            <summary>
            Sets the stream to log the write data to.
            </summary>
            <param name="logStream">Log all write data to this stream.</param>
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.ConnectionBuilderInternal.Build(System.String)">
            <summary>
            </summary>
            <param name="descriptionString"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.ConnectionBuilderInternal.ReflectivelyInstatiateConnection(Zebra.Sdk.Comm.Internal.ConnectionInfo,System.Object)">
            <summary>
            </summary>
            <param name="connectionInfo"></param>
            <param name="thisClass"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.MemberAccessException"></exception>
            <exception cref="T:System.MethodAccessException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.Reflection.TargetInvocationException"></exception>
            <exception cref="T:System.Reflection.TargetParameterCountException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.ConnectionBuilderInternal.DetermineConnectionToTry(System.Collections.Generic.List{Zebra.Sdk.Comm.Connection},Zebra.Sdk.Printer.Internal.VerbosePrinter)">
            <summary>
            </summary>
            <param name="possibleConnections"></param>
            <param name="sysOutPrinter"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="T:Zebra.Sdk.Comm.Internal.ConnectionI">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.ConnectionI.Read(System.Int32,System.Boolean)">
            <summary>
            Reads <c>maxBytesToRead</c> of the available data from the connection.
            </summary>
            <param name="maxBytesToRead">Number of bytes to read.</param>
            <param name="exitOnFirstRead">True to return on first read.</param>
            <returns>The bytes read from the printer.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.ConnectionI.Read(System.Int32)">
            <summary>
            Reads <c>maxBytesToRead</c> of the available data from the connection.
            </summary>
            <param name="maxBytesToRead">Number of bytes to read.</param>
            <returns>The bytes read from the printer.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs</exception>
        </member>
        <member name="P:Zebra.Sdk.Comm.Internal.ConnectionI.MaxDataToWrite">
            <summary>
            Gets or sets the maximum number of bytes to write at one time.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Comm.Internal.ConnectionI.Manufacturer">
            <summary>
            Returns the printer manufacturer name.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.ConnectionI.SetReadTimeout(System.Int32)">
            <summary>
            Sets the underlying read timeout value.
            </summary>
            <param name="readTimeout">The timeout in milliseconds.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs</exception>
        </member>
        <member name="T:Zebra.Sdk.Comm.Internal.ConnectionInfo">
            <summary>
            A wrapper class containing information about a connection.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.ConnectionInfo.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="inputString">The connection string</param>
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.ConnectionInfo.GetMyData">
            <summary>
            
            </summary>
            <returns>The data of the connection info</returns>
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.ConnectionReestablisherBase.WaitForPrinterToComeOnlineViaSgdAndGetFwVer(Zebra.Sdk.Comm.Connection)">
            <summary>
            </summary>
            <param name="connection"></param>
            <returns></returns>
            <exception cref="T:System.TimeoutException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.ConnectionReestablisherBase.TimeoutCheck">
            <summary>
            </summary>
            <exception cref="T:System.TimeoutException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.FTP.GetFile(System.IO.Stream,System.String)">
            <summary>
            Writes a byte stream representation of the file to <c>destination</c>.
            </summary>
            <remarks>
            Currently all files are retrieved in binary mode.
            </remarks>
            <param name="destination">Stream to receive the contents of the file.</param>
            <param name="fullPath"></param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="T:Zebra.Sdk.Comm.Internal.NotMyConnectionDataException">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.NotMyConnectionDataException.#ctor(System.String)">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
            <param name="message">the error message</param>
        </member>
        <member name="T:Zebra.Sdk.Comm.Internal.PrinterCommand">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.PrinterCommand.SendAndWaitForResponse(Zebra.Sdk.Comm.Connection)">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
            <param name="printerConnection"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.PrinterCommand.SendAndWaitForResponse(Zebra.Sdk.Comm.Connection,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="printerConnection"></param>
            <param name="maxTimeoutForRead"></param>
            <param name="timeToWaitForMoreData"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.PrinterCommand.SendAndWaitForResponse(Zebra.Sdk.Comm.Connection,System.Int32,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="printerConnection"></param>
            <param name="maxTimeoutForRead"></param>
            <param name="timeToWaitForMoreData"></param>
            <param name="terminator"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.PrinterCommand.SendAndWaitForResponse(System.IO.BinaryWriter,Zebra.Sdk.Comm.Connection)">
            <summary>
            
            </summary>
            <param name="response"></param>
            <param name="printerConnection"></param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.PrinterCommand.SendAndWaitForResponse(System.IO.BinaryWriter,Zebra.Sdk.Comm.Connection,System.Int32,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="response"></param>
            <param name="printerConnection"></param>
            <param name="maxTimeoutForRead"></param>
            <param name="timeToWaitForMoreData"></param>
            <param name="terminator"></param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="T:Zebra.Sdk.Comm.Internal.PrinterCommandImpl">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.PrinterCommandImpl.#ctor(System.String)">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.PrinterCommandImpl.SendAndWaitForResponse(Zebra.Sdk.Comm.Connection)">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
            <see cref="M:Zebra.Sdk.Comm.Internal.PrinterCommand.SendAndWaitForResponse(Zebra.Sdk.Comm.Connection)"/>
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.PrinterCommandImpl.SendAndWaitForResponse(Zebra.Sdk.Comm.Connection,System.Int32,System.Int32)">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
            <see cref="M:Zebra.Sdk.Comm.Internal.PrinterCommand.SendAndWaitForResponse(Zebra.Sdk.Comm.Connection,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.PrinterCommandImpl.SendAndWaitForResponse(Zebra.Sdk.Comm.Connection,System.Int32,System.Int32,System.String)">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
            <see cref="M:Zebra.Sdk.Comm.Internal.PrinterCommand.SendAndWaitForResponse(Zebra.Sdk.Comm.Connection,System.Int32,System.Int32,System.String)"/>
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.PrinterCommandImpl.SendAndWaitForValidJsonResponse(Zebra.Sdk.Comm.Connection)">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
            <see cref="M:Zebra.Sdk.Comm.Internal.PrinterCommand.SendAndWaitForResponse(Zebra.Sdk.Comm.Connection)"/> 
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.PrinterCommandImpl.SendAndWaitForResponse(System.IO.BinaryWriter,Zebra.Sdk.Comm.Connection)">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
            <see cref="M:Zebra.Sdk.Comm.Internal.PrinterCommand.SendAndWaitForResponse(System.IO.BinaryWriter,Zebra.Sdk.Comm.Connection)"/> 
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.PrinterCommandImpl.SendAndWaitForResponse(System.IO.BinaryWriter,Zebra.Sdk.Comm.Connection,System.Int32,System.Int32,System.String)">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
            <see cref="M:Zebra.Sdk.Comm.Internal.PrinterCommand.SendAndWaitForResponse(System.IO.BinaryWriter,Zebra.Sdk.Comm.Connection,System.Int32,System.Int32,System.String)"/> 
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.TcpConnectionReestablisher.SinglePrinterDiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)">
            <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/>
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.TcpConnectionReestablisher.SinglePrinterDiscoveryHandler.DiscoveryFinished">
            <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> 
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.TcpConnectionReestablisher.SinglePrinterDiscoveryHandler.DiscoveryError(System.String)">
            <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> 
        </member>
        <member name="T:Zebra.Sdk.Comm.Internal.ZebraConnector">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.ZebraConnector.Open">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.ZebraNetworkSocket.#ctor(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="port"></param>
            <exception cref="T:System.Exception">UnknownHostException</exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.ZebraNetworkSocket.Close">
            <see cref="M:Zebra.Sdk.Comm.Internal.ZebraSocket.Close"/> 
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.ZebraNetworkSocket.GetInputStream">
            <see cref="M:Zebra.Sdk.Comm.Internal.ZebraSocket.GetInputStream"/> 
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.ZebraNetworkSocket.GetOutputStream">
            <see cref="M:Zebra.Sdk.Comm.Internal.ZebraSocket.GetOutputStream"/> 
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.ZebraNetworkSocket.Connect">
            <see cref="M:Zebra.Sdk.Comm.Internal.ZebraSocket.Connect"/> 
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.ZebraNetworkSocket.SetReadTimeout(System.Int32)">
            <summary>
            Sets the sockets read/block timeout.
            </summary>
            <param name="timeout">Timeout in ms</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:Zebra.Sdk.Comm.Internal.ZebraSocket">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.ZebraSocket.Connect">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.ZebraSocket.Close">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.ZebraSocket.GetOutputStream">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.Internal.ZebraSocket.GetInputStream">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:Zebra.Sdk.Comm.IpAddressable">
            <summary>
            An interface defining methods associated with a device that may be addressed via an IP connection.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Comm.IpAddressable.Address">
            <summary>
            Returns the address which was passed into the constructor.
            </summary>
            <returns>the address used to establish this connection. This can be either a DNS Hostname or an IP address.</returns>
        </member>
        <member name="P:Zebra.Sdk.Comm.IpAddressable.PortNumber">
            <summary>
            Returns the port number which was passed into the constructor.
            </summary>
            <returns>the port number associated with the connection.</returns>
        </member>
        <member name="T:Zebra.Sdk.Comm.LogStreamException">
            <summary>
            Signals that an error has occurred while writing to the connections log stream.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.LogStreamException.#ctor(System.String)">
            <summary>
            Constructs a <c>LogStreamException</c> with <c>message</c> as the detailed error message.
            </summary>
            <param name="message">the error message.</param>
        </member>
        <member name="T:Zebra.Sdk.Comm.MultichannelConnection">
            <summary>
            Base class for Link-OS printers which support separate printing and status channels.
            </summary>
            <remarks>
            This class conforms to a standard <see cref="T:Zebra.Sdk.Comm.Connection"/> and if only the <c>Connection</c> methods are used, the SDK will attempt to open 
            both the printing and status channels. A <see cref="T:Zebra.Sdk.Comm.MultichannelConnection"/> will use the raw Connection when a method is called directly. 
            Furthermore, when using a <see cref="T:Zebra.Sdk.Printer.ZebraPrinterLinkOs"/> in conjunction with a <see cref="T:Zebra.Sdk.Comm.MultichannelConnection"/>, the <see cref="T:Zebra.Sdk.Printer.ZebraPrinterLinkOs"/> will 
            attempt to use whichever connection is the most efficient. If you wish to only open up a specific channel, use either the 
            <see cref="M:Zebra.Sdk.Comm.MultichannelConnection.OpenPrintingChannel"/> or 
            <see cref="M:Zebra.Sdk.Comm.MultichannelConnection.OpenStatusChannel"/> method and their corresponding
            <see cref="M:Zebra.Sdk.Comm.MultichannelConnection.ClosePrintingChannel"/> and
            <see cref="M:Zebra.Sdk.Comm.MultichannelConnection.CloseStatusChannel"/> method.
            </remarks>
        </member>
        <member name="F:Zebra.Sdk.Comm.MultichannelConnection.raw">
            <summary>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Comm.MultichannelConnection.settings">
            <summary>
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.MultichannelConnection.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.MultichannelConnection.Open">
            <summary>
            Opens both the printing and status channel of this Multichannel connection.
            </summary>
            <remarks>
            If neither channel can be opened, then a <see cref="T:Zebra.Sdk.Comm.ConnectionException"/> is thrown. When this Multichannel connection is no longer needed, you must 
            call <see cref="M:Zebra.Sdk.Comm.Connection.Close"/> to free up system resources.
            </remarks>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.MultichannelConnection.OpenPrintingChannel">
            <summary>
            Opens the printing channel of this Multichannel connection.
            </summary>
            <remarks>
            If this method is called when this channel has already been opened, the call is ignored. When this channel is no longer needed, you must call either 
            <see cref="M:Zebra.Sdk.Comm.Connection.Close"/> or <see cref="M:Zebra.Sdk.Comm.MultichannelConnection.ClosePrintingChannel"/> to free up system resources.
            </remarks>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">if the connection cannot be established.</exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.MultichannelConnection.OpenStatusChannel">
            <summary>
            Opens the status channel of this Multichannel connection.
            </summary>
            <remarks>
            If this method is called when this channel has already been opened, the call is ignored. When this channel is no longer needed, you must call either 
            <see cref="M:Zebra.Sdk.Comm.Connection.Close"/> or <see cref="M:Zebra.Sdk.Comm.MultichannelConnection.CloseStatusChannel"/> to free up system resources.
            </remarks>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">if the connection cannot be established.</exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.MultichannelConnection.Close">
            <summary>
            Closes both the printing and status channels of this MultichannelConnection.
            </summary>
            <remarks>
            Releases any system resources associated with the connection. If the connection is already closed then invoking this method has no effect.
            </remarks>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.MultichannelConnection.ClosePrintingChannel">
            <summary>
            Closes the printing channel of this MultichannelConnection.
            </summary>
            <remarks>
            Releases any system resources associated with the connection. If the connection is already closed then invoking this method has no effect.
            </remarks>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">if an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.MultichannelConnection.CloseStatusChannel">
            <summary>
             Closes the status channel of this MultichannelConnection.
            </summary>
            <remarks>
            Releases any system resources associated with the connection. If the connection is already closed then invoking this method has no effect.
            </remarks>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">if an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.MultichannelConnection.Write(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Comm.MultichannelConnection.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/> 
        </member>
        <member name="M:Zebra.Sdk.Comm.MultichannelConnection.Write(System.IO.BinaryReader)">
            <inheritdoc cref="M:Zebra.Sdk.Comm.Connection.Write(System.IO.BinaryReader)"/> 
        </member>
        <member name="M:Zebra.Sdk.Comm.MultichannelConnection.Read">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Comm.MultichannelConnection.Read(System.IO.BinaryWriter)">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Comm.MultichannelConnection.ReadChar">
            <inheritdoc/>
        </member>
        <member name="P:Zebra.Sdk.Comm.MultichannelConnection.Connected">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Comm.MultichannelConnection.BytesAvailable">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Comm.MultichannelConnection.WaitForData(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Zebra.Sdk.Comm.MultichannelConnection.MaxTimeoutForRead">
            <inheritdoc/>
        </member>
        <member name="P:Zebra.Sdk.Comm.MultichannelConnection.TimeToWaitForMoreData">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Comm.MultichannelConnection.SendAndWaitForResponse(System.Byte[],System.Int32,System.Int32,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Comm.MultichannelConnection.SendAndWaitForResponse(System.IO.BinaryWriter,System.IO.BinaryReader,System.Int32,System.Int32,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Comm.MultichannelConnection.SendAndWaitForValidResponse(System.Byte[],System.Int32,System.Int32,Zebra.Sdk.Comm.ResponseValidator)">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Comm.MultichannelConnection.SendAndWaitForValidResponse(System.IO.BinaryWriter,System.IO.BinaryReader,System.Int32,System.Int32,Zebra.Sdk.Comm.ResponseValidator)">
            <inheritdoc/>
        </member>
        <member name="P:Zebra.Sdk.Comm.MultichannelConnection.PrintingChannel">
            <summary>
            Gets the underlying printing <see cref="T:Zebra.Sdk.Comm.Connection"/> of this MultichannelConnection.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Comm.MultichannelConnection.StatusChannel">
            <summary>
            Gets the underlying status <see cref="T:Zebra.Sdk.Comm.StatusConnection"/> of this MultichannelConnection.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.MultichannelConnection.GetConnectionReestablisher(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Comm.MultichannelConnection.AddWriteLogStream(System.IO.BinaryWriter)">
            <inheritdoc/>
        </member>
        <member name="P:Zebra.Sdk.Comm.MultichannelConnection.SimpleConnectionName">
            <inheritdoc/>
        </member>
        <member name="T:Zebra.Sdk.Comm.MultichannelTcpConnection">
            <summary>
            Establishes a Multichannel TCP connection to a device.
            </summary>
            <example><code source="../SdkApi_Test/Test/Zebra/Sdk/Comm/Examples/MultichannelTcpConnectionExample.cs"/></example>
        </member>
        <member name="F:Zebra.Sdk.Comm.MultichannelTcpConnection.DEFAULT_MULTICHANNEL_PRINTING_PORT">
            <summary>
            The default Multichannel printing port for Link-OS devices.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Comm.MultichannelTcpConnection.DEFAULT_MULTICHANNEL_STATUS_PORT">
            <summary>
            The default Multichannel status port for Link-OS devices.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Comm.MultichannelTcpConnection.ConnectionBuilderPrefix">
            <summary>
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.MultichannelTcpConnection.#ctor(Zebra.Sdk.Comm.Internal.ConnectionInfo)">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
            <param name="connectionInfo"></param>
            <exception cref="T:Zebra.Sdk.Comm.Internal.NotMyConnectionDataException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.MultichannelTcpConnection.#ctor(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)">
            <summary>
            Initializes a new instance of the <c>MultichannelTcpConnection</c> class.
            </summary>
            <remarks>
            This constructor will use the default timeouts for <see cref="M:Zebra.Sdk.Comm.Connection.Read"/>. The default timeout is a maximum of 5 seconds for any data to be 
            received. If no more data is available after 500 milliseconds the read operation is assumed to be complete.<br/>
            To specify timeouts other than the defaults, use:<br/>
            <see cref="M:Zebra.Sdk.Comm.MultichannelTcpConnection.#ctor(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter,System.Int32,System.Int32)"/> or
            <see cref="M:Zebra.Sdk.Comm.MultichannelTcpConnection.#ctor(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter,System.Int32,System.Int32,System.Int32,System.Int32)"/> 
            </remarks>
            <param name="discoveredPrinter">The discovered printer.</param>
        </member>
        <member name="M:Zebra.Sdk.Comm.MultichannelTcpConnection.#ctor(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <c>MultichannelTcpConnection</c> class.
            </summary>
            <remarks>
            This constructor will use the specified timeouts for <see cref="M:Zebra.Sdk.Comm.Connection.Read"/> for both channels. The timeout is a maximum of 
            <c>maxTimeoutForRead</c> milliseconds for any data to be received. If no more data is available after <c>timeToWaitForMoreData</c> 
            milliseconds the read operation is assumed to be complete. If you wish to specify different timeouts for each channel, use<br/>
            <see cref="M:Zebra.Sdk.Comm.MultichannelTcpConnection.#ctor(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter,System.Int32,System.Int32,System.Int32,System.Int32)"/> 
            </remarks>
            <param name="discoveredPrinter">The discovered printer.</param>
            <param name="maxTimeoutForRead">The maximum time, in milliseconds, to wait for any data to be received.</param>
            <param name="timeToWaitForMoreData">The maximum time, in milliseconds, to wait in-between reads after the initial read.</param>
        </member>
        <member name="M:Zebra.Sdk.Comm.MultichannelTcpConnection.#ctor(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <c>MultichannelTcpConnection</c> class.
            </summary>
            <remarks>
            This constructor will use the specified timeouts for <see cref="M:Zebra.Sdk.Comm.Connection.Read"/> for the channels. The timeout is a maximum of 
            <c>printingChannelMaxTimeoutForRead/statusChannelMaxTimeoutForRead</c> milliseconds for any data to be received on the printing/status 
            channels respectively.If no more data is available after <c>printingChannelTimeToWaitForMoreData/statusChannelTimeToWaitForMoreData</c> 
            milliseconds on the printing/status channels respectively the read operation is assumed to be complete.
            </remarks>
            <param name="discoveredPrinter">The discovered printer.</param>
            <param name="printingChannelMaxTimeoutForRead">The maximum time, in milliseconds, to wait for any data to be received on the printing channel.</param>
            <param name="printingChannelTimeToWaitForMoreData">The maximum time, in milliseconds, to wait in-between reads after the initial read on the printing channel.</param>
            <param name="statusChannelMaxTimeoutForRead">The maximum time, in milliseconds, to wait for any data to be received on the status channel.</param>
            <param name="statusChannelTimeToWaitForMoreData">The maximum time, in milliseconds, to wait in-between reads after the initial read on the status channel.</param>
            <exception cref="T:System.ArgumentException">If <c>discoveredPrinter</c> is not a valid Link-OS printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.MultichannelTcpConnection.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <c>MultichannelTcpConnection</c> class.
            </summary>
            <remarks>
            This constructor will use the default timeouts for <see cref="M:Zebra.Sdk.Comm.Connection.Read"/> . The default timeout is a maximum of 5 seconds for any 
            data to be received.If no more data is available after 500 milliseconds the read operation is assumed to be complete.<br/>
            To specify timeouts other than the defaults, use:<br/>
            <see cref="M:Zebra.Sdk.Comm.MultichannelTcpConnection.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)"/> or
            <see cref="M:Zebra.Sdk.Comm.MultichannelTcpConnection.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/> 
            </remarks>
            <param name="ipAddress">The IP Address or DNS Hostname.</param>
            <param name="printingPort">The printing port number.</param>
            <param name="statusPort">The status port number.</param>
        </member>
        <member name="M:Zebra.Sdk.Comm.MultichannelTcpConnection.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <c>MultichannelTcpConnection</c> class.
            </summary>
            <remarks>
            This constructor will use the specified timeouts for <see cref="M:Zebra.Sdk.Comm.Connection.Read"/>  for both channels. The timeout is a maximum of 
            <c>maxTimeoutForRead</c> milliseconds for any data to be received.If no more data is available after <c>timeToWaitForMoreData</c> 
            milliseconds the read operation is assumed to be complete. If you wish to specify different timeouts for each channel, use
            <see cref="M:Zebra.Sdk.Comm.MultichannelTcpConnection.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/> 
            </remarks>
            <param name="ipAddress">The IP Address or DNS Hostname.</param>
            <param name="printingPort">The printing port number.</param>
            <param name="statusPort">The status port number.</param>
            <param name="maxTimeoutForRead">The maximum time, in milliseconds, to wait for any data to be received.</param>
            <param name="timeToWaitForMoreData">The maximum time, in milliseconds, to wait in-between reads after the initial read.</param>
        </member>
        <member name="M:Zebra.Sdk.Comm.MultichannelTcpConnection.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <c>MultichannelTcpConnection</c> class.
            </summary>
            <remarks>
            This constructor will use the specified timeouts for <see cref="M:Zebra.Sdk.Comm.Connection.Read"/> for the channels. The timeout is a maximum of 
            <c>printingChannelMaxTimeoutForRead/statusChannelMaxTimeoutForRead</c> milliseconds for any data to be received on the printing/status 
            channels respectively.If no more data is available after <c>printingChannelTimeToWaitForMoreData/statusChannelTimeToWaitForMoreData</c> 
            milliseconds on the printing/status channels respectively the read operation is assumed to be complete.
            </remarks>
            <param name="ipAddress">The IP Address or DNS Hostname.</param>
            <param name="printingPort">The printing port number.</param>
            <param name="statusPort">The status port number.</param>
            <param name="printingChannelMaxTimeoutForRead">The maximum time, in milliseconds, to wait for any data to be received on the printing channel.</param>
            <param name="printingChannelTimeToWaitForMoreData">The maximum time, in milliseconds, to wait in-between reads after the initial read on the printing channel.</param>
            <param name="statusChannelMaxTimeoutForRead">The maximum time, in milliseconds, to wait for any data to be received on the status channel.</param>
            <param name="statusChannelTimeToWaitForMoreData">The maximum time, in milliseconds, to wait in-between reads after the initial read on the status channel.</param>
        </member>
        <member name="M:Zebra.Sdk.Comm.MultichannelTcpConnection.Init(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.MultichannelTcpConnection.GetConnectionReestablisher(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Comm.MultichannelTcpConnection.ToString">
            <summary>
            The <c>Address</c>, <c>PrintingPort</c>, and <c>StatusPort</c> are the parameters which were passed into the constructor.
            </summary>
            <returns><c>TCP_MULTI</c>:[Address]:[PrintingPort]:[StatusPort]</returns>
        </member>
        <member name="P:Zebra.Sdk.Comm.MultichannelTcpConnection.SimpleConnectionName">
            <summary>
            Return the IP address as the description.
            </summary>
            <see cref="P:Zebra.Sdk.Comm.Connection.SimpleConnectionName"/> 
        </member>
        <member name="T:Zebra.Sdk.Comm.ResponseValidator">
            <summary>
            An interface defining a method to validate whether a response from the printer is complete.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.ResponseValidator.IsResponseComplete(System.Byte[])">
            <summary>
            Provide a method to determine whether a response from the printer is a complete response.
            </summary>
            <param name="input">string to be validated</param>
            <returns>true if the string is a complete response</returns>
        </member>
        <member name="T:Zebra.Sdk.Comm.StatusConnection">
            <summary>
            A status connection to a Link-OS printer. The status connection requires Link-OS firmware 2.5 or higher. This 
            connection will not block the printing channel, nor can it print.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Comm.StatusConnectionWithWriteLogging">
            <summary>
            A status connection to a Link-OS printer. The status connection requires Link-OS firmware 2.5 or higher. This 
            connection will not block the printing channel, nor can it print.It copies data sent to the connection to the 
            provided stream.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.StatusConnectionWithWriteLogging.AddWriteLogStream(System.IO.BinaryWriter)">
            <summary>
            Sets the stream to log the write data to.
            </summary>
            <param name="logStream">Log all write data to this stream.</param>
        </member>
        <member name="T:Zebra.Sdk.Comm.TcpConnection">
            <summary>
      Establishes a TCP connection to a device.
    </summary><example>
      Desktop
      <code source="../SdkApi_Test/Test/Zebra/Sdk/Comm/Examples/TcpConnectionExample.cs" />
    </example><example>
      Androidâ„¢
      <code source="../XamarinSdk/XamarinTest/XamarinTest.Android/Test/Zebra/Sdk/Comm/Examples/TcpConnectionExample.cs" />
    </example><example>
      iOS
      <code source="../XamarinSdk/XamarinTest/XamarinTest.iOS/Test/Zebra/Sdk/Comm/Examples/TcpConnectionExample.cs" />
    </example>
        </member>
        <member name="F:Zebra.Sdk.Comm.TcpConnection.DEFAULT_ZPL_TCP_PORT">
            <summary>
            The default TCP port for ZPL devices.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Comm.TcpConnection.DEFAULT_CPCL_TCP_PORT">
            <summary>
            The default TCP port for CPCL devices.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.TcpConnection.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.TcpConnection.#ctor(Zebra.Sdk.Comm.Internal.ConnectionInfo)">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
            <param name="connectionInfo"></param>
            <exception cref="T:Zebra.Sdk.Comm.Internal.NotMyConnectionDataException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Comm.TcpConnection.GetDefaultPort">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Comm.TcpConnection.ConnectionBuilderPrefix">
            <summary>
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.TcpConnection.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <c>TcpConnection</c> class.
            </summary>
            <remarks>
            This constructor will use the default
            timeouts for <see cref="M:Zebra.Sdk.Comm.Connection.Read"/>. The default timeout is a maximum of 5 seconds for any data to be
            received.If no more data is available after 500 milliseconds the read operation is assumed to be complete.<br/>
            To specify timeouts other than the defaults, use:<br/>
            <see cref="M:Zebra.Sdk.Comm.TcpConnection.#ctor(System.String,System.Int32,System.Int32,System.Int32)"/>.
            </remarks>
            <param name="address">the IP Address or DNS Hostname.</param>
            <param name="port">the port number.</param>
        </member>
        <member name="M:Zebra.Sdk.Comm.TcpConnection.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <c>TcpConnection</c> class.
            </summary>
            <remarks>
            This constructor will use the specified timeouts for <see cref="M:Zebra.Sdk.Comm.Connection.Read"/>. The timeout is a maximum of 
            <c>maxTimeoutForRead</c> milliseconds for any data to be received. If no more data is available after 
            <c>timeToWaitForMoreData</c> milliseconds the read operation is assumed to be complete.
            </remarks>
            <param name="address">The IP Address or DNS Hostname.</param>
            <param name="port">The port number.</param>
            <param name="maxTimeoutForRead">The maximum time, in milliseconds, to wait for any data to be received.</param>
            <param name="timeToWaitForMoreData">The maximum time, in milliseconds, to wait in-between reads after the initial read.</param>
        </member>
        <member name="M:Zebra.Sdk.Comm.TcpConnection.#ctor(Zebra.Sdk.Comm.Internal.ZebraConnector,System.Int32,System.Int32)">
            <summary>
            Exposed this protected constructor for testing. We can pass in a mock Connector rather than the specific one
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.TcpConnection.ToString">
            <summary>
            Returns <c>TCP</c>:[Address]:[PortNumber].
            </summary>
            <remarks>The<c> address</c> and <c>port number</c> are the parameters which were passed into the constructor.</remarks>
            <see cref="M:Zebra.Sdk.Comm.Connection.ToString"/> 
        </member>
        <member name="P:Zebra.Sdk.Comm.TcpConnection.SimpleConnectionName">
            <summary>
            Gets the IP address as the description.
            </summary>
            <see cref="P:Zebra.Sdk.Comm.Connection.SimpleConnectionName"/> 
        </member>
        <member name="P:Zebra.Sdk.Comm.TcpConnection.Address">
            <inheritdoc/>
        </member>
        <member name="P:Zebra.Sdk.Comm.TcpConnection.PortNumber">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Comm.TcpConnection.SetReadTimeout(System.Int32)">
            <summary>
            Sets the read timeout on the underlying socket.
            </summary>
            <param name="readTimeout">The read timeout in milliseconds</param>
        </member>
        <member name="M:Zebra.Sdk.Comm.TcpConnection.GetConnectionReestablisher(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Comm.TcpConnection.BytesAvailable">
            <inheritdoc/>
        </member>
        <member name="T:Zebra.Sdk.Comm.TcpStatusConnection">
            <summary>
            Establishes a status only TCP connection to a device
            </summary>
            <example><code source="../SdkApi_Test/Test/Zebra/Sdk/Comm/Examples/TcpStatusConnectionExample.cs"/></example>
        </member>
        <member name="F:Zebra.Sdk.Comm.TcpStatusConnection.DEFAULT_STATUS_TCP_PORT">
            <summary>
            The default Status TCP port for ZPL devices.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.TcpStatusConnection.#ctor(Zebra.Sdk.Comm.Internal.ConnectionInfo)">
            <summary>
            </summary>
            <param name="connectionInfo"></param>
        </member>
        <member name="P:Zebra.Sdk.Comm.TcpStatusConnection.ConnectionBuilderPrefix">
            <summary>
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Comm.TcpStatusConnection.GetDefaultPort">
            <see cref="M:Zebra.Sdk.Comm.TcpConnection.GetDefaultPort"/> 
        </member>
        <member name="M:Zebra.Sdk.Comm.TcpStatusConnection.#ctor(System.String)">
            <summary>
            Initializes a new status only instance of the <c>TcpStatusConnection</c> class using the default status port of <see cref="F:Zebra.Sdk.Comm.TcpStatusConnection.DEFAULT_STATUS_TCP_PORT"/> 9200.
            </summary>
            <remarks>
            This constructor will use the default timeouts for <see cref="M:Zebra.Sdk.Comm.Connection.Read"/>. The default timeout is a maximum of 5 seconds for any data to be received.  
            If no more data is available after 500 milliseconds the read operation is assumed to be complete.<br/>
            To specify timeouts other than the defaults, use:<br/>
            <see cref="M:Zebra.Sdk.Comm.TcpStatusConnection.#ctor(System.String,System.Int32,System.Int32,System.Int32)"/> 
            </remarks>
            <param name="address">The IP Address or DNS Hostname.</param>
        </member>
        <member name="M:Zebra.Sdk.Comm.TcpStatusConnection.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new status only instance of the <c>TcpStatusConnection</c> class.
            </summary>
            <remarks>
            This constructor will use the default timeouts for <see cref="M:Zebra.Sdk.Comm.Connection.Read"/>. The default timeout is a maximum of 5 seconds for any data 
            to be received.If no more data is available after 500 milliseconds the read operation is assumed to be complete.<br/>
            To specify timeouts other than the defaults, use:<br/>
            <see cref="M:Zebra.Sdk.Comm.TcpStatusConnection.#ctor(System.String,System.Int32,System.Int32,System.Int32)"/> 
            </remarks>
            <param name="address">The IP Address or DNS Hostname.</param>
            <param name="port">The port number.</param>
        </member>
        <member name="M:Zebra.Sdk.Comm.TcpStatusConnection.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new status only instance of the <c>TcpStatusConnection</c> class.
            </summary>
            <remarks>
            This constructor will use the specified timeouts for <see cref="M:Zebra.Sdk.Comm.Connection.Read"/>. The timeout is a maximum of 
            <c>maxTimeoutForRead</c> milliseconds for any data to be received. If no more data is available after <c>timeToWaitForMoreData</c> 
            milliseconds the read operation is assumed to be complete.
            </remarks>
            <param name="address">The IP Address or DNS Hostname.</param>
            <param name="port">The port number.</param>
            <param name="maxTimeoutForRead">The maximum time, in milliseconds, to wait for any data to be received.</param>
            <param name="timeToWaitForMoreData">The maximum time, in milliseconds, to wait in-between reads after the initial read.</param>
        </member>
        <member name="M:Zebra.Sdk.Comm.TcpStatusConnection.ToString">
            <summary>
            The <c>address</c> and <c>port number</c> are the parameters which were passed into the constructor.
            </summary>
            <returns><c>TCP_STATUS</c>:[address]:[port number]</returns>
        </member>
        <member name="P:Zebra.Sdk.Comm.TcpStatusConnection.SimpleConnectionName">
            <summary>
            Returns the IP address and the status port as the description.
            </summary>
            <see cref="P:Zebra.Sdk.Comm.Connection.SimpleConnectionName"/> 
        </member>
        <member name="T:Zebra.Sdk.Device.Device">
            <summary>
            An interface used to control and obtain various properties of a device.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Device.FileUtil">
            <summary>
            This is an utility class for performing file operations on a device.
            </summary>
            <example><code source="../SdkApi_Test/Test/Zebra/Sdk/Device/Examples/FileUtilExample.cs"/></example>
        </member>
        <member name="M:Zebra.Sdk.Device.FileUtil.SendFileContents(System.String)">
            <summary>
            Sends the contents of a file to the device.
            </summary>
            <param name="filePath">The full file path (e.g. "C:\\Users\\%USERNAME%\\Documents\\sample.lbl").</param>
            <remarks>Note: If the file contains data which will trigger a response from the printer (e.g. JSON formatted settings), this method 
            will not clear the response from the buffer.  This may cause subsequent method calls to fail unpredictably.  Clear the read buffer 
            of the connection manually by calling Read() if this is applicable.</remarks>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an issue communicating with the device (e.g.&#160;the connection is not 
            open).</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.FileUtil.SendFileContents(System.String,Zebra.Sdk.Device.ProgressMonitor)">
            <summary>
            Sends the contents of a file to the device.
            </summary>
            <param name="filePath">The full file path (e.g. "C:\\Users\\%USERNAME%\\Documents\\sample.lbl").</param>
            <param name="handler">Callback to update on progress</param>
            <remarks>Note: If the file contains data which will trigger a response from the printer (e.g. JSON formatted settings), this method 
            will not clear the response from the buffer.  This may cause subsequent method calls to fail unpredictably.  Clear the read buffer 
            of the connection manually by calling Read() if this is applicable.</remarks>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an issue communicating with the device (e.g.&#160;the connection is not 
            open).</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.FileUtil.RetrieveFileNames">
            <summary>
            Retrieves the names of the files which are stored on the device.
            </summary>
            <returns>List of file names.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If there is an error parsing the directory data returned by the device.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.FileUtil.RetrieveFileNames(System.String[])">
            <summary>
            Retrieves the names of the files which are stored on the device.
            </summary>
            <remarks>This method only returns files which have one of the extensions in <c>extensions</c>.</remarks>
            <param name="extensions">The extensions to filter on.</param>
            <returns>List of file names.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If there is an error parsing the directory data returned by the device.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.FileUtil.RetrieveObjectsProperties">
            <summary>
            Retrieves the properties of the objects which are stored on the device.
            </summary>
            <returns>The list of objects with their properties.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If there is an error parsing the directory data returned by the device.</exception>
        </member>
        <member name="T:Zebra.Sdk.Device.FileUtilLinkOs">
            <summary>
            Utility class for performing file operations on a Zebra Link-OS&#8482; printer.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Device.FileUtilLinkOs.GetStorageInfo">
            <summary>
            Retrieves storage information for all of the printer's available drives.
            </summary>
            <returns>A list of objects detailing information about the printer's available drives.</returns>
            <see cref="T:Zebra.Sdk.Printer.StorageInfo"/> 
        </member>
        <member name="M:Zebra.Sdk.Device.FileUtilLinkOs.StoreFileOnPrinter(System.String)">
            <summary>
            Stores the file on the printer using any required file wrappers.
            </summary>
            <remarks>
            If the contents of <c>filePath</c> contains any commands which need to be processed by the
            printer, use <see cref="M:Zebra.Sdk.Device.FileUtil.SendFileContents(System.String)"/> instead. These commands include download commands and any
            immediate commands(~CC, ~CD, ~DB, ~DE, ~DG, ~DY, ~EG, ~HI, ~HU, ~HM, ~HQ, ~HS, ~JA, ~JB, ~JC, ~JD, ~JE, ~JF,
            ~JG, ~JI, ~JL, ~JN, ~JO, ~JP, ~JQ, ~JR, ~JS, ~JX, ~NC, ~NT, ~PL, ~PP, ~PR, ~PS, ~RO, ~SD, ~TA, ~WC, ~WQ, ^DF)
            </remarks>
            <param name="filePath">The full file path (e.g. "C:\\Users\\%USERNAME%\\Documents\\sample.zpl").</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:System.IO.IOException">If there is an issue reading the file</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If filePath cannot be used to create a printer file name.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.FileUtilLinkOs.StoreFileOnPrinter(System.String,System.String)">
            <summary>
            Stores the file on the printer at the specified location and name using any required file wrappers.
            </summary>
            <remarks>
            If the contents of <c>filePath</c> contains any commands which need to be processed by the
            printer, use <see cref="M:Zebra.Sdk.Device.FileUtil.SendFileContents(System.String)"/> instead. These commands include download commands and any
            immediate commands(~CC, ~CD, ~DB, ~DE, ~DG, ~DY, ~EG, ~HI, ~HU, ~HM, ~HQ, ~HS, ~JA, ~JB, ~JC, ~JD, ~JE, ~JF,
            ~JG, ~JI, ~JL, ~JN, ~JO, ~JP, ~JQ, ~JR, ~JS, ~JX, ~NC, ~NT, ~PL, ~PP, ~PR, ~PS, ~RO, ~SD, ~TA, ~WC, ~WQ, ^DF)
            </remarks>
            <param name="filePath">The full file path (e.g. "C:\\Users\\%USERNAME%\\Documents\\sample.zpl").</param>
            <param name="fileNameOnPrinter">The full name of the file on the printer (e.g "R:SAMPLE.ZPL").</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:System.IO.IOException">If there is an issue reading the file</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If fileNameOnPrinter is not a legal printer file name.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.FileUtilLinkOs.StoreFileOnPrinter(System.Byte[],System.String)">
            <summary>
            Stores a file on the printer named <c>fileNameOnPrinter</c> with the file contents from 
            <c>fileContents</c> using any required file wrappers.
            </summary>
            <remarks>
            If the <c>fileContents</c> contains any commands which need to be processed by the printer,
            use <see cref="M:Zebra.Sdk.Device.FileUtil.SendFileContents(System.String)"/> instead. These commands include download commands and any immediate
            commands(~CC, ~CD, ~DB, ~DE, ~DG, ~DY, ~EG, ~HI, ~HU, ~HM, ~HQ, ~HS, ~JA, ~JB, ~JC, ~JD, ~JE, ~JF, ~JG, ~JI,
            ~JL, ~JN, ~JO, ~JP, ~JQ, ~JR, ~JS, ~JX, ~NC, ~NT, ~PL, ~PP, ~PR, ~PS, ~RO, ~SD, ~TA, ~WC, ~WQ, ^DF)
            </remarks>
            <param name="fileContents">The contents of the file to store.</param>
            <param name="fileNameOnPrinter">The full name of the file on the printer (e.g "R:SAMPLE.ZPL").</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If fileNameOnPrinter is not a legal printer file name.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.FileUtilLinkOs.DeleteFile(System.String)">
            <summary>
            Deletes the file from the printer. The <c>filePath</c> may also contain wildcards.
            </summary>
            <param name="filePath">The location of the file on the printer. Wildcards are also accepted (e.g. "E:FORMAT.ZPL", "E:*.*")</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.FileUtilLinkOs.GetObjectFromPrinter(System.String)">
            <summary>
            Retrieves a file from the printer's file system and returns the contents of that file as a byte array.
            </summary>
            <remarks>
            Will retrieve the following file extensions: ZPL, GRF, DAT, BAS, FMT, PNG, LBL, PCX, BMP, WML, CSV, HTM, TXT.<br/><br/>
            Files transferred between different printer models may not be compatible.
            </remarks>
            <param name="filePath">The absolute file path on the printer ("E:SAMPLE.TXT").</param>
            <returns>The file contents</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an issue communicating with the device 
            (e.g.&#160;the connection is not open).</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the filePath is invalid, or if the file does not exist on the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.FileUtilLinkOs.GetObjectFromPrinter(System.IO.Stream,System.String)">
            <summary>
            Retrieves a file from the printer's file system and writes the contents of that file to destinationStream.
            </summary>
            <remarks>
            Will retrieve the following file extensions: ZPL, GRF, DAT, BAS, FMT, PNG, LBL, PCX, BMP, WML, CSV, HTM, TXT.<br/><br/>
            Files transferred between different printer models may not be compatible.
            </remarks>
            <param name="destinationStream">Output stream to receive the file contents</param>
            <param name="filePath">The absolute file path on the printer ("E:SAMPLE.TXT").</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an issue communicating with the device 
            (e.g.&#160;the connection is not open).</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the filePath is invalid, or if the file does not exist on the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.FileUtilLinkOs.GetObjectFromPrinterViaFtp(System.String,System.String)">
            <summary>
            Retrieves a file from the printer's file system via FTP and returns the contents of that file as a byte array.
            </summary>
            <remarks>
            Will retrieve the following file extensions: ZPL, GRF, DAT, BAS, FMT, PNG, LBL, PCX, BMP, WML, CSV, HTM, TXT. <br/><br/>
            Files transferred between different printer models may not be compatible.<br/>
            <b>NOTE:</b> This method retrieves files over a network protocol and hence will only work over a TCP connected 
            printer with FTP enabled. If <c>ftpPassword</c> is not provided, a default will be tried.
            </remarks>
            <param name="filePath">The absolute file path on the printer ("E:SAMPLE.TXT")</param>
            <param name="ftpPassword">The password used to login to FTP, if null, a default password ("1234") will be used.</param>
            <returns>The file contents.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer, or the ftpPassword is invalid</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the filePath is invalid, or if the file does not exist on the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.FileUtilLinkOs.GetObjectFromPrinterViaFtp(System.IO.Stream,System.String,System.String)">
            <summary>
            Retrieves a file from the printer's file system via FTP and writes the contents of that file to destinationStream.
            </summary>
            <remarks>
            Will retrieve the following file extensions: ZPL, GRF, DAT, BAS, FMT, PNG, LBL, PCX, BMP, WML, CSV, HTM, TXT.<br/><br/>
            Files transferred between different printer models may not be compatible.<br/>
            <b>NOTE:</b> This method retrieves files over a network protocol and hence will only work over a TCP connected 
            printer with FTP enabled. If <c>ftpPassword</c> is not provided, a default will be tried.
            </remarks>
            <param name="destinationStream">The output stream to receive the file contents</param>
            <param name="filePath">The absolute file path on the printer ("E:SAMPLE.TXT")</param>
            <param name="ftpPassword">The password used to login to FTP, if null, a default password ("1234") will be used.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer, or the ftpPassword is invalid</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the filePath is invalid, or if the file does not exist on the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.FileUtilLinkOs.GetPrinterDownloadableObjectFromPrinter(System.String)">
            <summary>
            Retrieves a file from the printer's file system and returns the contents of that file as a byte array including
            all necessary file wrappers for redownloading to a Zebra printer.
            </summary>
            <remarks>
            Will retrieve the following file extensions: ZPL, GRF, DAT, BAS, FMT, PNG, LBL, PCX, BMP, WML, CSV, HTM, TXT<br/>
            Files transferred between different printer models may not be compatible.
            </remarks>
            <param name="filePath">The absolute file path on the printer ("E:SAMPLE.TXT")</param>
            <returns>A Zebra printer downloadable file content.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an issue communicating with the device 
            (e.g.&#160;the connection is not open).</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the filePath is invalid, or if the file does not exist on the printer.</exception>
        </member>
        <member name="T:Zebra.Sdk.Device.Internal.ProfileAssembler">
            <summary>
            A class used to assemble a profile efficiently.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Device.Internal.ProfileAssembler.Begin(System.IO.Stream)">
            <summary>
            Prepares the destination stream to receive the profile data.
            </summary>
            <remarks>
            <b>This method must be called prior to calling any other method in this class.</b>
            </remarks>
            <param name="destinationStream">The stream in which to put the profile.<br/>
            <b><see cref="M:Zebra.Sdk.Device.Internal.ProfileAssembler.End"/> must be called to get a valid profile in the destinationStream.</b>
            </param>
        </member>
        <member name="M:Zebra.Sdk.Device.Internal.ProfileAssembler.AddSettings(System.IO.Stream)">
            <summary>
            Method to add settings data to a profile.
            </summary>
            <remarks>
            The profile expects settings data to be valid JSON and of the form of the allconfig response.
            </remarks>
            <param name="sourceStream">The stream containing the settings data.</param>
            <exception cref="T:System.IO.IOException">If there is an error adding settings to the profile.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Internal.ProfileAssembler.AddAlerts(System.IO.Stream)">
            <summary>
            Method to add alerts to a profile.
            </summary>
            <param name="sourceStream">The stream containing the alerts data.</param>
            <exception cref="T:System.IO.IOException">If there is an error adding alerts to the profile.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Internal.ProfileAssembler.AddSupplement(System.IO.Stream)">
            <summary>
            Adds data to supplement an existing printer profile.
            </summary>
            <remarks>
            Any supplemental data added to a profile, upon loading the profile, will be sent to the 
            printer after all other profile components have been applied.
            </remarks>
            <param name="sourceStream">The stream containing the supplement data.</param>
            <exception cref="T:System.IO.IOException">If there is an error adding the supplement to the profile.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Internal.ProfileAssembler.AddFirmware(System.String,System.IO.Stream)">
            <summary>
            Adds a firmware file to an existing printer profile.
            </summary>
            <remarks>
            Upon loading the profile, if it contains a firmware file, the firmware will be sent to the printer 
            before all other profile components.
            </remarks>
            <param name="firmwareFileName">The desired display name of the firmware file.</param>
            <param name="sourceStream">The stream containing the firmware.</param>
            <exception cref="T:System.IO.IOException">If there is an error adding firmware to the profile.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Internal.ProfileAssembler.AddFiles(System.Collections.Generic.Dictionary{System.String,System.IO.Stream})">
            <summary>
            Adds user files to the profile.
            </summary>
            <param name="files">Files to add to the profile. Each file entry should contain the desired file name 
            and the a stream of the file's content.</param>
            <exception cref="T:System.IO.IOException">If there is an error adding files to the profile.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Internal.ProfileAssembler.AddEntry(System.String,System.IO.Stream)">
            <summary>
            </summary>
            <param name="entryName"></param>
            <param name="sourceStream"></param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Internal.ProfileAssembler.End">
            <summary>
            Flushes remaining profile data to prepare the destination stream for closing.
            </summary>
            <remarks>
            <b>This method must be called when you are done assembling all the parts of your profile, 
            and should only be invoked once.</b>
            </remarks>
        </member>
        <member name="T:Zebra.Sdk.Device.Internal.ProfileComponentHandler">
            <summary>
            Handler to retrieve the parts of the profile.
            </summary>
            <see cref="T:Zebra.Sdk.Device.Internal.ProfileDisassembler"/>
        </member>
        <member name="M:Zebra.Sdk.Device.Internal.ProfileComponentHandler.SettingsHandler(System.IO.Stream)">
            <summary>
            Callback fired when settings are retrieved from a profile.
            </summary>
            <param name="sourceStream">The profile stream.</param>
            <exception cref="T:System.IO.IOException">If there is an error retrieving the settings</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Internal.ProfileComponentHandler.AlertsHandler(System.IO.Stream)">
            <summary>
            Callback fired when alerts are retrieved from a profile.
            </summary>
            <param name="sourceStream">The profile stream.</param>
            <exception cref="T:System.IO.IOException">If there is an error retrieving the alerts</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Internal.ProfileComponentHandler.FirmwareHandler(System.IO.Stream)">
            <summary>
            Callback fired when firmware is retrieved from a profile.
            </summary>
            <param name="sourceStream">The profile stream.</param>
            <exception cref="T:System.IO.IOException">If there is an error retrieving the firmware</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Internal.ProfileComponentHandler.FirmwareDisplayNameHandler(System.IO.Stream)">
            <summary>
            Callback fired when the firmware display name is retrieved from a profile.
            </summary>
            <param name="sourceStream">The profile stream.</param>
            <exception cref="T:System.IO.IOException">If there is an error retrieving the firmware display name</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Internal.ProfileComponentHandler.SupplementHandler(System.IO.Stream)">
            <summary>
            Callback fired when the supplement is retrieved from a profile.
            </summary>
            <param name="sourceStream">The profile stream.</param>
            <exception cref="T:System.IO.IOException">If there is an error retrieving the supplement</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Internal.ProfileComponentHandler.FileHandler(System.String,System.IO.Stream)">
            <summary>
            Callback fired when a file is retrieved from a profile. 
            </summary>
            <remarks>This will be called once for each user file in the profile.</remarks>
            <param name="fileName">The file name</param>
            <param name="sourceStream">The profile stream.</param>
            <exception cref="T:System.IO.IOException">If there is an error retrieving the file</exception>
        </member>
        <member name="T:Zebra.Sdk.Device.Internal.ProfileDisassembler">
            <summary>
            A class used to disassemble a profile efficiently.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Device.Internal.ProfileDisassembler.Disassemble(System.IO.Stream,Zebra.Sdk.Device.Internal.ProfileComponentHandler)">
            <summary>
            Disassembles the profile and notifies the <c>handler</c> for all the profile parts.
            </summary>
            <param name="sourceStream">The profile source stream.</param>
            <param name="handler">Callback to retrieve the parts of the profile.</param>
            <exception cref="T:System.IO.IOException">If there is an error disassembling the profile.</exception>
        </member>
        <member name="T:Zebra.Sdk.Device.MagCardReader">
            <summary>
      Provides access to the magnetic card reader, for devices equipped with one.
    </summary><example>
      Desktop
      <code source="../SdkApi_Test/Test/Zebra/Sdk/Device/Examples/MagCardReaderExample.cs" />
    </example><example>
      Androidâ„¢
      <code source="../XamarinSdk/XamarinTest/XamarinTest.Android/Test/Zebra/Sdk/Device/Examples/MagCardReaderExample.cs" />
    </example><example>
      iOS
      <code source="../XamarinSdk/XamarinTest/XamarinTest.iOS/Test/Zebra/Sdk/Device/Examples/MagCardReaderExample.cs" />
    </example>
        </member>
        <member name="M:Zebra.Sdk.Device.MagCardReader.Read(System.Int32)">
            <summary>
            Activates the device's magnetic card reader, if present, and waits for a card to be swiped.
            </summary>
            <remarks>
            If the device does not have a reader the call will timeout.
            </remarks>
            <param name="timeoutMS">The amount of time in milliseconds to enable the reader and wait for a card to be swiped.</param>
            <returns>An array of three strings corresponding to the tracks of the card. If a track could not be read that
            string will be empty.</returns>
        </member>
        <member name="T:Zebra.Sdk.Device.MagCardReaderFactory">
            <summary>
            A class used to determine if a base <see cref="T:Zebra.Sdk.Printer.ZebraPrinter"/> has MagCard reader capabilities.  
            Not all Zebra printers are available with built-in readers.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Device.MagCardReaderFactory.Create(Zebra.Sdk.Printer.ZebraPrinter)">
            <summary>
            Creates an instance of a Magcard reader, if available.
            </summary>
            <param name="printer">Base Zebra Printer that may or may not have MagCard reader capabilities.</param>
            <returns>An instance of a MagCardReader object or null if the base printer does not have MagCard reader hardware installed.</returns>
        </member>
        <member name="T:Zebra.Sdk.Device.Profile">
            <summary>
            Interface to access the contents of a .zprofile file.
            </summary>
            <example><code source="../SdkApi_Test/Test/Zebra/Sdk/Device/Examples/ProfileExample.cs"/></example>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.#ctor(System.String)">
            <summary>
            Create a <c>Profile</c> object backed by an existing .zprofile file.
            </summary>
            <param name="pathToProfile">Path to the profile file.</param>
            <exception cref="T:System.IO.FileNotFoundException">If the file <c>pathToProfile</c> does not exist.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.AddSupplement(System.Byte[])">
            <summary>
            Adds data to supplement an existing printer profile.
            </summary>
            <remarks>
            Any supplemental data added to a profile, upon loading the profile, will be sent to the printer 
            after all other profile components have been applied.
            </remarks>
            <param name="supplementData">Byte array containing the data to be used to supplement the printer profile.</param>
            <exception cref="T:System.IO.IOException">If there is an error writing to the .zprofile file.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.GetSupplement">
            <summary>
            Returns the supplement data within the profile.
            </summary>
            <returns>The supplement data within the profile.</returns>
            <exception cref="T:System.IO.IOException">If there is an error writing to the .zprofile file.</exception>
            <exception cref="T:System.IO.FileNotFoundException">If the .zprofile file cannot be found.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.GetStorageInfo">
            <summary>
            This method is not valid for a profile.
            </summary>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If this method is called.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.AddFirmware(System.String)">
            <summary>
            Adds a firmware file to an existing printer profile.
            </summary>
            <remarks>
            Upon loading the profile, if it contains a firmware file, the firmware will be sent to the printer 
            before all other profile components.
            </remarks>
            <param name="pathToFirmwareFile">Full path to the firmware file to be added to the profile.</param>
            <exception cref="T:System.IO.IOException">If there is an error reading <c>pathToFirmwareFile</c> or if there 
            is an error writing  to the.zprofile file.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.AddFirmware(System.String,System.Byte[])">
            <summary>
            Adds a firmware file to an existing printer profile.
            </summary>
            <remarks>
            Upon loading the profile, if it contains a firmware file, the firmware will be sent to the printer 
            before all other profile components.
            </remarks>
            <param name="firmwareFileName">The name of the firmware file</param>
            <param name="firmwareFileContents">The firmware file contents</param>
            <exception cref="T:System.IO.IOException">If there is an error reading <c>pathToFirmwareFile</c> or if there 
            is an error writing  to the.zprofile file.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.RemoveFirmware">
            <summary>
            Removes the firmware file from the profile.
            </summary>
            <exception cref="T:System.IO.IOException">If there is an error removing the firmware file from the .zprofile file.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.GetFirmwareFilename">
            <summary>
            Returns the file name of the firmware file within the profile.
            </summary>
            <returns>The file name of the firmware file within the profile.</returns>
            <exception cref="T:System.IO.IOException">If there is an error removing the firmware file from the .zprofile file.</exception>
            <exception cref="T:System.IO.FileNotFoundException">If the firmware file cannot be found in the .zprofile file.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.GetAllSettings">
            <inheritdoc/> 
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.GetAvailableSettings">
            <summary>
            Retrieve all of the setting identifiers for a profile.
            </summary>
            <remarks>
            These are the IDs that may be used as keys for retrieving and updating settings for a profile.
            </remarks>
            <returns>Set of identifiers available for a profile.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the settings could not be loaded.</exception>
            <see cref="M:Zebra.Sdk.Settings.SettingsProvider.GetSettingValue(System.String)"/> 
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.GetSettingValue(System.String)">
            <summary>
            Retrieves the profile's setting value for a setting id.
            </summary>
            <param name="settingId">The setting id.</param>
            <returns>The setting's value.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the settings could not be retrieved.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.GetSettingsValues(System.Collections.Generic.List{System.String})">
            <summary>
            Retrieves the profile's setting values for a list of setting ids.
            </summary>
            <param name="listOfSettings">List of setting ids.</param>
            <returns>The settings' values.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the settings could not be retrieved.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.GetAllSettingValues">
            <summary>
            Retrieves all of the profile's setting values.
            </summary>
            <returns>Values of all the settings provided by the profile.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the settings could not be loaded.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.SetSetting(System.String,System.String)">
            <summary>
            Change the value of the setting in the profile to the given value.
            </summary>
            <param name="settingId">The setting id.</param>
            <param name="value">The setting's value.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting is read only, does not exist, or if the setting could not be set.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.SetSettings(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Set more than one setting.
            </summary>
            <param name="settingValuePairs">Map a setting ID to the new value for the setting.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the settings cannot be saved in the profile.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.GetSettingRange(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.IsSettingValid(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.IsSettingReadOnly(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.IsSettingWriteOnly(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.GetSettingType(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.GetArchivableSettingValues">
            <summary>
            Retrieve the values of all the settings that are archivable.
            </summary>
            <returns>Values of all the settings with the archivable attribute that are in the profile.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the settings could not be loaded.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.GetClonableSettingValues">
            <summary>
            Retrieve the values of all the settings that are clonable.
            </summary>
            <returns>Values of all the settings with the clonable attribute that are in the profile.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the settings could not be loaded.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.GetSetting(System.String)">
            <summary>
            Retrieves the profile's <see cref="T:Zebra.Sdk.Settings.Setting"/> for a setting id.
            </summary>
            <param name="settingId">The setting id.</param>
            <returns>The <see cref="T:Zebra.Sdk.Settings.Setting"/></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting could not be retrieved.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.SetSetting(System.String,Zebra.Sdk.Settings.Setting)">
            <summary>
            Change the setting in the profile.
            </summary>
            <param name="settingId">The setting id.</param>
            <param name="setting">The setting.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting is malformed, or if the setting could not be set.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.SetAllSettings(System.Collections.Generic.Dictionary{System.String,Zebra.Sdk.Settings.Setting})">
            <summary>
            Change settings in the profile.
            </summary>
            <param name="settings">The settings to change</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If a setting is malformed, or one or more settings could not be set.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.ProcessSettingsViaMap(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Change or retrieve settings in the profile.
            </summary>
            <param name="settingValuePairs">The settings to change.</param>
            <returns><see cref="T:System.Collections.Generic.Dictionary`2"/> results of the setting commands</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting is malformed, or if the setting could not be set.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.PrintImage(System.String,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.PrintImage(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.PrintImage(Zebra.Sdk.Graphics.ZebraImageI,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.StoreImage(System.String,Zebra.Sdk.Graphics.ZebraImageI,System.Int32,System.Int32)">
            <inheritdoc cref="M:Zebra.Sdk.Printer.GraphicsUtil.StoreImage(System.String,Zebra.Sdk.Graphics.ZebraImageI,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.StoreImage(System.String,System.String,System.Int32,System.Int32)">
            <inheritdoc cref="M:Zebra.Sdk.Printer.GraphicsUtil.StoreImage(System.String,System.String,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.GetConfiguredAlerts">
            <summary>
            A list of objects detailing the alert configurations in a profile.
            </summary>
            <returns>A list of alert objects currently in a profile.</returns>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the alerts could not be extracted from the profile.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.ConfigureAlert(Zebra.Sdk.Printer.PrinterAlert)">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.ConfigureAlerts(System.Collections.Generic.List{Zebra.Sdk.Printer.PrinterAlert})">
            <inheritdoc/> 
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.RemoveAlert(Zebra.Sdk.Printer.PrinterAlert)">
            <summary>
            Removes a configured alert from a profile.
            </summary>
            <remarks>They may be reconfigured via the setAlert methods.</remarks>
            <param name="alert">The alert to be removed from the configuration.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.RemoveAllAlerts">
            <summary>
            Removes all alerts currently in a profile.
            </summary>
            <remarks>They may be reconfigured via the setAlert(s) methods.</remarks>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.DownloadTtfFont(System.String,System.String)">
            <summary>
            Adds a TrueType&#174; font file to a profile and stores it at the specified path as a TTF.
            </summary>
            <param name="sourceFilePath">Path to a TrueType&#174; font to be added to the profile.</param>
            <param name="pathOnPrinter">Location to save the font file in the profile.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.DownloadTteFont(System.String,System.String)">
            <summary>
            Adds a TrueType&#174; font file to a profile and stores it at the specified path as a TrueType&#174; extension (TTE).
            </summary>
            <param name="sourceFilePath">Path to a TrueType&#174; font to be added to the profile.</param>
            <param name="pathOnPrinter">Location to save the font file in the profile.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.DownloadTtfFont(System.IO.Stream,System.String)">
            <summary>
            Adds a TrueType&#174; font file to a profile and stores it at the specified path as a TTF.
            </summary>
            <param name="sourceInputStream">Input Stream containing the font data.</param>
            <param name="pathOnPrinter">Location to save the font file in the profile.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.DownloadTteFont(System.IO.Stream,System.String)">
            <summary>
            Adds a TrueType&#174; font to a profile and stores it at the specified path as a TrueType&#174; extension (TTE).
            </summary>
            <param name="sourceInputStream">Input Stream containing the font data.</param>
            <param name="pathOnPrinter">Location to save the font file in the profile.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.SendFileContents(System.String)">
            <summary>
            This method is not valid for a profile.
            </summary>
            <param name="filePath">Path to the file containing the data to send.</param>
            <exception cref="T:System.InvalidOperationException">If this method is called.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.SendFileContents(System.String,Zebra.Sdk.Device.ProgressMonitor)">
            <summary>
            This method is not valid for a profile.
            </summary>
            <param name="filePath">Path to the file containing the data to send.</param>
            <param name="handler">Progress monitor callback handler.</param>
            <exception cref="T:System.InvalidOperationException">If this method is called.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.SendContents(System.String,System.Byte[])">
            <summary>
            Adds a file to the profile named <c>fileNameOnPrinter</c> with the file contents from
            <c>fileContents</c>.
            </summary>
            <param name="fileNameOnPrinter">The full name of the file on the printer (e.g "R:SAMPLE.ZPL").</param>
            <param name="fileContents">The contents of the file to send.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.RetrieveFileNames">
            <summary>
            Retrieves the names of the files which are in the profile.
            </summary>
            <returns>List of file names.</returns>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.RetrieveFileNames(System.String[])">
            <summary>
            Retrieves the names of the files which are stored on the device.
            </summary>
            <remarks>
            This method only returns files which have one of the extensions in <c>extensions</c>.
            </remarks>
            <param name="extensions">The extensions to filter on.</param>
            <returns>List of file names.</returns>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.StoreFileOnPrinter(System.String)">
            <summary>
            Stores the file in the profile using any required file wrappers.
            </summary>
            <remarks>
            If the contents of <c>filePath</c> contains any commands which need to be processed by the
            printer, use <see cref="M:Zebra.Sdk.Device.FileUtil.SendFileContents(System.String)"/> instead! These commands include download commands any
            immediate commands(~CC, ~CD, ~DB, ~DE, ~DG, ~DY, ~EG, ~HI, ~HU, ~HM, ~HQ, ~HS, ~JA, ~JB, ~JC, ~JD, ~JE, ~JF,
            ~JG, ~JI, ~JL, ~JN, ~JO, ~JP, ~JQ, ~JR, ~JS, ~JX, ~NC, ~NT, ~PL, ~PP, ~PR, ~PS, ~RO, ~SD, ~TA, ~WC, ~WQ, ^DF)
            </remarks>
            <param name="filePath">The full file path (e.g. "C:\\Users\\%USERNAME%\\Documents\\sample.zpl").</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If filePath cannot be used to create a printer file name.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.StoreFileOnPrinter(System.String,System.String)">
            <summary>
            Stores the file in the profile at the specified location and name using any required file wrappers.
            </summary>
            <remarks>
            If the contents of <c>filePath</c> contains any commands which need to be processed by the
            printer, use <see cref="M:Zebra.Sdk.Device.FileUtil.SendFileContents(System.String)"/> instead! These commands include download commands any
            immediate commands(~CC, ~CD, ~DB, ~DE, ~DG, ~DY, ~EG, ~HI, ~HU, ~HM, ~HQ, ~HS, ~JA, ~JB, ~JC, ~JD, ~JE, ~JF,
            ~JG, ~JI, ~JL, ~JN, ~JO, ~JP, ~JQ, ~JR, ~JS, ~JX, ~NC, ~NT, ~PL, ~PP, ~PR, ~PS, ~RO, ~SD, ~TA, ~WC, ~WQ, ^DF)
            </remarks>
            <param name="filePath">The full file path (e.g. "C:\\Users\\%USERNAME%\\Documents\\sample.zpl").</param>
            <param name="fileNameOnPrinter">The full name of the file on the printer (e.g "R:SAMPLE.ZPL").</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.StoreFileOnPrinter(System.Byte[],System.String)">
            <summary>
            Stores a file in the profile named <c>fileNameOnPrinter</c> with the file contents from
            <c>fileContents</c> using any required file wrappers.
            </summary>
            <remarks>
            If the <c>fileContents</c> contains any commands which need to be processed by the
            printer, use <see cref="M:Zebra.Sdk.Device.FileUtil.SendFileContents(System.String)"/> instead! These commands include download commands any
            immediate commands(~CC, ~CD, ~DB, ~DE, ~DG, ~DY, ~EG, ~HI, ~HU, ~HM, ~HQ, ~HS, ~JA, ~JB, ~JC, ~JD, ~JE, ~JF,
            ~JG, ~JI, ~JL, ~JN, ~JO, ~JP, ~JQ, ~JR, ~JS, ~JX, ~NC, ~NT, ~PL, ~PP, ~PR, ~PS, ~RO, ~SD, ~TA, ~WC, ~WQ, ^DF)
            </remarks>
            <param name="fileContents">The contents of the file to store.</param>
            <param name="fileNameOnPrinter">The full name of the file on the printer (e.g "R:SAMPLE.ZPL").</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.DeleteFile(System.String)">
            <summary>
            Deletes the file from the profile. The <c>filePath</c> may also contain wildcards.
            </summary>
            <param name="filePath">The location of the file on the printer. Wildcards are also 
            accepted (e.g. "E:FORMAT.ZPL", "E:*.*")</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error accessing the profile.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.GetObjectFromPrinter(System.String)">
            <summary>
            Retrieves a file from the profile and returns the contents of that file as a byte array.
            </summary>
            <remarks>
            Will retrieve the following file extensions: ZPL, GRF, DAT, BAS, FMT, PNG, LBL, PCX, BMP, WML, CSV, HTM, BAE, TXT.<br/><br/>
            Files transferred between different printer models may not be compatible.
            </remarks>
            <param name="filePath">The absolute file path on the printer ("E:SAMPLE.TXT").</param>
            <returns>The file contents</returns>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the filePath is invalid, or if the file does not exist on the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.GetObjectFromPrinter(System.IO.Stream,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.GetObjectFromPrinterViaFtp(System.String,System.String)">
            <summary>
            This method is not valid for a profile.
            </summary>
            <param name="filePath">NA</param>
            <param name="ftpPassword">NA</param>
            <returns>NA</returns>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If this method is called.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.GetObjectFromPrinterViaFtp(System.IO.Stream,System.String,System.String)">
            <summary>
            This method is not valid for a profile.
            </summary>
            <param name="destinationStream">NA</param>
            <param name="filePath">NA</param>
            <param name="ftpPassword">NA</param>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If this method is called.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.GetPrinterDownloadableObjectFromPrinter(System.String)">
            <summary>
            Retrieves a file from the profile and returns the contents of that file as a byte array including all necessary
            file wrappers for re-downloading to a Zebra printer.
            </summary>
            <remarks>
            Will retrieve the following file extensions: ZPL, GRF, DAT, BAS, FMT, PNG, LBL, PCX, BMP, WML, CSV, HTM, BAE, TXT<br/>
            Files transferred between different printer models may not be compatible.
            </remarks>
            <param name="filePath">The absolute file path on the printer ("E:SAMPLE.TXT").</param>
            <returns>A Zebra printer downloadable file content.</returns>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the filePath is invalid, or if the file does not exist on the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.Profile.RetrieveObjectsProperties">
            <inheritdoc/>
        </member>
        <member name="T:Zebra.Sdk.Device.ProfileToMirrorServer">
            <summary>
            Class which allows you to store a zprofile to a mirror server.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Device.ProfileToMirrorServer.#ctor(System.String)">
            <summary>
            Creates an instance of a class which can be used to store a profile onto a mirror server.
            </summary>
            <param name="pathToProfile">Path to the profile to load. (e.g. /home/user/profile.zprofile).</param>
            <exception cref="T:System.IO.IOException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.ProfileToMirrorServer.SendToMirrorServer(System.String,System.String,System.String)">
            <summary>
            Stores the profile to the mirror server.
            </summary>
            <remarks>
            This method also deletes all files in appl/, commands/, and files/ directory before storing 
            the contents of the profile in the proper directories.
            </remarks>
            <param name="server">The FTP server path.</param>
            <param name="user">The FTP user name. (The user should have read/write/create/delete access.)</param>
            <param name="password">The FTP password.</param>
            <returns>A list of the errors that happened while uploading settings and files.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
            <exception cref="T:System.IO.FileNotFoundException">If the profile is not found.</exception>
            <exception cref="T:System.IO.IOException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.ProfileToMirrorServer.StoreFileViaFtp(System.String,System.Byte[],System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Device.ProfileToMirrorServer.StoreFileViaFtp(System.String,System.String,System.IO.Stream)">
            <summary>
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Device.ProfileToMirrorServer.DeleteAllFilesOnMirrorServer">
            <summary>
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Device.ProgressMonitor">
            <summary>
            Handler to monitor long-running file operations.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Device.ProgressMonitor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Device.ProgressMonitor.UpdateProgress(System.Int32,System.Int32)">
            <summary>
            Callback to notify the user as to the progress of the how many bytes have been sent.
            <see cref="M:Zebra.Sdk.Device.FileUtil.SendFileContents(System.String,Zebra.Sdk.Device.ProgressMonitor)"/> 
            </summary>
            <param name="bytesWritten">Bytes currently written</param>
            <param name="totalBytes">Total bytes to send</param>
        </member>
        <member name="T:Zebra.Sdk.Device.SmartcardReader">
            <summary>
            Provides access to the smartcard reader, for printers equipped with one.
            </summary>
            <remarks>Not all Zebra printers are available with built-in readers.</remarks>
        </member>
        <member name="M:Zebra.Sdk.Device.SmartcardReader.GetATR">
            <summary>
            Sends a CT_ATR command to the printer's smartcard reader, if present.
            </summary>
            <returns>A byte array containing the response from the smartcard reader.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.SmartcardReader.DoCommand(System.String)">
            <summary>
            Sends a CT_DATA command to the printer's smartcard reader, if present.
            </summary>
            <param name="asciiHexData">Data to be sent to the smartcard using the CT_DATA card command.</param>
            <returns>A byte array containing the response from the smartcard reader.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Device.SmartcardReader.Close">
            <summary>
            Turns the printer's smartcard reader off, if present.
            </summary>
            <remarks>This call should be made after communicating with the smartcard via the <see cref="M:Zebra.Sdk.Device.SmartcardReader.DoCommand(System.String)"/> method.</remarks>
        </member>
        <member name="T:Zebra.Sdk.Device.SmartcardReaderFactory">
            <summary>
            A class used to determine if a base ZebraPrinter has Smartcard reader capabilities.
            </summary>
            <remarks>Not all Zebra printers are available with built-in readers.</remarks>
        </member>
        <member name="M:Zebra.Sdk.Device.SmartcardReaderFactory.Create(Zebra.Sdk.Printer.ZebraPrinter)">
            <summary>
            Creates an instance of a Smartcard reader, if available.
            </summary>
            <param name="printer">Base <c>ZebraPrinter</c> that may or may not have Smartcard reader capabilities.</param>
            <returns>An instance of a SmartcardReader object or null if the base printer does not have Smartcard reader
            hardware installed.</returns>
        </member>
        <member name="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">
            <summary>
            Signals that an illegal argument was used.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Device.ZebraIllegalArgumentException.#ctor(System.String)">
            <summary>
            Constructs a <c>ZebraIllegalArgumentException</c> with <c>message</c> as the detailed error message
            </summary>
            <param name="message">the error message</param>
        </member>
        <member name="M:Zebra.Sdk.Device.ZebraIllegalArgumentException.#ctor(System.String,System.String)">
            <summary>
            Constructs a <c>ZebraIllegalArgumentException</c> with <c>message</c> as the detailed error message
            </summary>
            <param name="message">the error message</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
        </member>
        <member name="M:Zebra.Sdk.Device.ZebraIllegalArgumentException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a <c>ZebraIllegalArgumentException</c> with the <c>message</c> as the detailed error message and 
            <c>cause</c> as the source of the exception.
            </summary>
            <param name="message">The error message.</param>
            <param name="cause">The cause of the exception.</param>
        </member>
        <member name="M:Zebra.Sdk.Device.ZebraIllegalArgumentException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructs a <c>ZebraIllegalArgumentException</c> with the <c>message</c> as the detailed error message and 
            <c>cause</c> as the source of the exception.
            </summary>
            <param name="message">The error message.</param>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="cause">The cause of the exception.</param>
        </member>
        <member name="T:Zebra.Sdk.Graphics.Internal.CompressedBitmapOutputStreamCpcl">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Graphics.Internal.ZebraImageInternal">
            <summary>
            Contains methods used to query attributes of an image formatted for a Zebra printer.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Graphics.Internal.ZebraImageInternal.GetRow(System.Int32)">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
            <param name="row"></param>
            <returns>A row of image data.</returns>
        </member>
        <member name="M:Zebra.Sdk.Graphics.Internal.ZebraImageInternal.ScaleImage(System.Int32,System.Int32)">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <returns>True if the image was scaled.</returns>
        </member>
        <member name="M:Zebra.Sdk.Graphics.Internal.ZebraImageInternal.GetDitheredB64EncodedPng">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
            <returns></returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Graphics.Internal.ZebraImageInternal.WriteDitheredPng(System.IO.Stream)">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
            <param name="destinationStream"></param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:Zebra.Sdk.Graphics.ZebraImageI">
            <summary>
            Contains methods used to query attributes of an image formatted for a Zebra printer.
            </summary>
            see ZebraImageFactory" for how to create an image.
        </member>
        <member name="P:Zebra.Sdk.Graphics.ZebraImageI.Height">
            <summary>
            Gets the image's height in pixels.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Graphics.ZebraImageI.Width">
            <summary>
            Gets the image's width in pixels.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Printer.AlertProvider">
            <summary>
            This is an utility class for getting/setting alerts on a printer.
            </summary>
            <example><code source="../SdkApi_Test/Test/Zebra/Sdk/Printer/Examples/AlertProviderExample.cs"/></example>
        </member>
        <member name="M:Zebra.Sdk.Printer.AlertProvider.GetConfiguredAlerts">
            <summary>
            A list of objects detailing the alert configuration of a printer.
            </summary>
            <returns>A list of alert objects currently configured on the printer.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.AlertProvider.ConfigureAlert(Zebra.Sdk.Printer.PrinterAlert)">
            <summary>
            Configures an alert to be triggered when the alert's condition occurs or becomes resolved.
            </summary>
            <param name="alert">The alert to trigger when it's condition occurs or becomes resolved.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.AlertProvider.ConfigureAlerts(System.Collections.Generic.List{Zebra.Sdk.Printer.PrinterAlert})">
            <summary>
            Configures a list of alerts to be triggered when their conditions occur or become resolved.
            </summary>
            <param name="alerts">The list of alerts to trigger when their conditions occur or become resolved.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.AlertProvider.RemoveAlert(Zebra.Sdk.Printer.PrinterAlert)">
            <summary>
            Removes a configured alert from a printer. They may be reconfigured via the configureAlert(s) methods.
            </summary>
            <param name="alert">Alert to be removed from the configuration</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.AlertProvider.RemoveAllAlerts">
            <summary>
            Removes all alerts currently configured on a printer. They may be reconfigured via the configureAlert(s) methods.
            </summary>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="T:Zebra.Sdk.Printer.CsvPrinter">
            <summary>
      A class used to print template formats using comma separated values as input data.
    </summary><remarks>
      Androidâ„¢ USB connection not supported.
    </remarks><example>
      Desktop
      <code source="../SdkApi_Test/Test/Zebra/Sdk/Printer/Examples/CsvPrinterExample.cs" />
    </example><example>
      Androidâ„¢
      <code source="../XamarinSdk/XamarinTest/XamarinTest.Android/Test/Zebra/Sdk/Printer/Examples/CsvPrinterExample.cs" />
    </example><example>
      iOS
      <code source="../XamarinSdk/XamarinTest/XamarinTest.iOS/Test/Zebra/Sdk/Printer/Examples/CsvPrinterExample.cs" />
    </example>
        </member>
        <member name="M:Zebra.Sdk.Printer.CsvPrinter.Print(System.IO.Stream,System.String,System.String,System.IO.Stream)">
            <summary>
            Print template formats using comma separated values as input data.
            </summary>
            <param name="sourceDataStream">The source stream containing the CSV data.</param>
            <param name="templateFilename">The template to merge the CSV data to.</param>
            <param name="defaultQuantityString">The quantity, if not specified in the data.</param>
            <param name="outputDataStream">Optional stream to send data to.</param>
            <exception cref="T:System.IO.IOException">If an I/O error occurs.</exception>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If it was not possible to connect to the device.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.CsvPrinter.Print(System.String,System.IO.Stream,System.String,System.String,System.IO.Stream)">
            <summary>
            Print template formats using comma separated values as input data.
            </summary>
            <param name="destinationDevice">The connection string.</param>
            <param name="sourceDataStream">The source stream containing the CSV data.</param>
            <param name="templateFilename">The template to merge the CSV data to.</param>
            <param name="defaultQuantityString">The quantity, if not specified in the data.</param>
            <param name="outputDataStream">Optional stream to send data to.</param>
            <exception cref="T:System.IO.IOException">If an I/O error occurs.</exception>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If it was not possible to connect to the device.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.CsvPrinter.Print(System.IO.Stream,System.String,System.String,System.IO.Stream,System.Boolean)">
            <summary>
            Print template formats using comma separated values as input data.
            </summary>
            <param name="sourceDataStream">The source stream containing the CSV data.</param>
            <param name="templateFilename">The template to merge the CSV data to.</param>
            <param name="defaultQuantityString">The quantity, if not specified in the data.</param>
            <param name="outputDataStream">Optional stream to send data to.</param>
            <param name="verbose">If true, print a running commentary to standard out.</param>
            <exception cref="T:System.IO.IOException">If an I/O error occurs.</exception>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If it was not possible to connect to the device.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.CsvPrinter.Print(System.String,System.IO.Stream,System.String,System.String,System.IO.Stream,System.Boolean)">
            <summary>
            Print template formats using comma separated values as input data.
            </summary>
            <param name="destinationDevice">The connection string.</param>
            <param name="sourceDataStream">The source stream containing the CSV data.</param>
            <param name="templateFilename">The template to merge the CSV data to.</param>
            <param name="defaultQuantityString">The quantity, if not specified in the data.</param>
            <param name="outputDataStream">Optional stream to send data to.</param>
            <param name="verbose">If true, print a running commentary to standard out.</param>
            <exception cref="T:System.IO.IOException">If an I/O error occurs.</exception>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If it was not possible to connect to the device.</exception>
            <exception cref="T:System.ArgumentException">If there is an issue with the arguments.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.CsvPrinter.DoOutput(Zebra.Sdk.Comm.Connection,System.String,System.String,System.IO.Stream,Zebra.Sdk.Printer.Internal.TemplateInfo,System.Collections.Generic.Dictionary{System.Int32,System.String})">
            <summary>
            </summary>
            <param name="connection"></param>
            <param name="templateFilename"></param>
            <param name="defaultQuantityString"></param>
            <param name="outputDataStream"></param>
            <param name="templateInfo"></param>
            <param name="mapInPrintableForm"></param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.CsvPrinter.OpenConnection(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Zebra.Sdk.Printer.Discovery.DiscoveredPrinter">
            <summary>
            Container holding information about a discovered printer.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.DiscoveredPrinter.GetConnection">
            <summary>
            Creates a connection based on the information in the DiscoveredPrinter response.
            </summary>
            <returns>a <c>Connection</c> to the discovered printer</returns>
        </member>
        <member name="F:Zebra.Sdk.Printer.Discovery.DiscoveredPrinter.address">
            <summary>
            MAC address, IP Address, or local name of printer.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.Discovery.DiscoveredPrinter.discoSettings">
            <summary>
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.DiscoveredPrinter.#ctor(System.String)">
            <summary>
            Creates an object holding information about a discovered printer.
            </summary>
            <param name="address">MAC address, IP Address, or local name of printer.</param>
        </member>
        <member name="P:Zebra.Sdk.Printer.Discovery.DiscoveredPrinter.Address">
            <summary>
            MAC address, IP Address, or local name of printer.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.DiscoveredPrinter.ToString">
            <summary>
            For TCP, this returns the IP Address. For driver, this returns the local printer name.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Printer.Discovery.DiscoveredPrinter.DiscoveryDataMap">
            <summary>
            Returna a <c>Dictionary</c> of all settings obtained via the chosen discovery method.
            </summary>
            <remarks>
            The names of the settings will vary depending upon the type of connection to the printer. The following example 
            shows how to list all the properties of the discovered printer with the respective value.
            </remarks>
            <code>
            foreach (string settingsKey in printer.DiscoveryDataMap.Keys) {
                System.Diagnostics.Debug.WriteLine("Key: " + settingsKey + " Value: " + printer.DiscoveryDataMap[settingsKey]);
            }
            </code>
            <returns><see cref="T:System.Collections.Generic.Dictionary`2"/> containing available attributes of the discovered printer.</returns>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.DiscoveredPrinter.Equals(System.Object)">
            <summary>
            Returns true if two discovered printer objects have the same address, otherwise it returns false.
            </summary>
            <param name="o">DiscoveredPrinter object to compare against.</param>
            <returns>true if equal</returns>
            <see cref="M:System.Object.Equals(System.Object)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.DiscoveredPrinter.GetHashCode">
            <summary>
            Returns a hash code for this DiscoveredPrinter.
            </summary>
            <returns>The hash code</returns>
            <see cref="M:System.Object.GetHashCode"/> 
        </member>
        <member name="T:Zebra.Sdk.Printer.Discovery.DiscoveredPrinterFilter">
            <summary>
            DiscoveredPrinterFilter is an interface to allow the user to write custom code to determine 
            whether or not a DiscoveredPrinter should be included in the discovery result.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.DiscoveredPrinterFilter.ShouldAddPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)">
            <summary>
            Method called by a discovery operation to determine whether or not the <see cref="T:Zebra.Sdk.Printer.Discovery.DiscoveredPrinter"/> should be added to 
            the list of discovered devices.
            </summary>
            <param name="discoveredPrinter">DiscoveredPrinter to potentially be added to the list of of discovered devices.</param>
            <returns>A bool indicating whether or not the device should be added.</returns>
        </member>
        <member name="T:Zebra.Sdk.Printer.Discovery.DiscoveredPrinterNetwork">
            <summary>
            Instance of <see cref="T:Zebra.Sdk.Printer.Discovery.DiscoveredPrinter"/> that is returned when performing a network discovery.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.DiscoveredPrinterNetwork.#ctor(System.String,System.Int32)">
            <summary>
            Returns an instance of a <c>DiscoveredPrinterNetwork</c> with <c>address</c> and <c>port</c>.
            </summary>
            <param name="address">The address of the discovered network printer</param>
            <param name="port">The active raw port of the discovered network printer</param>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.DiscoveredPrinterNetwork.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Returns an instance of a <c>DiscoveredPrinterNetwork</c> built using the provided attributes.
            </summary>
            <param name="attributes">A map of attributes associated with the discovered network printer</param>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.DiscoveredPrinterNetwork.GetConnection">
            <inheritdoc/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.DiscoveredPrinterNetwork.Equals(System.Object)">
            <inheritdoc cref="M:Zebra.Sdk.Printer.Discovery.DiscoveredPrinter.Equals(System.Object)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.DiscoveredPrinterNetwork.GetHashCode">
            <summary>
            Returns a hash code for this DiscoveredPrinter.
            </summary>
            <see cref="M:System.Object.GetHashCode"/> 
        </member>
        <member name="T:Zebra.Sdk.Printer.Discovery.DiscoveryException">
            <summary>
            Signals that there was an error during discovery.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.DiscoveryException.#ctor(System.String)">
            <summary>
            Constructs a <c>DiscoveryException</c> with <c>message</c> as the detailed error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="T:Zebra.Sdk.Printer.Discovery.DiscoveryHandler">
            <summary>
            Interface definition for a callback to be invoked for printer discovery events
            </summary>
            <see cref="T:Zebra.Sdk.Printer.Discovery.NetworkDiscoverer"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)">
            <summary>
            This method is invoked when a printer has been discovered. This method will be invoked for each printer that is found.
            </summary>
            <param name="printer">a discovered printer.</param>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished">
            <summary>
            This method is invoked when discovery is finished.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)">
            <summary>
            This method is invoked when there is an error during discovery. The discovery will be cancelled when this method 
            is invoked. <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will not be called if this method is invoked.
            </summary>
            <param name="message">the error message.</param>
        </member>
        <member name="T:Zebra.Sdk.Printer.Discovery.DiscoveryHandlerLinkOsOnly">
            <summary>
            Class definition for a callback to be invoked for Link-OS&#8482; printer discovery events.
            </summary>
            <example><code source="../SdkApi_Test/Test/Zebra/Sdk/Discovery/Examples/DiscoveryHandlerLinkOsOnlyExample.cs"/></example>
            <see cref="T:Zebra.Sdk.Printer.Discovery.NetworkDiscoverer"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandlerLinkOsOnly.#ctor(Zebra.Sdk.Printer.Discovery.DiscoveryHandler)">
            <summary>
            Creates a DiscoveryHandler which will only report back Link-OS&#8482; printers.
            </summary>
            <param name="internalDiscoveryHandler">Base discovery handler for callbacks.</param>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandlerLinkOsOnly.DiscoveryError(System.String)">
            <summary>
            This method is invoked when there is an error during discovery. The discovery will be cancelled when this method 
            is invoked. <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandlerLinkOsOnly.DiscoveryFinished"/> will not be called if this method is invoked.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandlerLinkOsOnly.DiscoveryFinished">
            <summary>
            This method is invoked when discovery is finished.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandlerLinkOsOnly.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)">
            <summary>
            This method is invoked when a Link-OS&#8482; printer has been discovered. This method will be invoked for each printer 
            that is found.
            </summary>
            <param name="printer">A discovered Link-OS&#8482; printer.</param>
        </member>
        <member name="T:Zebra.Sdk.Printer.Discovery.DiscoveryPacketDecodeException">
            <summary>
            Signals that there was an error during discovery packet decoding
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.DiscoveryPacketDecodeException.#ctor(System.String)">
            <summary>
            Constructs a <c>DiscoveryPacketDecodeException</c> with <c>message</c> as the detailed error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="T:Zebra.Sdk.Printer.Discovery.DiscoveryUtil">
            <summary>
            Defines functions used when discovering information about a printer.
            </summary>
            <example><code source="../SdkApi_Test/Test/Zebra/Sdk/Discovery/Examples/DiscoveryUtilExample.cs"/></example>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.DiscoveryUtil.ParseDiscoveryPacket(System.String)">
            <summary>
            Decodes the provided MIME encoded discovery packet and returns a discovery data map
            </summary>
            <param name="discoveryPacketMimed">A Base64 encoded discovery packet</param>
            <returns>A discovery data map representative of the provided packet</returns>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryPacketDecodeException">If provided a malformed discovery packet</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.DiscoveryUtil.GetDiscoveryDataMap(Zebra.Sdk.Comm.Connection)">
            <summary>
            Reads the discovery packet from the provided connection and returns a discovery data map
            </summary>
            <param name="connection">A <see cref="T:Zebra.Sdk.Comm.Connection"/> to a printer</param>
            <returns>A discovery data map representative of the provided packet</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryPacketDecodeException">If provided a malformed discovery packet</exception>
        </member>
        <member name="T:Zebra.Sdk.Printer.Discovery.Internal.BroadcastA">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.Discovery.Internal.BroadcastA.MAX_DATAGRAM_SIZE">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.Discovery.Internal.BroadcastA.DISCOVERY_REQUEST_PACKET">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.BroadcastA.#ctor(System.Int32)">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
            <param name="waitForResponsesTimeout"></param>
        </member>
        <member name="T:Zebra.Sdk.Printer.Discovery.Internal.DirectedBroadcast">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.DirectedBroadcast.#ctor(System.String)">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
            <param name="directedIpAddress"></param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.DirectedBroadcast.#ctor(System.String,System.Int32)">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
            <param name="directedIpAddress"></param>
            <param name="waitForResponsesTimeout"></param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.DirectedBroadcast.ToString">
            <see cref="M:System.Object.ToString"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.DirectedBroadcast.GetDirectedBroadcastAddress(System.String)">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.DirectedBroadcast.SetSocketOptions(Zebra.Sdk.Printer.Discovery.Internal.ZebraDiscoSocket)">
            <see cref="M:Zebra.Sdk.Printer.Discovery.Internal.BroadcastA.SetSocketOptions(Zebra.Sdk.Printer.Discovery.Internal.ZebraDiscoSocket)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.DiscoveredPrinterNetworkFactory.GetDiscoveredPrinterNetwork(System.Byte[])">
            <summary>
            </summary>
            <param name="rawDiscoveryPacket"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryPacketDecodeException"></exception>
        </member>
        <member name="T:Zebra.Sdk.Printer.Discovery.Internal.DiscoveryPacketDecoderAdvanced">
            <summary>
            Class used to decode a Zebra discovery packet
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.DiscoveryPacketDecoderAdvanced.#ctor(System.Byte[])">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
            <param name="discoveryPacket"></param>
        </member>
        <member name="T:Zebra.Sdk.Printer.Discovery.Internal.DiscoveryPacketDecoderLegacy">
            <summary>
            Class used to decode a Zebra discovery packet
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.DiscoveryPacketDecoderLegacy.#ctor(System.Byte[])">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
            <param name="discoveryPacket"></param>
        </member>
        <member name="T:Zebra.Sdk.Printer.Discovery.Internal.FindPrinters">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.FindPrinters.#ctor">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.FindPrinters.DoDiscovery">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.FindPrinters.SetSocketOptions(Zebra.Sdk.Printer.Discovery.Internal.ZebraDiscoSocket)">
            <see cref="M:Zebra.Sdk.Printer.Discovery.Internal.BroadcastA.SetSocketOptions(Zebra.Sdk.Printer.Discovery.Internal.ZebraDiscoSocket)"/>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="T:Zebra.Sdk.Printer.Discovery.Internal.LocalBroadcast">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.LocalBroadcast.#ctor">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.LocalBroadcast.#ctor(System.Int32)">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
            <param name="waitForResponsesTimeout"></param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.LocalBroadcast.SetSocketOptions(Zebra.Sdk.Printer.Discovery.Internal.ZebraDiscoSocket)">
            <see cref="M:Zebra.Sdk.Printer.Discovery.Internal.BroadcastA.SetSocketOptions(Zebra.Sdk.Printer.Discovery.Internal.ZebraDiscoSocket)"/>
        </member>
        <member name="T:Zebra.Sdk.Printer.Discovery.Internal.MulticastBroadcast">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.MulticastBroadcast.#ctor(System.Int32)">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
            <param name="hops"></param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.MulticastBroadcast.#ctor(System.Int32,System.Int32)">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
            <param name="hops"></param>
            <param name="waitForResponsesTimeout"></param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.MulticastBroadcast.SetSocketOptions(Zebra.Sdk.Printer.Discovery.Internal.ZebraDiscoSocket)">
            <see cref="M:Zebra.Sdk.Printer.Discovery.Internal.BroadcastA.SetSocketOptions(Zebra.Sdk.Printer.Discovery.Internal.ZebraDiscoSocket)"/>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="T:Zebra.Sdk.Printer.Discovery.Internal.PrinterNameSearch">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.PrinterNameSearch.#ctor(Zebra.Sdk.Printer.Discovery.DiscoveryHandler,System.Collections.Generic.List{System.String})">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
            <param name="discoveryHandler"></param>
            <param name="printersToFind"></param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.PrinterNameSearch.#ctor(Zebra.Sdk.Printer.Discovery.DiscoveryHandler,System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
            <param name="discoveryHandler"></param>
            <param name="printersToFind"></param>
            <param name="waitForResponsesTimeout"></param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.PrinterNameSearch.SetSocketOptions(Zebra.Sdk.Printer.Discovery.Internal.ZebraDiscoSocket)">
            <see cref="M:Zebra.Sdk.Printer.Discovery.Internal.BroadcastA.SetSocketOptions(Zebra.Sdk.Printer.Discovery.Internal.ZebraDiscoSocket)"/>
        </member>
        <member name="T:Zebra.Sdk.Printer.Discovery.Internal.SubnetSearch">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.SubnetSearch.#ctor(System.String)">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
            <param name="ipSearchRange"></param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.SubnetSearch.#ctor(System.String,System.Int32)">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
            <param name="ipSearchRange"></param>
            <param name="waitForResponsesTimeout"></param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.SubnetSearch.SetSocketOptions(Zebra.Sdk.Printer.Discovery.Internal.ZebraDiscoSocket)">
            <see cref="M:Zebra.Sdk.Printer.Discovery.Internal.BroadcastA.SetSocketOptions(Zebra.Sdk.Printer.Discovery.Internal.ZebraDiscoSocket)"/>
        </member>
        <member name="T:Zebra.Sdk.Printer.Discovery.Internal.ZebraDiscoSocket">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.ZebraDiscoSocket.Close">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.ZebraDiscoSocket.JoinGroup(System.String)">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.ZebraDiscoSocket.Receive(System.Byte[]@)">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.ZebraDiscoSocket.Send(System.Byte[],System.Net.IPEndPoint)">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.ZebraDiscoSocket.SetSoTimeout(System.Int32)">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.ZebraDiscoSocket.SetInterface(System.Net.IPAddress)">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.ZebraDiscoSocket.SetTimeToLive(System.Int32)">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Printer.Discovery.Internal.ZebraDiscoSocketImpl">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.Internal.ZebraDiscoSocketImpl.#ctor">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="T:Zebra.Sdk.Printer.Discovery.NetworkDiscoverer">
            <summary>
      A class used to discover printers on an IP Network.
    </summary><example>
      Desktop
      <code source="../SdkApi_Test/Test/Zebra/Sdk/Discovery/Examples/NetworkDiscovererExample.cs" />
    </example><example>
      Androidâ„¢
      <code source="../XamarinSdk/XamarinTest/XamarinTest.Android/Test/Zebra/Sdk/Discovery/Examples/NetworkDiscovererExample.cs" />
    </example><example>
      iOS
      <code source="../XamarinSdk/XamarinTest/XamarinTest.iOS/Test/Zebra/Sdk/Discovery/Examples/NetworkDiscovererExample.cs" />
    </example>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.NetworkDiscoverer.SubnetSearch(Zebra.Sdk.Printer.Discovery.DiscoveryHandler,System.String)">
            <summary>
            Sends a discovery packet to the IPs specified in the <c>subnetRange</c>.
            </summary>
            <remarks>
            Subnet searches are defined by the first three subnet octets, followed by a range, such as 192.168.2. This method accepts IP addresses of the form, 
            assuming a subnet of 192.168.2:
            <list type="bullet">
            <item><description>192.168.2.254 (will send a discovery packet to 192.168.2.254)</description></item>
            <item><description>192.168.2.* (will send a discovery packet for the range 192.168.2.1 - 192.168.2.254)</description></item>
            <item><description>192.168.2.8-* (will send a discovery packet for the range 192.168.2.8 - 192.168.2.254)</description></item>
            <item><description>192.168.2.37-42 (will send a discovery packet for the range 192.168.2.37 - 192.168.2.42)</description></item>
            </list>
            This method will invoke the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method for each printer that is found during discovery. 
            <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will be invoked when the discovery is finished and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> 
            will be invoked when any errors are encountered during discovery. When <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> is invoked, the discovery 
            will be canceled and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will not be invoked.<br/><br/>
            If a printer responds to the discovery request more than once, the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method will only be invoked 
            on the first occurrence.
            </remarks>
            <param name="discoveryHandler">A <see cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryHandler"/> instance that is used to handle discovery events (e.g. found a printer, errors, discovery finished).</param>
            <param name="subnetRange">The subnet search range.</param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException">If an error occurs while starting the discovery (errors during discovery will be sent via <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/>.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.NetworkDiscoverer.SubnetSearch(Zebra.Sdk.Printer.Discovery.DiscoveryHandler,System.String,System.Int32)">
            <summary>
            Sends a discovery packet to the IPs specified in the <c>subnetRange</c>.
            </summary>
            <remarks>
            This method will wait up to <c>waitForResponsesTimeout</c> milliseconds determining that there are no more discovery responses. 
            Subnet searches are defined by the first three subnet octets, followed by a range, such as 192.168.2. This method accepts IP 
            addresses of the form, assuming a subnet of 192.168.2:
            <list type="bullet">
            <item><description>192.168.2.254 (will send a discovery packet to 192.168.2.254)</description></item>
            <item><description>192.168.2.* (will send a discovery packet for the range 192.168.2.1 - 192.168.2.254)</description></item>
            <item><description>192.168.2.8-* (will send a discovery packet for the range 192.168.2.8 - 192.168.2.254)</description></item>
            <item><description>192.168.2.37-42 (will send a discovery packet for the range 192.168.2.37 - 192.168.2.42)</description></item>
            </list>
            This method will invoke the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method for each printer that is found during discovery. 
            <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will be invoked when the discovery is finished and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> 
            will be invoked when any errors are encountered during discovery. When <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> is invoked, the discovery 
            will be canceled and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will not be invoked.<br/><br/>
            If a printer responds to the discovery request more than once, the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method will only be invoked 
            on the first occurrence.
            </remarks>
            <param name="discoveryHandler">A <see cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryHandler"/> instance that is used to handle discovery events (e.g. found a printer, errors, discovery finished).</param>
            <param name="subnetRange">The subnet search range.</param>
            <param name="waitForResponsesTimeout">Time to wait, in milliseconds, before determining that there are no more discovery responses.</param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException">If an error occurs while starting the discovery (errors during discovery will be sent via <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/>.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.NetworkDiscoverer.DirectedBroadcast(Zebra.Sdk.Printer.Discovery.DiscoveryHandler,System.String)">
            <summary>
            Sends a directed broadcast discovery packet to the subnet specified by <c>ipAddress</c>.
            </summary>
            <remarks>
            Directed broadcasts are defined by the first three subnet octets, followed by 255, such as 192.168.2.255. This method 
            accepts IP addresses of the form, assuming a subnet of 192.168.2:
            <list type="bullet">
            <item><description>192.168.2.255</description></item>
            <item><description>192.168.2.1 (last octet will be replaced with 255)</description></item>
            <item><description>192.168.2 (will append 255 for the last octet)</description></item>
            <item><description>192.168.2. (will append 255 for the last octet)</description></item>
            </list>
            This method will invoke the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method for each printer that is found during discovery. 
            <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will be invoked when the discovery is finished and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> 
            will be invoked when any errors are encountered during discovery. When <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> is invoked, the discovery 
            will be canceled and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will not be invoked.<br/><br/>
            If a printer responds to the discovery request more than once, the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method will only be invoked 
            on the first occurrence.
            </remarks>
            <param name="discoveryHandler">A <see cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryHandler"/> instance that is used to handle discovery events (e.g. found a printer, errors, discovery finished).</param>
            <param name="ipAddress">The IP address of the subnet.</param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException">If an error occurs while starting the discovery (errors during discovery will be sent via <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/>.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.NetworkDiscoverer.DirectedBroadcast(Zebra.Sdk.Printer.Discovery.DiscoveryHandler,System.String,System.Int32)">
            <summary>
            Sends a directed broadcast discovery packet to the subnet specified by <c>ipAddress</c>.
            </summary>
            <remarks>
            This method will wait up to <c>waitForResponsesTimeout</c> milliseconds determining that there are no more discovery responses. 
            Directed broadcasts are defined by the first three subnet octets, followed by 255, such as 192.168.2.255. This method accepts 
            IP addresses of the form, assuming a subnet of 192.168.2:
            <list type="bullet">
            <item><description>192.168.2.255</description></item>
            <item><description>192.168.2.1 (last octet will be replaced with 255)</description></item>
            <item><description>192.168.2 (will append 255 for the last octet)</description></item>
            <item><description>192.168.2. (will append 255 for the last octet)</description></item>
            </list>
            This method will invoke the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method for each printer that is found during discovery. 
            <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will be invoked when the discovery is finished and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> 
            will be invoked when any errors are encountered during discovery. When <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> is invoked, the discovery 
            will be canceled and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will not be invoked.<br/><br/>
            If a printer responds to the discovery request more than once, the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method will only be invoked 
            on the first occurrence.
            </remarks>
            <param name="discoveryHandler">A <see cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryHandler"/> instance that is used to handle discovery events (e.g. found a printer, errors, discovery finished).</param>
            <param name="ipAddress">The IP address of the subnet.</param>
            <param name="waitForResponsesTimeout">Time to wait, in milliseconds, before determining that there are no more discovery responses.</param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException">If an error occurs while starting the discovery (errors during discovery will be sent via <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/>.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.NetworkDiscoverer.LocalBroadcast(Zebra.Sdk.Printer.Discovery.DiscoveryHandler)">
            <summary>
            Sends a local broadcast packet.
            </summary>
            <remarks>
            This method will invoke the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method for each printer that is found during discovery. 
            <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will be invoked when the discovery is finished and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> 
            will be invoked when any errors are encountered during discovery. When <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> is invoked, the discovery 
            will be canceled and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will not be invoked.<br/><br/>
            If a printer responds to the discovery request more than once, the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method will only be invoked 
            on the first occurrence.
            </remarks>
            <param name="discoveryHandler">A <see cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryHandler"/> instance that is used to handle discovery events (e.g. found a printer, errors, discovery finished).</param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException">If an error occurs while starting the discovery (errors during discovery will be sent via <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/>.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.NetworkDiscoverer.LocalBroadcast(Zebra.Sdk.Printer.Discovery.DiscoveryHandler,System.Int32)">
            <summary>
            Sends a local broadcast packet.
            </summary>
            <remarks>
            This method will wait up to <c>waitForResponsesTimeout</c> milliseconds determining that there are no more discovery responses.<br/><br/>
            This method will invoke the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method for each printer that is found during discovery. 
            <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will be invoked when the discovery is finished and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> 
            will be invoked when any errors are encountered during discovery. When <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> is invoked, the discovery 
            will be canceled and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will not be invoked.<br/><br/>
            If a printer responds to the discovery request more than once, the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method will only be invoked 
            on the first occurrence.
            </remarks>
            <param name="discoveryHandler">A <see cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryHandler"/> instance that is used to handle discovery events (e.g. found a printer, errors, discovery finished).</param>
            <param name="waitForResponsesTimeout">Time to wait, in milliseconds, before determining that there are no more discovery responses.</param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException">If an error occurs while starting the discovery (errors during discovery will be sent via <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/>.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.NetworkDiscoverer.Multicast(Zebra.Sdk.Printer.Discovery.DiscoveryHandler,System.Int32)">
            <summary>
            Sends a multicast discovery packet.
            </summary>
            <remarks>
            This method will invoke the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method for each printer that is found during discovery. 
            <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will be invoked when the discovery is finished and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> 
            will be invoked when any errors are encountered during discovery. When <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> is invoked, the discovery 
            will be canceled and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will not be invoked.<br/><br/>
            If a printer responds to the discovery request more than once, the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method will only be invoked 
            on the first occurrence.<br/><br/>
            For Android users : some extra code is required to obtain a multicast lock. See the example in <see cref="M:Zebra.Sdk.Printer.Discovery.NetworkDiscoverer.Multicast(Zebra.Sdk.Printer.Discovery.DiscoveryHandler,System.Int32,System.Int32)"/> 
            </remarks>
            <param name="discoveryHandler">A <see cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryHandler"/> instance that is used to handle discovery events (e.g. found a printer, errors, discovery finished).</param>
            <param name="hops">The number of hops.</param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException">If an error occurs while starting the discovery (errors during discovery will be sent via <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/>.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.NetworkDiscoverer.Multicast(Zebra.Sdk.Printer.Discovery.DiscoveryHandler,System.Int32,System.Int32)">
            <summary>
            Sends a multicast discovery packet.
            </summary>
            <remarks>
            This method will wait up to <c>waitForResponsesTimeout</c> milliseconds determining that there are no more discovery responses.<br/><br/>
            This method will invoke the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method for each printer that is found during discovery. 
            <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will be invoked when the discovery is finished and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> 
            will be invoked when any errors are encountered during discovery. When <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> is invoked, the discovery 
            will be canceled and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will not be invoked.<br/><br/>
            If a printer responds to the discovery request more than once, the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method will only be invoked 
            on the first occurrence.<br/><br/>
            For Android users : some extra code is required to obtain a multicast lock. See the example in <see cref="M:Zebra.Sdk.Printer.Discovery.NetworkDiscoverer.Multicast(Zebra.Sdk.Printer.Discovery.DiscoveryHandler,System.Int32,System.Int32)"/> 
            </remarks>
            <param name="discoveryHandler">A <see cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryHandler"/> instance that is used to handle discovery events (e.g. found a printer, errors, discovery finished).</param>
            <param name="hops">The number of hops.</param>
            <param name="waitForResponsesTimeout">Time to wait, in milliseconds, before determining that there are no more discovery responses.</param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException">If an error occurs while starting the discovery (errors during discovery will be sent via <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/>.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.NetworkDiscoverer.FindPrinters(Zebra.Sdk.Printer.Discovery.DiscoveryHandler)">
            <summary>
            This method will search the network using a combination of discovery methods to find printers on the network.
            </summary>
            <remarks>
            This is a convenience method that can be used as an alternative to the other discovery methods (e.g. multicast).<br/><br/>
            This method will invoke the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method for each printer that is found during discovery. 
            <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will be invoked when the discovery is finished and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> 
            will be invoked when any errors are encountered during discovery. When <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> is invoked, the discovery 
            will be canceled and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will not be invoked.<br/><br/>
            If a printer responds to the discovery request more than once, the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method will only be invoked 
            on the first occurrence.<br/><br/>
            </remarks>
            <param name="discoveryHandler">A <see cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryHandler"/> instance that is used to handle discovery events (e.g. found a printer, errors, discovery finished).</param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException">If an error occurs while starting the discovery (errors during discovery will be sent via <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/>.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.NetworkDiscoverer.FindPrinters(Zebra.Sdk.Printer.Discovery.DiscoveryHandler,System.Collections.Generic.List{System.String})">
            <summary>
            Sends a discovery request to the list of printer DNS names or IPs in <c>printersToFind</c>.
            </summary>
            <remarks>
            This method will invoke the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method for each printer that is found during discovery. 
            <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will be invoked when the discovery is finished and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> 
            will be invoked when any errors are encountered during discovery. When <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> is invoked, the discovery 
            will be canceled and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will not be invoked.<br/><br/>
            If a printer responds to the discovery request more than once, the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method will only be invoked 
            on the first occurrence.<br/><br/>
            </remarks>
            <param name="discoveryHandler">A <see cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryHandler"/> instance that is used to handle discovery events (e.g. found a printer, errors, discovery finished).</param>
            <param name="printersToFind">A list of IP addresses or DNS names for the printers to be discovered.</param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException">If an error occurs while starting the discovery (errors during discovery will be sent via <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/>.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Discovery.NetworkDiscoverer.FindPrinters(Zebra.Sdk.Printer.Discovery.DiscoveryHandler,System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Sends a discovery request to the list of printer DNS names or IPs in <c>printersToFind</c>.
            </summary>
            <remarks>
            This method will wait up to <c>waitForResponsesTimeout</c> milliseconds determining that there are no more discovery responses.<br/><br/>
            This method will invoke the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method for each printer that is found during discovery. 
            <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will be invoked when the discovery is finished and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> 
            will be invoked when any errors are encountered during discovery. When <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> is invoked, the discovery 
            will be canceled and <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> will not be invoked.<br/><br/>
            If a printer responds to the discovery request more than once, the <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> method will only be invoked 
            on the first occurrence.<br/><br/>
            </remarks>
            <param name="discoveryHandler">A <see cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryHandler"/> instance that is used to handle discovery events (e.g. found a printer, errors, discovery finished).</param>
            <param name="printersToFind">A list of IP addresses or DNS names for the printers to be discovered.</param>
            <param name="waitForResponsesTimeout">Time to wait, in milliseconds, before determining that there are no more discovery responses.</param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException">If an error occurs while starting the discovery (errors during discovery will be sent via <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/>.</exception>
        </member>
        <member name="T:Zebra.Sdk.Printer.DriveType">
            <summary>
            Drive types.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.DriveType.FLASH">
            <summary>
            Onboard flash drive.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.DriveType.RAM">
            <summary>
            RAM Drive.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.DriveType.MASS_STORAGE">
            <summary>
            Removable mass storage drive.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.DriveType.UNKNOWN">
            <summary>
            Unknown drive.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.DriveType.READ_ONLY">
            <summary>
            Read only drive.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Printer.FieldDescriptionData">
            <summary>
            This class is used to describe format variable fields.
            </summary>
            <remarks>
            For example, in CPCL, the following format will contain 2 <see cref="T:Zebra.Sdk.Printer.FieldDescriptionData"/>.
            <pre>
            ! DF SHELF.FMT
            ! 0 200 200 210 1
            CENTER
            TEXT 4 3 0 15 \\
            TEXT 4 0 0 95 \\
            FORM
            PRINT
            </pre>
            
            The first <see cref="T:Zebra.Sdk.Printer.FieldDescriptionData"/> will contain a <c>fieldNumber</c> of 1, and a <c>fieldName</c> of
            null. The second <see cref="T:Zebra.Sdk.Printer.FieldDescriptionData"/> will contain a <c>fieldNumber</c> of 2, and a <c>fieldName</c> of null.
            <br/><br/><br/>
            In ZPL, the following ^FN command will contain 2 <see cref="T:Zebra.Sdk.Printer.FieldDescriptionData"/>.
             
            <pre>
            &#94;XA
            &#94;DFR:SHELF.ZPL&#94;FS
            &#94;FO25,25&#94;A0N,50,50&#94;FN15"Name"&#94;FS
            &#94;FO25,75&#94;A0N,50,50&#94;FN15"Address"&#94;FS
            &#94;FO25,125&#94;A0N,50,50&#94;FN18&#94;FS
            &#94;FO25,175&#94;A0N,50,50&#94;FN15
            &#94;XZ
            </pre>
            
            The first <see cref="T:Zebra.Sdk.Printer.FieldDescriptionData"/> will contain a <c>fieldNumber</c> of 15, and a <c>fieldName</c> of 
            "Address". The second <see cref="T:Zebra.Sdk.Printer.FieldDescriptionData"/> will contain a <c>fieldNumber</c> of 18, and a <c>fieldName</c> of null.<br/>
            <b>Note:</b> If a label format contains multiple Field Numbers, only 1 will be returned since the data will be shared 
            by all variables with the number. The <see cref="P:Zebra.Sdk.Printer.FieldDescriptionData.FieldName"/> portion of the variable will be the 
            last one in the format, unless it is not present.For example, in the format above, there are 3 &#94;FN15's. The 
            first 2 have a "prompt" parameter, the third does not. The second one, "Address", overwrites the first one, "Name". 
            The third one is not present, so the previous one, "Address", is preserved.
            </remarks>
        </member>
        <member name="M:Zebra.Sdk.Printer.FieldDescriptionData.#ctor(System.Int32,System.String)">
            <summary>
            Create a descriptor for a field
            </summary>
            <param name="fieldNumber">The number of the field.</param>
            <param name="fieldName">The name of the field, or null if not present.</param>
        </member>
        <member name="P:Zebra.Sdk.Printer.FieldDescriptionData.FieldNumber">
            <summary>
            In CPCL, this number will be the number of the variable field in the format. The fields are numbered starting at 1.<br/>
            In ZPL, this number will correspond to the ^FN number.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Printer.FieldDescriptionData.FieldName">
            <summary>
            In CPCL, this field is always null.<br/>
            In ZPL, this field will correspond to the optional name parameter of the ^FN command, or null if the parameter is not present
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.FieldDescriptionData.CompareTo(Zebra.Sdk.Printer.FieldDescriptionData)">
            <inheritdoc cref="M:System.IComparable.CompareTo(System.Object)"/>
        </member>
        <member name="T:Zebra.Sdk.Printer.FileDeletionOption">
            <summary>
            Options for deleting files when loading profiles to a Zebra printer.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.FileDeletionOption.ALL">
            <summary>
            Attempts to delete all files from the printer. (Persistent files, hidden files, and System files will not be deleted.)
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.FileDeletionOption.CLONEABLE">
            <summary>
            Will attempt to delete only the file types which are copied at profile/backup creation time.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.FileDeletionOption.NONE">
            <summary>
            Will not attempt to delete any files.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Printer.FirmwareUpdateHandler">
            <summary>
            Handler class is used to update status while performing a firmware download and to notify the caller when the printer
            has reconnected after restarting.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.FirmwareUpdateHandler.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.FirmwareUpdateHandler.FirmwareDownloadComplete">
            <summary>
            Called when the firmware download completes.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.FirmwareUpdateHandler.PrinterOnline(Zebra.Sdk.Printer.ZebraPrinterLinkOs,System.String)">
            <summary>
            Called when the printer is back online and has been rediscovered.
            </summary>
            <param name="printer">The printer object which came back online.</param>
            <param name="firmwareVersion">The new firmware version on the printer.</param>
        </member>
        <member name="M:Zebra.Sdk.Printer.FirmwareUpdateHandler.ProgressUpdate(System.Int32,System.Int32)">
            <summary>
            Callback to notify the user of the firmware updating progress.
            </summary>
            <param name="bytesWritten">The total number of bytes written to the printer.</param>
            <param name="totalBytes">The total number of bytes to be written to the printer.</param>
        </member>
        <member name="T:Zebra.Sdk.Printer.FirmwareUpdateHandlerBase">
            <summary>
            Handler class is used to update status while performing a firmware download.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.FirmwareUpdateHandlerBase.ProgressUpdate(System.Int32,System.Int32)">
            <summary>
            Callback to notify the user of the firmware updating progress.
            </summary>
            <remarks>This is called for every 4K bytes written out.</remarks>
            <param name="bytesWritten">Total number of bytes written to the printer.</param>
            <param name="totalBytes">Total number of bytes to be written to the printer.</param>
        </member>
        <member name="M:Zebra.Sdk.Printer.FirmwareUpdateHandlerBase.FirmwareDownloadComplete">
            <summary>
            Called when the firmware download completes. The printer will then begin flashing the firmware to memory followed
            by a reboot.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Printer.FirmwareUpdaterLinkOs">
            <summary>
            This is the interface for updating firmware on a Link-OS&#8482; printer.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.FirmwareUpdaterLinkOs.UpdateFirmware(System.String,Zebra.Sdk.Printer.FirmwareUpdateHandler)">
            <summary>
            Update firmware on the printer using the default timeout of 10 minutes.
            </summary>
            <remarks>
            If the firmware currently on the printer has the same version number as the 
            firmware file, the firmware will not be sent to the printer.
            </remarks>
            <example><code source="../SdkApi_Test/Test/Zebra/Sdk/Printer/Examples/UpdatePrinterFirmwareExample.cs"/></example>
            <param name="firmwareFilePath">File path of firmware file.</param>
            <param name="handler">Callback for firmware updating status</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the connection can not be opened, is closed prematurely, or connection cannot be 
            established after firmware download is complete.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language can not be determined.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If an invalid firmware file is specified for the printer.</exception>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException">If an error occurs while waiting for the printer to come back online.</exception>
            <exception cref="T:System.TimeoutException">If the maximum timeout is reached prior to the printer coming back online with the new
            firmware.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Firmware file not found.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.FirmwareUpdaterLinkOs.UpdateFirmware(System.String,System.Int64,Zebra.Sdk.Printer.FirmwareUpdateHandler)">
            <summary>
            Update firmware on the printer using the specified <c>timeout</c>.
            </summary>
            <remarks>
            If the firmware currently on the printer has the same version number as the firmware file, the firmware will not be sent to the printer.
            </remarks>
            <param name="firmwareFilePath">File path of firmware file.</param>
            <param name="timeout">Timeout in milliseconds. The minimum allowed timeout is 10 minutes (600000ms) due to the need to 
            reset the printer after flashing the firmware. If a timeout value less than the minimum is provided, the minimum will be 
            used instead.</param>
            <param name="handler">Callback for firmware updating status.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the connection can not be opened, is closed prematurely, or connection cannot be 
            established after firmware download is complete.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language can not be determined.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If an invalid firmware file is specified for the printer.</exception>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException">If an error occurs while waiting for the printer to come back online.</exception>
            <exception cref="T:System.TimeoutException">If the maximum timeout is reached prior to the printer coming back online with the new
            firmware.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Firmware file not found.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.FirmwareUpdaterLinkOs.UpdateFirmwareUnconditionally(System.String,Zebra.Sdk.Printer.FirmwareUpdateHandler)">
            <summary>
            Update firmware on the printer, using the default timeout of 10 minutes, regardless of the firmware version
            currently on the printer.
            </summary>
            <param name="firmwareFilePath">File path of firmware file.</param>
            <param name="handler">Callback for firmware updating status.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the connection can not be opened, is closed prematurely, or connection cannot be 
            established after firmware download is complete.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language can not be determined.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If an invalid firmware file is specified for the printer.</exception>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException">If an error occurs while waiting for the printer to come back online.</exception>
            <exception cref="T:System.TimeoutException">If the maximum timeout is reached prior to the printer coming back online with the new
            firmware.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Firmware file not found.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.FirmwareUpdaterLinkOs.UpdateFirmwareUnconditionally(System.String,System.Int64,Zebra.Sdk.Printer.FirmwareUpdateHandler)">
            <summary>
            Update firmware on the printer, using the specified <c>timeout</c>, regardless of the firmware version 
            currently on the printer.
            </summary>
            <param name="firmwareFilePath">File path of firmware file.</param>
            <param name="timeout">Timeout in milliseconds. The minimum allowed timeout is 10 minutes (600000ms) due to the need to 
            reset the printer after flashing the firmware. If a timeout value less than the minimum is provided, the minimum will be 
            used instead.</param>
            <param name="handler">Callback for firmware updating status.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the connection can not be opened, is closed prematurely, or connection cannot be 
            established after firmware download is complete.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language can not be determined.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If an invalid firmware file is specified for the printer.</exception>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException">If an error occurs while waiting for the printer to come back online.</exception>
            <exception cref="T:System.TimeoutException">If the maximum timeout is reached prior to the printer coming back online with the new
            firmware.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Firmware file not found.</exception>
        </member>
        <member name="T:Zebra.Sdk.Printer.FontConverterZpl">
            <summary>
            A class used to convert TrueType&#174; fonts for use on ZPL printers.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.FontConverterZpl.GetTtfFontHeader(System.IO.Stream,System.String)">
            <summary>
            Returns a <c>Stream</c> which provides the TTF header information as determined from the source stream.
            </summary>
            <param name="sourceStream">Stream containing TrueType&#174; font data</param>
            <param name="pathOnPrinter">Location of the font file on the printer.</param>
            <returns>Header information for the provided stream</returns>
        </member>
        <member name="M:Zebra.Sdk.Printer.FontConverterZpl.GetTteFontHeader(System.IO.Stream,System.String)">
            <summary>
            Returns a <c>Stream</c> which provides the TTE header information as determined from the source stream.
            </summary>
            <param name="sourceStream">Stream containing TrueType&#174; font data</param>
            <param name="pathOnPrinter">Location of the font file on the printer.</param>
            <returns>Header information for the provided stream</returns>
        </member>
        <member name="M:Zebra.Sdk.Printer.FontConverterZpl.SaveAsTtfPrinterFont(System.String,System.IO.Stream,System.String)">
            <summary>
            Converts a native TrueType&#174; font to a ZPL TTF format.
            </summary>
            <param name="sourceFilePath">Path to a TrueType&#174; font.</param>
            <param name="destinationStream">Destination stream for converted ZPL.</param>
            <param name="pathOnPrinter">Location to save the font file on the printer.</param>
            <exception cref="T:System.Exception">If the source file is not found</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.FontConverterZpl.SaveAsTtfPrinterFont(System.IO.Stream,System.IO.Stream,System.String)">
            <summary>
            Converts a native TrueType&#174; font to a ZPL TTF format.
            </summary>
            <param name="sourceInputStream">Stream containing the TrueType&#174; font data.</param>
            <param name="destinationStream">Destination stream for converted ZPL.</param>
            <param name="pathOnPrinter">Location to save the font file on the printer.</param>
        </member>
        <member name="M:Zebra.Sdk.Printer.FontConverterZpl.SaveAsTtePrinterFont(System.String,System.IO.Stream,System.String)">
            <summary>
            Converts a native TrueType&#174; font to a ZPL TTE format.
            </summary>
            <param name="sourceFilePath">Path to a TrueType&#174; font.</param>
            <param name="destinationStream">Destination stream for converted ZPL.</param>
            <param name="pathOnPrinter">Location to save the font file on the printer.</param>
            <exception cref="T:System.Exception">If the source file is not found</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.FontConverterZpl.SaveAsTtePrinterFont(System.IO.Stream,System.IO.Stream,System.String)">
            <summary>
            Converts a native TrueType&#174; font to a ZPL TTE format.
            </summary>
            <param name="sourceInputStream">Stream containing the TrueType&#174; font data.</param>
            <param name="destinationStream">Destination stream for converted ZPL.</param>
            <param name="pathOnPrinter">Location to save the font file on the printer.</param>
        </member>
        <member name="T:Zebra.Sdk.Printer.FontUtil">
            <summary>
      Defines functions used for downloading fonts to Zebra printers.
    </summary><example>
      Desktop
      <code source="../SdkApi_Test/Test/Zebra/Sdk/Printer/Examples/FontUtilExample.cs" />
    </example><example>
      Androidâ„¢
      <code source="../XamarinSdk/XamarinTest/XamarinTest.Android/Test/Zebra/Sdk/Printer/Examples/FontUtilExample.cs" />
    </example><example>
      iOS
      <code source="../XamarinSdk/XamarinTest/XamarinTest.iOS/Test/Zebra/Sdk/Printer/Examples/FontUtilExample.cs" />
    </example>
        </member>
        <member name="M:Zebra.Sdk.Printer.FontUtil.DownloadTtfFont(System.String,System.String)">
            <summary>
            Adds a TrueType&#174; font file to a profile and stores it at the specified path as a TTF.
            </summary>
            <param name="sourceFilePath">Path to a TrueType&#174; font to be added to the profile.</param>
            <param name="pathOnPrinter">Location to save the font file in the profile.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.FontUtil.DownloadTteFont(System.String,System.String)">
            <summary>
            Adds a TrueType&#174; font file to a profile and stores it at the specified path as a TrueType&#174; extension (TTE).
            </summary>
            <param name="sourceFilePath">Path to a TrueType&#174; font to be added to the profile.</param>
            <param name="pathOnPrinter">Location to save the font file in the profile.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.FontUtil.DownloadTtfFont(System.IO.Stream,System.String)">
            <summary>
            Adds a TrueType&#174; font file to a profile and stores it at the specified path as a TTF.
            </summary>
            <param name="sourceInputStream">Input Stream containing the font data.</param>
            <param name="pathOnPrinter">Location to save the font file in the profile.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.FontUtil.DownloadTteFont(System.IO.Stream,System.String)">
            <summary>
            Adds a TrueType&#174; font to a profile and stores it at the specified path as a TrueType&#174; extension (TTE).
            </summary>
            <param name="sourceInputStream">Input Stream containing the font data.</param>
            <param name="pathOnPrinter">Location to save the font file in the profile.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="T:Zebra.Sdk.Printer.FormatUtil">
            <summary>
      Defines functions used for interacting with printer formats.
    </summary><remarks>
      Androidâ„¢ USB connection not supported.
    </remarks><example>
      Desktop
      <code source="../SdkApi_Test/Test/Zebra/Sdk/Printer/Examples/FormatUtilExample.cs" />
    </example><example>
      Androidâ„¢
      <code source="../XamarinSdk/XamarinTest/XamarinTest.Android/Test/Zebra/Sdk/Printer/Examples/FormatUtilExample.cs" />
    </example><example>
      iOS
      <code source="../XamarinSdk/XamarinTest/XamarinTest.iOS/Test/Zebra/Sdk/Printer/Examples/FormatUtilExample.cs" />
    </example>
        </member>
        <member name="M:Zebra.Sdk.Printer.FormatUtil.RetrieveFormatFromPrinter(System.String)">
            <summary>
            Retrieves a format from the printer.
            </summary>
            <remarks>
            On a LinkOS/ZPL printer, only <c>.ZPL</c> files are supported. On a CPCL printer, only <c>.FMT</c> and <c>.LBL</c> files are supported.
            </remarks>
            <param name="formatPathOnPrinter">The location of the file on the printer (e.g. "E:FORMAT.ZPL").</param>
            <returns>The contents of the format file.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an issue communicating with the printer (e.g.&#160;the connection is not open).</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.FormatUtil.RetrieveFormatFromPrinter(System.IO.Stream,System.String)">
            <summary>
            Retrieves a format from the printer.
            </summary>
            <remarks>
            On a LinkOS/ZPL printer, only <c>.ZPL</c> files are supported. On a CPCL printer, only <c>.FMT</c> and <c>.LBL</c> files are supported.
            </remarks>
            <param name="formatData">The format.</param>
            <param name="formatPathOnPrinter">The location of the file on the printer (e.g. "E:FORMAT.ZPL").</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an issue communicating with the printer (e.g.&#160;the connection is not open).</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.FormatUtil.PrintStoredFormat(System.String,System.String[])">
            <summary>
            Prints a stored format on the printer, filling in the fields specified by the array.
            </summary>
            <remarks>
            The values of any format variables will be encoded using the default <c>encoding</c> type. On a LinkOS/ZPL printer, only ZPL formats
            are supported.On a CPCL printer, only CPCL formats are supported.<br/>
            See <see cref="T:System.String"/> for more information about encoding types.
            </remarks>
            <param name="formatPathOnPrinter">The name of the format on the printer, including the extension (e.g. "E:FORMAT.ZPL").</param>
            <param name="vars">An array of strings representing the data to fill into the format. For LinkOS/ZPL printer formats,
            index 0 of the array corresponds to field number 2 (^FN2). For CPCL printer formats, the variables are passed in
            the order that they are found in the format.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.FormatUtil.PrintStoredFormat(System.String,System.String[],System.String)">
            <summary>
            Prints a stored format on the printer, filling in the fields specified by the array.
            </summary>
            <remarks>
            The values of any format variables will be encoded using the provided <c>encoding</c> type.eg.UTF-8. On a LinkOS/ZPL printer, only
            ZPL formats are supported.On a CPCL printer, only CPCL formats are supported.<br/>
            See <see cref="T:System.String"/> for more information about encoding types.
            </remarks>
            <param name="formatPathOnPrinter">The location of the file on the printer (e.g. "E:FORMAT.ZPL").</param>
            <param name="vars">An array of strings representing the data to fill into the format. For LinkOS/ZPL printer formats, 
            index 0 of the array corresponds to field number 2 (^FN2). For CPCL printer formats, the variables are passed in
            the order that they are found in the format.</param>
            <param name="encoding">A character-encoding name (eg. UTF-8).</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
            <exception cref="T:System.ArgumentException">If the encoding is not supported.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.FormatUtil.PrintStoredFormat(System.String,System.Collections.Generic.Dictionary{System.Int32,System.String})">
            <summary>
            Prints a stored format on the printer, filling in the fields specified by the Dictionary.
            </summary>
            <remarks>
            The values of any format variables will be encoded using the default <c>encoding</c> type. On a LinkOS/ZPL printer, only ZPL formats
            are supported.On a CPCL printer, only CPCL formats are supported.<br/>
            See <see cref="T:System.String"/> for more information about encoding types.
            </remarks>
            <param name="formatPathOnPrinter">The location of the file on the printer (e.g. "E:FORMAT.ZPL").</param>
            <param name="vars">A Dictionary which contains the key/value pairs for the stored format. For LinkOS/ZPL printer formats, the
            key number should correspond directly to the number of the field in the format.For CPCL printer formats, the
            values will be passed in ascending numerical order.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.FormatUtil.PrintStoredFormat(System.String,System.Collections.Generic.Dictionary{System.Int32,System.String},System.String)">
            <summary>
            Prints a stored format on the printer, filling in the fields specified by the Dictionary.
            </summary>
            <remarks>
            The values of any format variables will be encoded using the provided <c>encoding</c> type.eg.UTF-8. On a LinkOS/ZPL printer, only
            ZPL formats are supported.On a CPCL printer, only CPCL formats are supported.<br/>
            See <see cref="T:System.String"/> for more information about encoding types.
            </remarks>
            <param name="formatPathOnPrinter">The location of the file on the printer (e.g. "E:FORMAT.ZPL").</param>
            <param name="vars">A Dictionary which contains the key/value pairs for the stored format. For LinkOS/ZPL printer formats, the
            key number should correspond directly to the number of the field in the format.For CPCL printer formats, the
            values will be passed in ascending numerical order.</param>
            <param name="encoding">A character-encoding name (e.g. UTF-8).</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
            <exception cref="T:System.ArgumentException">If the encoding is not supported.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.FormatUtil.GetVariableFields(System.String)">
            <summary>
            Returns a list of descriptors of the variable fields in this format.
            </summary>
            <remarks>
            On a LinkOS/ZPL printer, only ZPL formats are supported. On a CPCL printer, only CPCL formats are supported.
            </remarks>
            <param name="formatString">The contents of the recalled format.</param>
            <returns>A list of field data descriptors. For a CPCL printer, the nth element of the list will contain the
            integer n and no name. For a LinkOS/ZPL printer, each element will contain an ^FN number and a variable name if
            present. If the format contains multiple ^FNs with the same number, only the last one will be in the result.<br/>
            See <see cref="T:Zebra.Sdk.Printer.FieldDescriptionData"/> for an example of how variable fields look.
            </returns>
        </member>
        <member name="T:Zebra.Sdk.Printer.FormatUtilLinkOs">
            <summary>
      Defines functions used for interacting with Link-OSâ„¢ printer formats.
    </summary><example>
      Desktop
      <code source="../SdkApi_Test/Test/Zebra/Sdk/Printer/Examples/FormatUtilLinkOsExample.cs" />
    </example><example>
      Androidâ„¢
      <code source="../XamarinSdk/XamarinTest/XamarinTest.Android/Test/Zebra/Sdk/Printer/Examples/FormatUtilLinkOsExample.cs" />
    </example><example>
      iOS
      <code source="../XamarinSdk/XamarinTest/XamarinTest.iOS/Test/Zebra/Sdk/Printer/Examples/FormatUtilLinkOsExample.cs" />
    </example>
        </member>
        <member name="M:Zebra.Sdk.Printer.FormatUtilLinkOs.PrintStoredFormatWithVarGraphics(System.String,System.Collections.Generic.Dictionary{System.Int32,System.String})">
            <summary>
            Prints a stored format on the printer, filling in the fields specified by the <c>Dictionary</c>.
            </summary>
            <remarks>
            The values of any format variables will be encoded using the default encoding type.<br/>
            See <see cref="T:System.String"/> for more information about encoding types.
            </remarks>
            <param name="storedFormatPath">The location of the file on the printer (e.g. "E:FORMAT.ZPL").</param>
            <param name="vars">A Dictionary which contains the key/value pairs for the stored format. For ZPL formats, the key number
            should correspond directly to the number of the field in the format. For CPCL formats, the values will be passed
            in ascending numerical order.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.FormatUtilLinkOs.PrintStoredFormatWithVarGraphics(System.String,System.Collections.Generic.Dictionary{System.Int32,System.String},System.String)">
            <summary>
            Prints a stored format on the printer, filling in the fields specified by the <c>Dictionary</c>.
            </summary>
            <remarks>
            The values of any format variables will be encoded using the provided <c>encoding</c> type. eg.UTF-8.<br/>
            See <see cref="T:System.String"/> for more information about encoding types.
            </remarks>
            <param name="storedFormatPath">The location of the file on the printer (e.g. "E:FORMAT.ZPL").</param>
            <param name="vars">A Dictionary which contains the key/value pairs for the stored format. For ZPL formats, the key number
            should correspond directly to the number of the field in the format. For CPCL formats, the values will be passed
            in ascending numerical order.</param>
            <param name="encoding">A character-encoding name (e.g. UTF-8)</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.FormatUtilLinkOs.PrintStoredFormatWithVarGraphics(System.String,System.Collections.Generic.Dictionary{System.Int32,Zebra.Sdk.Graphics.ZebraImageI},System.Collections.Generic.Dictionary{System.Int32,System.String})">
            <summary>
            Prints a stored format on the printer, filling in the fields specified by the Dictionaries.
            </summary>
            <remarks>
            The images stored in <c>imgVars</c> will first be dithered and then sent down the the printer as SDK01.GRF-SDK99.GRF. These GRF
            files will then be used when printing the format and overwritten each time the method is called with new images. The values of any 
            format variables will be encoded using the default encoding type.<br/>
            See <see cref="T:System.String"/> for more information about encoding types.
            </remarks>
            <param name="storedFormatPath">The location of the file on the printer (e.g. "E:FORMAT.ZPL").</param>
            <param name="imgVars">A Dictionary which contains the key/value pairs for the images to be used in the stored format. For ZPL
            formats, the key number should correspond directly to the number of the field in the format. For CPCL formats,
            the values will be passed in ascending numerical order.</param>
            <param name="vars">A Dictionary which contains the key/value pairs for the stored format. For ZPL formats, the key number
            should correspond directly to the number of the field in the format. For CPCL formats, the values will be passed
            in ascending numerical order.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.FormatUtilLinkOs.PrintStoredFormatWithVarGraphics(System.String,System.Collections.Generic.Dictionary{System.Int32,Zebra.Sdk.Graphics.ZebraImageI},System.Collections.Generic.Dictionary{System.Int32,System.String},System.String)">
            <summary>
            Prints a stored format on the printer, filling in the fields specified by the Dictionaries.
            </summary>
            <remarks>
            The images stored in <c>imgVars</c> will first be dithered and then sent down the the printer as SDK01.GRF-SDK99.GRF.
            These GRF files will then be used when printing the format and overwritten each time the method is called with new
            images. The values of any format variables will be encoded using the provided <c>encoding</c> type. eg. UTF-8.<br/>
            See <see cref="T:System.String"/> for more information about encoding types.
            </remarks>
            <param name="storedFormatPath">The location of the file on the printer (e.g. "E:FORMAT.ZPL").</param>
            <param name="imgVars">A Dictionary which contains the key/value pairs for the images to be used in the stored format. For ZPL
            formats, the key number should correspond directly to the number of the field in the format. For CPCL formats,
            the values will be passed in ascending numerical order.</param>
            <param name="vars">A Dictionary which contains the key/value pairs for the stored format. For ZPL formats, the key number
            should correspond directly to the number of the field in the format. For CPCL formats, the values will be passed
            in ascending numerical order.</param>
            <param name="encoding">A character-encoding name (e.g. UTF-8)</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="T:Zebra.Sdk.Printer.GraphicsUtil">
            <summary>
      This is an utility class for printing images on a device.
    </summary><example>
      Desktop
      <code source="../SdkApi_Test/Test/Zebra/Sdk/Printer/Examples/GraphicsUtilExample.cs" />
    </example><example>
      Androidâ„¢
      <code source="../XamarinSdk/XamarinTest/XamarinTest.Android/Test/Zebra/Sdk/Printer/Examples/GraphicsUtilExample.cs" />
    </example><example>
      iOS
      <code source="../XamarinSdk/XamarinTest/XamarinTest.iOS/Test/Zebra/Sdk/Printer/Examples/GraphicsUtilExample.cs" />
    </example>
        </member>
        <member name="M:Zebra.Sdk.Printer.GraphicsUtil.PrintImage(System.String,System.Int32,System.Int32)">
            <summary>
            Prints an image from the connecting device file system to the connected device as a monochrome image.
            </summary>
            <remarks>
            If the image resolution is large (e.g. 1024x768) this method may take a long time to execute or
            throw an <see cref="T:System.OutOfMemoryException"/>.
            </remarks>
            <param name="imageFilePath">Image file to be printed.</param>
            <param name="x">Horizontal starting position in dots.</param>
            <param name="y">Vertical starting position in dots.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
            <exception cref="T:System.IO.IOException">When the file could not be found, opened, or is an unsupported graphic.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.GraphicsUtil.PrintImage(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Prints an image from the connecting device file system to the connected device as a monochrome image.
            </summary>
            <remarks>
            If the image resolution is large (e.g. 1024x768) this method may take a long time to execute or
            throw an <see cref="T:System.OutOfMemoryException"/>.
            </remarks>
            <param name="imageFilePath">Image file to be printed.</param>
            <param name="x">Horizontal starting position in dots.</param>
            <param name="y">Vertical starting position in dots.</param>
            <param name="width">Desired width of the printed image. Passing a value less than 1 will preserve original width.</param>
            <param name="height">Desired height of the printed image. Passing a value less than 1 will preserve original height.</param>
            <param name="insideFormat">Boolean value indicating whether this image should be printed by itself (false), or is part 
            of a format being written to the connection (true).</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
            <exception cref="T:System.IO.IOException">When the file could not be found, opened, or is an unsupported graphic.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.GraphicsUtil.PrintImage(Zebra.Sdk.Graphics.ZebraImageI,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Prints an image to the connected device as a monochrome image.
            </summary>
            <remarks>
            If the image resolution is large (e.g. 1024x768) this method may take a long time to execute or
            throw an <see cref="T:System.OutOfMemoryException"/>.
            </remarks>
            <param name="image">The image to be printed.</param>
            <param name="x">Horizontal starting position in dots.</param>
            <param name="y">Vertical starting position in dots.</param>
            <param name="width">Desired width of the printed image. Passing a value less than 1 will preserve original width.</param>
            <param name="height">Desired height of the printed image. Passing a value less than 1 will preserve original height.</param>
            <param name="insideFormat">Boolean value indicating whether this image should be printed by itself (false), or is part 
            of a format being written to the connection (true).</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.GraphicsUtil.StoreImage(System.String,Zebra.Sdk.Graphics.ZebraImageI,System.Int32,System.Int32)">
            <summary>
            Stores the specified <c>image</c> to the connected printer as a monochrome image.
            </summary>
            <remarks>
            The image will be stored on the printer at <c>printerDriveAndFileName</c> with the extension GRF.
            If a drive letter is not supplied, E will be used as the default (e.g. FILE becomes E:FILE.GRF). If an extension is supplied,
            it is ignored if it is not either BMP or PNG. If the extension is ignored, GRF will be used.<br/>
            If the image resolution is large (e.g. 1024x768) this method may take a long time to execute or throw an <see cref="T:System.OutOfMemoryException"/>.
            </remarks>
            <param name="deviceDriveAndFileName">Path on the printer where the image will be stored.</param>
            <param name="image">The image to be stored on the printer.</param>
            <param name="width">Desired width of the printed image, in dots. Passing -1 will preserve original width.</param>
            <param name="height">Desired height of the printed image, in dots. Passing -1 will preserve original height.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an issue communicating with the printer (e.g. the connection is not open).</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If <c>printerDriveAndFileName</c> has an incorrect format.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.GraphicsUtil.StoreImage(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Stores the specified <c>image</c> to the connected printer as a monochrome image.
            </summary>
            <remarks>
            The image will be stored on the printer at <c>printerDriveAndFileName</c> with the extension GRF.
            If a drive letter is not supplied, E will be used as the default (e.g. FILE becomes E:FILE.GRF). If an extension is supplied,
            it is ignored if it is not either BMP or PNG. If the extension is ignored, GRF will be used.<br/>
            If the image resolution is large (e.g. 1024x768) this method may take a long time to execute or throw an <see cref="T:System.OutOfMemoryException"/>.
            </remarks>
            <param name="deviceDriveAndFileName">Path on the printer where the image will be stored.</param>
            <param name="imageFullPath">The image file to be stored on the printer.</param>
            <param name="width">Desired width of the printed image, in dots. Passing -1 will preserve original width.</param>
            <param name="height">Desired height of the printed image, in dots. Passing -1 will preserve original height.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an issue communicating with the printer (e.g. the connection is not open).</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If <c>printerDriveAndFileName</c> has an incorrect format.</exception>
            <exception cref="T:System.IO.IOException">If the file could not be found, opened, or is an unsupported graphic.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.CsvPrinterHelper.ParseSingleLineFormat(System.String[])">
            <summary>
            </summary>
            <param name="thisLineOfItems"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.CsvPrinterHelper.ExtractFdsByColumnHeading(Zebra.Sdk.Printer.FieldDescriptionData[],System.String[],System.Int32[])">
            <summary>
            </summary>
            <param name="originalFds"></param>
            <param name="columns"></param>
            <param name="quantityColumn"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Printer.Internal.UseDefaultMappingException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Zebra.Sdk.Printer.Internal.FileUtilA">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FileUtilA.ExtractFilePropertiesFromDirResult(System.String)">
            <summary>
            </summary>
            <param name="dirResult"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FileUtilCpcl.RetrieveFileNames">
            <see cref="M:Zebra.Sdk.Printer.Internal.FileUtilA.RetrieveFileNames"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FileUtilCpcl.RetrieveFileNames(System.String[])">
            <see cref="M:Zebra.Sdk.Printer.Internal.FileUtilA.RetrieveFileNames(System.String[])"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FileUtilCpcl.RetrieveObjectsProperties">
            <see cref="M:Zebra.Sdk.Printer.Internal.FileUtilA.RetrieveObjectsProperties"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FileUtilLinkOsImpl.GetFileOverFtp(System.IO.Stream,System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FileUtilZpl.ExtractFilePropertiesFromDirResult(System.String)">
            <summary>
            Look through the result of a directory listing and extract the file name, drive letter, and extension for each
            file in the listing.
            </summary>
            <param name="dirResult">The result of ^HZL, JSON file.drive_listing, or file.dir SGD.</param>
            <returns>A list (element type PrinterFileProperties) of file information.</returns>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If there is an error parsing the directory data returned by the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FileUtilZpl.ExtractFilePropertiesFromHZLResponse(System.String)">
            <summary>
            Look through the result of a ^HZL and extract the file name, drive letter, and extension for each file in the listing.
            </summary>
            <param name="dirResult">The result of ^HZL.</param>
            <returns>A list (element type PrinterFileProperties) of file information.</returns>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If there is an error parsing the directory data returned by the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FileUtilZpl.RetrieveFileNames(System.String[])">
            <see cref="M:Zebra.Sdk.Printer.Internal.FileUtilA.RetrieveFileNames(System.String[])"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FileUtilZpl.RetrieveObjectsProperties">
            <see cref="M:Zebra.Sdk.Printer.Internal.FileUtilA.RetrieveObjectsProperties"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FileUtilZpl.RetrieveObjectsPropertiesWithCrc32(System.Collections.Generic.List{Zebra.Sdk.Printer.StorageInfo},System.Collections.Generic.HashSet{Zebra.Sdk.Printer.DriveType},Zebra.Sdk.Printer.PrinterLanguage)">
            <summary>
            </summary>
            <param name="storageInfoList"></param>
            <param name="driveTypes"></param>
            <param name="printerLanguage"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FileUtilZpl.GetStorageInfo">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FileUtilZpl.GetStorageInfoViaJsonChannel">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FileUtilZpl.GetStorageInfoViaSgd">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FileUtilZpl.GetObjectsListForDriveTypes(System.Collections.Generic.List{Zebra.Sdk.Printer.StorageInfo},System.Collections.Generic.HashSet{Zebra.Sdk.Printer.DriveType},Zebra.Sdk.Printer.PrinterLanguage)">
            <summary>
            </summary>
            <param name="storageInfoList"></param>
            <param name="driveTypes"></param>
            <param name="printerLanguage"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FileUtilZpl.GetObjectsListFromAllDrives(Zebra.Sdk.Printer.PrinterLanguage)">
            <summary>
            </summary>
            <param name="printerLanguage"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FileUtilZpl.GetObjectsListFromDrive(System.String,Zebra.Sdk.Printer.PrinterLanguage)">
            <summary>
            </summary>
            <param name="driveLetter"></param>
            <param name="printerLanguage"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FirmwareUpdaterLinkOsBase.UpdateFirmware(System.String,Zebra.Sdk.Printer.FirmwareUpdateHandler)">
            <see cref="M:Zebra.Sdk.Printer.FirmwareUpdaterLinkOs.UpdateFirmware(System.String,Zebra.Sdk.Printer.FirmwareUpdateHandler)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FirmwareUpdaterLinkOsBase.UpdateFirmware(System.String,System.Int64,Zebra.Sdk.Printer.FirmwareUpdateHandler)">
            <see cref="M:Zebra.Sdk.Printer.FirmwareUpdaterLinkOs.UpdateFirmware(System.String,System.Int64,Zebra.Sdk.Printer.FirmwareUpdateHandler)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FirmwareUpdaterLinkOsBase.UpdateFirmwareUnconditionally(System.String,Zebra.Sdk.Printer.FirmwareUpdateHandler)">
            <see cref="M:Zebra.Sdk.Printer.FirmwareUpdaterLinkOs.UpdateFirmwareUnconditionally(System.String,Zebra.Sdk.Printer.FirmwareUpdateHandler)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FirmwareUpdaterLinkOsBase.UpdateFirmwareUnconditionally(System.String,System.Int64,Zebra.Sdk.Printer.FirmwareUpdateHandler)">
            <see cref="M:Zebra.Sdk.Printer.FirmwareUpdaterLinkOs.UpdateFirmwareUnconditionally(System.String,System.Int64,Zebra.Sdk.Printer.FirmwareUpdateHandler)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FirmwareUpdaterLinkOsBase.UpdateFirmware(System.String,System.Int64,Zebra.Sdk.Printer.FirmwareUpdateHandler,System.Boolean)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException"></exception>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FirmwareUpdaterLinkOsBase.DoFwDownload(System.String,System.Int64,Zebra.Sdk.Printer.FirmwareUpdateHandler)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException"></exception>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FirmwareUpdaterLinkOsBase.DownloadFwViaThreadAndWaitForFailure(System.Int64,Zebra.Sdk.Printer.FirmwareUpdateHandlerBase)">
            <summary>
            </summary>
            <param name="thresholdTime"></param>
            <param name="handler"></param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FirmwareUpdaterLinkOsBase.SinglePrinterDiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)">
            <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.FoundPrinter(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FirmwareUpdaterLinkOsBase.SinglePrinterDiscoveryHandler.DiscoveryFinished">
            <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryFinished"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FirmwareUpdaterLinkOsBase.SinglePrinterDiscoveryHandler.DiscoveryError(System.String)">
            <see cref="M:Zebra.Sdk.Printer.Discovery.DiscoveryHandler.DiscoveryError(System.String)"/> 
        </member>
        <member name="T:Zebra.Sdk.Printer.Internal.FirmwareUtil">
            <summary>
            Utility methods for firmware files.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FirmwareUtil.ExtractFirmwareVersion(System.IO.Stream)">
            <summary>
            Given the contents of a firmware file, extract the firmware version string.
            </summary>
            <remarks>
            If the contents are not valid or if the version cannot be extracted, an empty string is returned.
            </remarks>
            <param name="firmwareFileContents">Input stream containing the contents of a firmware file.</param>
            <returns>The version string, or an empty string.</returns>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FirmwareUtil.FirmwareVersionsDontMatch(System.IO.Stream,Zebra.Sdk.Comm.Connection)">
            <summary>
            Extract the firmware version from a firmware file input stream and return false if that version matches the
            firmware on the connected printer.
            </summary>
            <remarks>
            Match is done ignoring whether there is a Z (indication that ZBI is disabled) in either version string. Match is case insensitive.
            </remarks>
            <param name="firmwareFileContents">Input stream containing the contents of a firmware file.</param>
            <param name="connection">A connection to a printer</param>
            <returns>True if the firmware versions don't match</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there was an issue communicating with the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FirmwareUtil.FirmwareVersionsDontMatch(System.IO.Stream,System.String)">
            <summary>
            Extract the firmware version from a firmware file input stream, and return false if that version matches the versionFromPrinter.
            </summary>
            <remarks>
            Match is done ignoring whether there is a Z (indication that ZBI is disabled) in either version string. Match is case insensitive.
            </remarks>
            <param name="firmwareFileContents">Input stream containing the contents of a firmware file.</param>
            <param name="versionFromPrinter">Version of firmware that is already on the printer.</param>
            <returns>True if the firmware versions don't match</returns>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FirmwareUtil.FirmwareVersionsDontMatch(System.String,Zebra.Sdk.Comm.Connection)">
            <summary>
            Extract the firmware version from a firmware file input stream, and return false if that version matches the versionFromPrinter.
            </summary>
            <remarks>
            Match is done ignoring whether there is a Z (indication that ZBI is disabled) in either version string. Match is case insensitive.
            </remarks>
            <param name="versionFromFirmware">Version of firmware that has already been extracted from the file.</param>
            <param name="connection">A connection to a printer</param>
            <returns>True if the firmware versions don't match</returns>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FirmwareUtil.GetFWVersionFromPrinterConnection(Zebra.Sdk.Comm.Connection)">
            <summary>
            Get the firmware version from the connected printer.
            </summary>
            <param name="connection">A connection to a printer.</param>
            <returns>The firmware version of the printer.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there was an issue communicating with the printer.</exception>"
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FirmwareUtil.FirmwareVersionsMatch(System.String,System.String)">
            <summary>
            Compare two firmware version strings.
            </summary>
            <remarks>
            If the only difference is that ZBI is enabled for one version but not the other, they are still considered to match.Matching is case insensitive.
            </remarks>
            <param name="version1">One version string.</param>
            <param name="version2">The other version string.</param>
            <returns>True if the versions match.</returns>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FormatUtilA.PrintStoredFormat(System.String,System.String[])">
            <see cref="M:Zebra.Sdk.Printer.FormatUtil.PrintStoredFormat(System.String,System.String[])"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FormatUtilCpcl.GetVariableFields(System.String)">
            <see cref="M:Zebra.Sdk.Printer.FormatUtil.GetVariableFields(System.String)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FormatUtilCpcl.PrintStoredFormat(System.String,System.Collections.Generic.Dictionary{System.Int32,System.String})">
            <see cref="M:Zebra.Sdk.Printer.FormatUtil.PrintStoredFormat(System.String,System.Collections.Generic.Dictionary{System.Int32,System.String})"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FormatUtilCpcl.PrintStoredFormat(System.String,System.Collections.Generic.Dictionary{System.Int32,System.String},System.String)">
            <see cref="M:Zebra.Sdk.Printer.FormatUtil.PrintStoredFormat(System.String,System.Collections.Generic.Dictionary{System.Int32,System.String},System.String)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FormatUtilCpcl.RetrieveFormatFromPrinter(System.String)">
            <see cref="M:Zebra.Sdk.Printer.FormatUtil.RetrieveFormatFromPrinter(System.String)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FormatUtilCpcl.RetrieveFormatFromPrinter(System.IO.Stream,System.String)">
            <see cref="M:Zebra.Sdk.Printer.FormatUtil.RetrieveFormatFromPrinter(System.IO.Stream,System.String)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FormatUtilZpl.FindNextCommand(System.String,System.Int32,System.String,Zebra.Sdk.Printer.Internal.FormatUtilZpl.CommandType)">
            <summary>
            Search formatString, starting at index searchIx, for a ^FN, ^CC or ~CC command. Search is case insensitive. <c>caret</c> is the command prefix.
            </summary>
            <param name="caret"></param>
            <param name="searchIx"></param>
            <param name="formatString"></param>
            <param name="commandType"></param>
            <returns><c>{-1,unknownCommand}</c> if none of the commands is found, otherwise the index where a command
            was found, and the type of command that was found.</returns>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FormatUtilZpl.FindSpecifiedCommand(System.Int32,System.String,System.String[])">
            <summary>
            Search formatString, starting at index searchIx, for one of the commands in commandStrings. Search is case
            insensitive. <c>caret</c> is the command prefix.
            </summary>
            <param name="searchIx"></param>
            <param name="formatString"></param>
            <param name="commandStrings"></param>
            <returns><c>{-1,unknownCommand}</c> if none of the commands is found, otherwise the index where a command
            was found, and the type of command that was found.</returns>
        </member>
        <member name="T:Zebra.Sdk.Printer.Internal.FormatUtilZpl.CommandType">
            <summary>
            Represent a ZPL command type.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.Internal.FormatUtilZpl.CommandType.FnCommand">
            <summary>
            ^FN command
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.Internal.FormatUtilZpl.CommandType.CcCommand">
            <summary>
            ^CC and ~CC commands
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.Internal.FormatUtilZpl.CommandType.XgCommand">
            <summary>
            ^XG command
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.Internal.FormatUtilZpl.CommandType.DfCommand">
            <summary>
            ^DF command
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.Internal.FormatUtilZpl.CommandType.XaCommand">
            <summary>
            ^XA command
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.Internal.FormatUtilZpl.CommandType.XzCommand">
            <summary>
            ^XZ command
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.Internal.FormatUtilZpl.CommandType.UnknownCommand">
            <summary>
            everything else
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Printer.Internal.FormatUtilZpl.CommandType.Id">
            <summary>
            the id, as a lower case string
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FormatUtilZpl.CommandType.GetCommand(System.String)">
            <summary>
            </summary>
            <param name="twoCharacterCommand"></param>
            <returns></returns>
        </member>
        <member name="T:Zebra.Sdk.Printer.Internal.FormatUtilZpl.IndexAndCommandType">
            <summary>
            Represent the index in a string where a ZPL command was found, and the type of the command at that spot.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.FormatUtilZpl.IndexAndCommandType.#ctor(System.Int32,Zebra.Sdk.Printer.Internal.FormatUtilZpl.CommandType)">
            <summary>
            </summary>
            <param name="index"></param>
            <param name="command"></param>
        </member>
        <member name="P:Zebra.Sdk.Printer.Internal.FormatUtilZpl.IndexAndCommandType.Index">
            <summary>
            Gets the index
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Printer.Internal.FormatUtilZpl.IndexAndCommandType.Command">
            <summary>
            Gets the command
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.GraphicsConversionUtil.SendImageToStream(System.String,Zebra.Sdk.Graphics.Internal.ZebraImageInternal,System.Int32,System.Int32,System.IO.Stream)">
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.GraphicsConversionUtilZpl.SendImageToStream(System.String,Zebra.Sdk.Graphics.Internal.ZebraImageInternal,System.Int32,System.Int32,System.IO.Stream)">
            <see cref="M:Zebra.Sdk.Printer.Internal.GraphicsConversionUtil.SendImageToStream(System.String,Zebra.Sdk.Graphics.Internal.ZebraImageInternal,System.Int32,System.Int32,System.IO.Stream)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.GraphicsUtilA.PrintImage(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <see cref="M:Zebra.Sdk.Printer.GraphicsUtil.PrintImage(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.GraphicsUtilA.StoreImage(System.String,System.String,System.Int32,System.Int32)">
            <see cref="M:Zebra.Sdk.Printer.GraphicsUtil.StoreImage(System.String,System.String,System.Int32,System.Int32)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.GraphicsUtilCpcl.PrintImage(Zebra.Sdk.Graphics.ZebraImageI,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <see cref="M:Zebra.Sdk.Printer.GraphicsUtil.PrintImage(Zebra.Sdk.Graphics.ZebraImageI,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.GraphicsUtilCpcl.StoreImage(System.String,Zebra.Sdk.Graphics.ZebraImageI,System.Int32,System.Int32)">
            <see cref="M:Zebra.Sdk.Printer.GraphicsUtil.StoreImage(System.String,Zebra.Sdk.Graphics.ZebraImageI,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.LinkOsPrinterCreatorSgdOrJson.Create(Zebra.Sdk.Printer.ZebraPrinter)">
            <summary>
            </summary>
            <param name="genericPrinter"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.LinkOsPrinterCreatorSgdOrJson.CreateLinkOsPrinterFromMultiChannelConnection(Zebra.Sdk.Printer.ZebraPrinter)">
            <summary>
            </summary>
            <param name="genericPrinter"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.LinkOsPrinterCreatorSgdOrJson.CreateLinkOsPrinterFromStandardConnection(Zebra.Sdk.Printer.ZebraPrinter)">
            <summary>
            </summary>
            <param name="genericPrinter"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.LinkOsPrinterCreatorSgdOrJson.ObtainVersion(Zebra.Sdk.Comm.Connection)">
            <summary>
            </summary>
            <param name="c"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.LinkOsPrinterCreatorSgdOrJson.ObtainLanguage(Zebra.Sdk.Comm.Connection)">
            <summary>
            </summary>
            <param name="c"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.LinkOsPrinterCreatorSgdOrJson.QueryPrinterLanguage(Zebra.Sdk.Comm.Connection)">
            <summary>
            </summary>
            <param name="c"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.LinkOsPrinterCreatorSgdOrJson.QueryVersionNumber(Zebra.Sdk.Comm.Connection)">
            <summary>
            </summary>
            <param name="c"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.LinkOsPrinterCreatorSgdOrJson.GetLanguageViaJson(Zebra.Sdk.Comm.Connection)">
            <summary>
            </summary>
            <param name="c"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.LinkOsPrinterCreatorSgdOrJson.QueryVersionInfoOverSingleChannel(Zebra.Sdk.Comm.Connection)">
            <summary>
            </summary>
            <param name="c"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.LinkOsPrinterCreatorSgdOrJson.GetDiscoMapViaSgd(Zebra.Sdk.Comm.Connection)">
            <summary>
            </summary>
            <param name="connection"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.LinkOsPrinterCreatorSgdOrJson.GetDiscoMapViaJson(Zebra.Sdk.Comm.Connection)">
            <summary>
            </summary>
            <param name="connection"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.LinkOsPrinterCreatorSgdOrJson.ParseDiscoPacket(System.Byte[])">
            <summary>
            </summary>
            <param name="discoveryPacketBytes"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryPacketDecodeException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.PortStatus.GetPortStatus(Zebra.Sdk.Comm.Connection,System.String)">
            <summary>
            </summary>
            <param name="connection"></param>
            <param name="getCommunityName"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.PrinterStatusCpcl.#ctor(Zebra.Sdk.Comm.Connection)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.PrinterStatusCpcl.UpdateStatus">
            <see cref="M:Zebra.Sdk.Printer.PrinterStatus.UpdateStatus"/>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.PrinterStatusLinkOs.GetStatusInfoFromPrinter">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.PrinterStatusLinkOs.ParseJsonStatusResponse(System.String)">
            <summary>
            </summary>
            <param name="responseAsString"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.PrinterStatusLinkOs.Create(System.String)">
            <summary>
            </summary>
            <param name="hostStatusResponse"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.PrinterStatusZpl.#ctor(Zebra.Sdk.Comm.Connection)">
            <summary>
            </summary>
            <param name="connection"></param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.PrinterStatusZpl.GetPrinterStatus">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.PrinterStatusZpl.GetStatusInfoFromPrinter">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.TemplateInfo.Acquire(System.String,System.String)">
            <summary>
            </summary>
            <param name="destinationDevice"></param>
            <param name="templateFilename"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.TemplateInfo.ReadTemplate(System.String,System.String)">
            <summary>
            </summary>
            <param name="destinationDevice"></param>
            <param name="templateFilename"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.TemplateInfo.GetTemplateFromPrinter(System.String,System.String)">
            <summary>
            </summary>
            <param name="destinationDevice"></param>
            <param name="templateFilename"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ToolsUtilCpcl.Calibrate">
            <see cref="M:Zebra.Sdk.Printer.ToolsUtil.Calibrate"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ToolsUtilCpcl.PrintConfigurationLabel">
            <see cref="M:Zebra.Sdk.Printer.ToolsUtil.PrintConfigurationLabel"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ToolsUtilCpcl.Reset">
            <see cref="M:Zebra.Sdk.Printer.ToolsUtil.Reset"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ToolsUtilCpcl.RestoreDefaults">
            <see cref="M:Zebra.Sdk.Printer.ToolsUtil.RestoreDefaults"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ToolsUtilCpcl.SendCommand(System.String)">
            <see cref="M:Zebra.Sdk.Printer.ToolsUtil.SendCommand(System.String)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ToolsUtilCpcl.SendCommand(System.String,System.String)">
            <see cref="M:Zebra.Sdk.Printer.ToolsUtil.SendCommand(System.String,System.String)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ToolsUtilLinkOsHelper.PrintNetworkConfigurationLabel">
            <summary>
            </summary>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ToolsUtilLinkOsHelper.PrintDirectoryLabel">
            <summary>
            </summary>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ToolsUtilLinkOsHelper.SetClock(System.String)">
            <summary>
            </summary>
            <param name="dateTime"></param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ToolsUtilZpl.Calibrate">
            <see cref="M:Zebra.Sdk.Printer.ToolsUtil.Calibrate"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ToolsUtilZpl.PrintConfigurationLabel">
            <see cref="M:Zebra.Sdk.Printer.ToolsUtil.PrintConfigurationLabel"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ToolsUtilZpl.Reset">
            <see cref="M:Zebra.Sdk.Printer.ToolsUtil.Reset"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ToolsUtilZpl.RestoreDefaults">
            <see cref="M:Zebra.Sdk.Printer.ToolsUtil.RestoreDefaults"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ToolsUtilZpl.SendCommand(System.String)">
            <see cref="M:Zebra.Sdk.Printer.ToolsUtil.SendCommand(System.String)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ToolsUtilZpl.SendCommand(System.String,System.String)">
            <see cref="M:Zebra.Sdk.Printer.ToolsUtil.SendCommand(System.String,System.String)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.XmlToCsvConverter.Convert(System.Byte[])">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.Xml.XmlException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.XmlToCsvConverter.Convert(System.IO.Stream)">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.Xml.XmlException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.XmlToCsvConverter.ParseDocument(System.IO.Stream,Zebra.Sdk.Printer.Internal.XmlToCsvConverter)">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.Xml.XmlException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterA.RetrieveFileNames">
            <see cref="M:Zebra.Sdk.Device.FileUtil.RetrieveFileNames"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterA.RetrieveFileNames(System.String[])">
            <see cref="M:Zebra.Sdk.Device.FileUtil.RetrieveFileNames(System.String[])"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterA.RetrieveObjectsProperties">
            <see cref="M:Zebra.Sdk.Device.FileUtil.RetrieveObjectsProperties"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterA.SendFileContents(System.String)">
            <see cref="M:Zebra.Sdk.Device.FileUtil.SendFileContents(System.String)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterA.SendFileContents(System.String,Zebra.Sdk.Device.ProgressMonitor)">
            <see cref="M:Zebra.Sdk.Device.FileUtil.SendFileContents(System.String,Zebra.Sdk.Device.ProgressMonitor)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterA.PrintImage(System.String,System.Int32,System.Int32)">
            <see cref="M:Zebra.Sdk.Printer.GraphicsUtil.PrintImage(System.String,System.Int32,System.Int32)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterA.PrintImage(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <see cref="M:Zebra.Sdk.Printer.GraphicsUtil.PrintImage(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterA.PrintImage(Zebra.Sdk.Graphics.ZebraImageI,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <see cref="M:Zebra.Sdk.Printer.GraphicsUtil.PrintImage(Zebra.Sdk.Graphics.ZebraImageI,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterA.StoreImage(System.String,Zebra.Sdk.Graphics.ZebraImageI,System.Int32,System.Int32)">
            <see cref="M:Zebra.Sdk.Printer.GraphicsUtil.StoreImage(System.String,Zebra.Sdk.Graphics.ZebraImageI,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterA.StoreImage(System.String,System.String,System.Int32,System.Int32)">
            <see cref="M:Zebra.Sdk.Printer.GraphicsUtil.StoreImage(System.String,System.String,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterA.Calibrate">
            <see cref="M:Zebra.Sdk.Printer.ToolsUtil.Calibrate"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterA.RestoreDefaults">
            <see cref="M:Zebra.Sdk.Printer.ToolsUtil.RestoreDefaults"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterA.PrintConfigurationLabel">
            <see cref="M:Zebra.Sdk.Printer.ToolsUtil.PrintConfigurationLabel"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterA.SendCommand(System.String)">
            <see cref="M:Zebra.Sdk.Printer.ToolsUtil.SendCommand(System.String)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterA.SendCommand(System.String,System.String)">
            <see cref="M:Zebra.Sdk.Printer.ToolsUtil.SendCommand(System.String,System.String)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterA.Reset">
            <see cref="M:Zebra.Sdk.Printer.ToolsUtil.Reset"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterA.RetrieveFormatFromPrinter(System.String)">
            <see cref="M:Zebra.Sdk.Printer.FormatUtil.RetrieveFormatFromPrinter(System.String)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterA.RetrieveFormatFromPrinter(System.IO.Stream,System.String)">
            <see cref="M:Zebra.Sdk.Printer.FormatUtil.RetrieveFormatFromPrinter(System.IO.Stream,System.String)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterA.PrintStoredFormat(System.String,System.String[])">
            <see cref="M:Zebra.Sdk.Printer.FormatUtil.PrintStoredFormat(System.String,System.String[])"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterA.PrintStoredFormat(System.String,System.String[],System.String)">
            <see cref="M:Zebra.Sdk.Printer.FormatUtil.PrintStoredFormat(System.String,System.String[],System.String)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterA.PrintStoredFormat(System.String,System.Collections.Generic.Dictionary{System.Int32,System.String})">
            <see cref="M:Zebra.Sdk.Printer.FormatUtil.PrintStoredFormat(System.String,System.Collections.Generic.Dictionary{System.Int32,System.String},System.String)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterA.PrintStoredFormat(System.String,System.Collections.Generic.Dictionary{System.Int32,System.String},System.String)">
            <see cref="M:Zebra.Sdk.Printer.FormatUtil.PrintStoredFormat(System.String,System.Collections.Generic.Dictionary{System.Int32,System.String},System.String)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterA.GetVariableFields(System.String)">
            <see cref="M:Zebra.Sdk.Printer.FormatUtil.GetVariableFields(System.String)"/>
        </member>
        <member name="P:Zebra.Sdk.Printer.Internal.ZebraPrinterCpcl.PrinterControlLanguage">
            <see cref="M:Zebra.Sdk.Printer.ZebraPrinter.SetConnection(Zebra.Sdk.Comm.Connection)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterCpcl.GetCurrentStatus">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterCpcl.SetConnection(Zebra.Sdk.Comm.Connection)">
            <see cref="M:Zebra.Sdk.Printer.ZebraPrinter.SetConnection(Zebra.Sdk.Comm.Connection)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterFactoryHelper.GetInstance(Zebra.Sdk.Comm.Connection)">
            <summary>
            </summary>
            <param name="connection"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterFactoryHelper.GetInstance(System.String[],Zebra.Sdk.Comm.Connection)">
            <summary>
            </summary>
            <param name="cpclFwVersionPrefixes"></param>
            <param name="connection"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterFactoryHelper.GetInstance(Zebra.Sdk.Printer.PrinterLanguage,Zebra.Sdk.Comm.Connection)">
            <summary>
            </summary>
            <param name="language"></param>
            <param name="connection"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterFactoryHelper.GetLanguage(Zebra.Sdk.Comm.Connection,System.String[])">
            <summary>
            </summary>
            <param name="connection"></param>
            <param name="cpclFwVersionPrefixes"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterFactoryHelper.GetApplNameHocusPocus(Zebra.Sdk.Comm.Connection)">
            <summary>
            </summary>
            <param name="connection"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterFactoryHelper.CreateLinkOsPrinter(Zebra.Sdk.Printer.ZebraPrinter)">
            <summary>
            </summary>
            <param name="genericPrinter"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterFactoryHelper.CreateLinkOsPrinter(Zebra.Sdk.Printer.ZebraPrinter,Zebra.Sdk.Printer.LinkOsInformation)">
            <summary>
            </summary>
            <param name="genericPrinter"></param>
            <param name="info"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterFactoryHelper.CreateLinkOsPrinter(Zebra.Sdk.Printer.ZebraPrinter,Zebra.Sdk.Printer.PrinterLanguage)">
            <summary>
            </summary>
            <param name="genericPrinter"></param>
            <param name="language"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterFactoryHelper.CreateLinkOsPrinter(Zebra.Sdk.Printer.ZebraPrinter,Zebra.Sdk.Printer.LinkOsInformation,Zebra.Sdk.Printer.PrinterLanguage)">
            <summary>
            </summary>
            <param name="genericPrinter"></param>
            <param name="info"></param>
            <param name="language"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterFactoryHelper.GetLinkOsPrinter(Zebra.Sdk.Comm.Connection)">
            <summary>
            </summary>
            <param name="connection"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterFactoryHelper.GetLinkOsPrinter(Zebra.Sdk.Comm.Connection,Zebra.Sdk.Printer.LinkOsInformation)">
            <summary>
            </summary>
            <param name="connection"></param>
            <param name="info"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterFactoryHelper.GetLinkOsPrinter(Zebra.Sdk.Comm.Connection,Zebra.Sdk.Printer.PrinterLanguage)">
            <summary>
            </summary>
            <param name="connection"></param>
            <param name="language"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterFactoryHelper.GetLinkOsPrinter(Zebra.Sdk.Comm.Connection,Zebra.Sdk.Printer.LinkOsInformation,Zebra.Sdk.Printer.PrinterLanguage)">
            <summary>
            </summary>
            <param name="connection"></param>
            <param name="info"></param>
            <param name="language"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.GetPortStatus">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.GetAvailableSettings">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.GetSettingValue(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.GetSettingsValues(System.Collections.Generic.List{System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.GetAllSettings">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.GetAllSettingValues">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.SetSetting(System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.SetSettings(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.GetSettingRange(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.IsSettingValid(System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.IsSettingReadOnly(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.IsSettingWriteOnly(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.GetSettingType(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.ProcessSettingsViaMap(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.CreateProfile(System.String)">
            <see cref="M:Zebra.Sdk.Printer.ProfileUtil.CreateProfile(System.String)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.CreateProfile(System.IO.Stream)">
            <see cref="M:Zebra.Sdk.Printer.ProfileUtil.CreateProfile(System.IO.Stream)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.CreateBackup(System.String)">
            <see cref="M:Zebra.Sdk.Printer.ProfileUtil.CreateBackup(System.String)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.LoadProfile(System.String)">
            <see cref="M:Zebra.Sdk.Printer.ProfileUtil.CreateProfile(System.String)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.LoadProfile(System.String,Zebra.Sdk.Printer.FileDeletionOption,System.Boolean)">
            <see cref="M:Zebra.Sdk.Printer.ProfileUtil.LoadProfile(System.String,Zebra.Sdk.Printer.FileDeletionOption,System.Boolean)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.LoadBackup(System.String)">
            <see cref="M:Zebra.Sdk.Printer.ProfileUtil.LoadBackup(System.String)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.LoadBackup(System.String,System.Boolean)">
            <see cref="M:Zebra.Sdk.Printer.ProfileUtil.LoadBackup(System.String,System.Boolean)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.GetConfiguredAlerts">
            <see cref="M:Zebra.Sdk.Printer.AlertProvider.GetConfiguredAlerts"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.ConfigureAlert(Zebra.Sdk.Printer.PrinterAlert)">
            <see cref="M:Zebra.Sdk.Printer.AlertProvider.ConfigureAlert(Zebra.Sdk.Printer.PrinterAlert)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.ConfigureAlerts(System.Collections.Generic.List{Zebra.Sdk.Printer.PrinterAlert})">
            <see cref="M:Zebra.Sdk.Printer.AlertProvider.ConfigureAlerts(System.Collections.Generic.List{Zebra.Sdk.Printer.PrinterAlert})"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.RemoveAlert(Zebra.Sdk.Printer.PrinterAlert)">
            <see cref="M:Zebra.Sdk.Printer.AlertProvider.RemoveAlert(Zebra.Sdk.Printer.PrinterAlert)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.RemoveAllAlerts">
            <see cref="M:Zebra.Sdk.Printer.AlertProvider.RemoveAllAlerts"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.DeleteFile(System.String)">
            <see cref="M:Zebra.Sdk.Printer.Internal.FileUtilLinkOsImpl.DeleteFile(System.String)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.UpdateFirmware(System.String,Zebra.Sdk.Printer.FirmwareUpdateHandler)">
            <see cref="M:Zebra.Sdk.Printer.FirmwareUpdaterLinkOs.UpdateFirmware(System.String,Zebra.Sdk.Printer.FirmwareUpdateHandler)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.UpdateFirmware(System.String,System.Int64,Zebra.Sdk.Printer.FirmwareUpdateHandler)">
            <see cref="M:Zebra.Sdk.Printer.FirmwareUpdaterLinkOs.UpdateFirmware(System.String,System.Int64,Zebra.Sdk.Printer.FirmwareUpdateHandler)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.UpdateFirmwareUnconditionally(System.String,Zebra.Sdk.Printer.FirmwareUpdateHandler)">
            <see cref="M:Zebra.Sdk.Printer.FirmwareUpdaterLinkOs.UpdateFirmwareUnconditionally(System.String,Zebra.Sdk.Printer.FirmwareUpdateHandler)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.UpdateFirmwareUnconditionally(System.String,System.Int64,Zebra.Sdk.Printer.FirmwareUpdateHandler)">
            <see cref="M:Zebra.Sdk.Printer.FirmwareUpdaterLinkOs.UpdateFirmwareUnconditionally(System.String,System.Int64,Zebra.Sdk.Printer.FirmwareUpdateHandler)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.PrintImage(System.String,System.Int32,System.Int32)">
            <see cref="M:Zebra.Sdk.Printer.GraphicsUtil.PrintImage(System.String,System.Int32,System.Int32)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.PrintImage(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <see cref="M:Zebra.Sdk.Printer.GraphicsUtil.PrintImage(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.PrintImage(Zebra.Sdk.Graphics.ZebraImageI,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <see cref="M:Zebra.Sdk.Printer.GraphicsUtil.PrintImage(Zebra.Sdk.Graphics.ZebraImageI,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.StoreImage(System.String,Zebra.Sdk.Graphics.ZebraImageI,System.Int32,System.Int32)">
            <see cref="M:Zebra.Sdk.Printer.GraphicsUtil.StoreImage(System.String,Zebra.Sdk.Graphics.ZebraImageI,System.Int32,System.Int32)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.StoreImage(System.String,System.String,System.Int32,System.Int32)">
            <see cref="M:Zebra.Sdk.Printer.GraphicsUtil.StoreImage(System.String,System.String,System.Int32,System.Int32)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.RetrieveFormatFromPrinter(System.String)">
            <see cref="M:Zebra.Sdk.Printer.FormatUtil.RetrieveFormatFromPrinter(System.String)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.RetrieveFormatFromPrinter(System.IO.Stream,System.String)">
            <see cref="M:Zebra.Sdk.Printer.FormatUtil.RetrieveFormatFromPrinter(System.IO.Stream,System.String)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.PrintStoredFormat(System.String,System.String[])">
            <see cref="M:Zebra.Sdk.Printer.FormatUtil.PrintStoredFormat(System.String,System.String[])"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.PrintStoredFormat(System.String,System.String[],System.String)">
            <see cref="M:Zebra.Sdk.Printer.FormatUtil.PrintStoredFormat(System.String,System.String[],System.String)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.PrintStoredFormat(System.String,System.Collections.Generic.Dictionary{System.Int32,System.String})">
            <see cref="M:Zebra.Sdk.Printer.FormatUtil.PrintStoredFormat(System.String,System.Collections.Generic.Dictionary{System.Int32,System.String})"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.PrintStoredFormat(System.String,System.Collections.Generic.Dictionary{System.Int32,System.String},System.String)">
            <see cref="M:Zebra.Sdk.Printer.FormatUtil.PrintStoredFormat(System.String,System.Collections.Generic.Dictionary{System.Int32,System.String},System.String)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.GetVariableFields(System.String)">
            <see cref="M:Zebra.Sdk.Printer.FormatUtil.GetVariableFields(System.String)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.PrintStoredFormatWithVarGraphics(System.String,System.Collections.Generic.Dictionary{System.Int32,System.String})">
            <see cref="M:Zebra.Sdk.Printer.FormatUtilLinkOs.PrintStoredFormatWithVarGraphics(System.String,System.Collections.Generic.Dictionary{System.Int32,System.String})"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.PrintStoredFormatWithVarGraphics(System.String,System.Collections.Generic.Dictionary{System.Int32,System.String},System.String)">
            <see cref="M:Zebra.Sdk.Printer.FormatUtilLinkOs.PrintStoredFormatWithVarGraphics(System.String,System.Collections.Generic.Dictionary{System.Int32,System.String},System.String)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.PrintStoredFormatWithVarGraphics(System.String,System.Collections.Generic.Dictionary{System.Int32,Zebra.Sdk.Graphics.ZebraImageI},System.Collections.Generic.Dictionary{System.Int32,System.String})">
            <see cref="M:Zebra.Sdk.Printer.FormatUtilLinkOs.PrintStoredFormatWithVarGraphics(System.String,System.Collections.Generic.Dictionary{System.Int32,Zebra.Sdk.Graphics.ZebraImageI},System.Collections.Generic.Dictionary{System.Int32,System.String})"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.PrintStoredFormatWithVarGraphics(System.String,System.Collections.Generic.Dictionary{System.Int32,Zebra.Sdk.Graphics.ZebraImageI},System.Collections.Generic.Dictionary{System.Int32,System.String},System.String)">
            <see cref="M:Zebra.Sdk.Printer.FormatUtilLinkOs.PrintStoredFormatWithVarGraphics(System.String,System.Collections.Generic.Dictionary{System.Int32,Zebra.Sdk.Graphics.ZebraImageI},System.Collections.Generic.Dictionary{System.Int32,System.String},System.String)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.DownloadTtfFont(System.String,System.String)">
            <see cref="M:Zebra.Sdk.Printer.FontUtil.DownloadTtfFont(System.String,System.String)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.DownloadTteFont(System.String,System.String)">
            <see cref="M:Zebra.Sdk.Printer.FontUtil.DownloadTteFont(System.String,System.String)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.DownloadTtfFont(System.IO.Stream,System.String)">
            <see cref="M:Zebra.Sdk.Printer.FontUtil.DownloadTtfFont(System.IO.Stream,System.String)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.DownloadTteFont(System.IO.Stream,System.String)">
            <see cref="M:Zebra.Sdk.Printer.FontUtil.DownloadTteFont(System.IO.Stream,System.String)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.ThrowExceptionInLinePrintMode">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.ThrowExceptionInLinePrintModeRawOnly">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.ThrowExceptionSupplementalDataStatusOnly(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterLinkOsImpl.ThrowExceptionStatusOnly">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="P:Zebra.Sdk.Printer.Internal.ZebraPrinterZpl.PrinterControlLanguage">
            <see cref="P:Zebra.Sdk.Printer.ZebraPrinter.PrinterControlLanguage"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterZpl.GetCurrentStatus">
            <see cref="M:Zebra.Sdk.Printer.ZebraPrinter.GetCurrentStatus"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterZpl.SetConnection(Zebra.Sdk.Comm.Connection)">
            <see cref="M:Zebra.Sdk.Printer.ZebraPrinter.SetConnection(Zebra.Sdk.Comm.Connection)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterZpl.ObtainLanguage(Zebra.Sdk.Comm.Connection)">
            <summary>
            </summary>
            <param name="c"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Internal.ZebraPrinterZpl.GetLanguageViaJson(Zebra.Sdk.Comm.Connection)">
            <summary>
            </summary>
            <param name="c"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException"></exception>
        </member>
        <member name="T:Zebra.Sdk.Printer.LinkOsInformation">
            <summary>
            A container class used to hold Link-OS specific information
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.LinkOsInformation.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a container class to hold Link-OS information.
            </summary>
            <param name="major">the Link-OS major version number</param>
            <param name="minor">the Link-OS minor version number</param>
        </member>
        <member name="M:Zebra.Sdk.Printer.LinkOsInformation.#ctor(System.String)">
            <summary>
            Creates a container class to hold Link-OS information.
            </summary>
            <param name="linkosVersionString">e.g. ("2.1", "3.0")</param>
        </member>
        <member name="M:Zebra.Sdk.Printer.LinkOsInformation.#ctor(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)">
            <summary>
            Creates a container class to hold Link-OS information based on the supplied <c>discoveredPrinter</c>.
            </summary>
            <param name="discoveredPrinter">A discovered printer.</param>
        </member>
        <member name="P:Zebra.Sdk.Printer.LinkOsInformation.Major">
            <summary>
            Gets the Link-OS major version number
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Printer.LinkOsInformation.Minor">
            <summary>
            Gets the Link-OS minor version number
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Printer.NotALinkOsPrinterException">
            <summary>
            Signals that a Link-OS&#8482; operation has been attempted on a non-Link-OS&#8482; printer.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.NotALinkOsPrinterException.#ctor">
            <summary>
            Constructs a <c>NotALinkOsPrinterException</c> with <c>"This is not a Link-OS&#8482; printer"</c> as
            the detailed error message.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.ClockSetter.Execute">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.ConfigurationLabelPrinter.Execute">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException" />
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.ConfigurationLabelPrinter.IsOkToProceed">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException" />
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.ConfigurationLabelPrinter.PrintConfigurationLabel">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException" />
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.DownloadFirmwarePrinterOperation.Execute">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.DownloadFirmwarePrinterOperation.UpdateFirmwareUnconditionallyNoReconnect">
            <summary>
            </summary>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.FileRemover.Execute">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.FileRemover.DeleteFiles">
            <summary>
            </summary>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.ImageStorer.Execute(System.String,Zebra.Sdk.Graphics.ZebraImageI,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="deviceDriveAndFileName"></param>
            <param name="imageI"></param>
            <param name="width"></param>
            <param name="height"></param>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.ImageStorer.GetCorrectedFileName(Zebra.Sdk.Util.Internal.PrinterFilePath)">
            <summary>
            
            </summary>
            <param name="parsedPath"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.NetworkConfigurationLabelPrinter.Execute">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.NetworkConfigurationLabelPrinter.IsOkToProceed">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.NetworkConfigurationLabelPrinter.PrintNetworkConfigurationLabel">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.NetworkDefaulter.Execute">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.NetworkDefaulter.ResetPrinter">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.NetworkResetter.Execute">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException" />
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.NetworkResetter.ResetPrinter">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException" />
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.ObjectsListingOperation.Execute">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.ObjectsListingOperation.RetrieveObjectListing">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.ObjectsListingOperation.IsOkToProceed">
            <summary>
            </summary>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.PrinterCalibrator.Execute">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException" />
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.PrinterCalibrator.Calibrate">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException" />
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.PrinterDefaulter.Execute">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException" />
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.PrinterDefaulter.DefaultPrinter">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException" />
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.PrinterOperation`1.Execute">
            <summary>
            
            </summary>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.PrinterResetter.Execute">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.PrinterResetter.ResetPrinter">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.SettingsGrabberOperation.Execute">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.SettingsGrabberOperation.IsOkToProceed">
            <summary>
            </summary>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.SettingsUpdaterOperation.Execute">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.SettingsUpdaterOperation.Process">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.Operations.Internal.SettingsUpdaterOperation.IsOkToProceed">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="T:Zebra.Sdk.Printer.PrinterAlert">
            <summary>
            Defines a printer alert.
            </summary>
            <remarks>Applicable only to ZPL printers.</remarks>
            <example><code source="../SdkApi_Test/Test/Zebra/Sdk/Printer/Examples/PrinterAlertExample.cs"/></example>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterAlert.destination">
            <summary>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterAlert.destinationAddress">
            <summary>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterAlert.port">
            <summary>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterAlert.quelling">
            <summary>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterAlert.alertText">
            <summary>
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterAlert.#ctor(Zebra.Sdk.Settings.AlertCondition,Zebra.Sdk.Settings.AlertDestination,System.Boolean,System.Boolean,System.String,System.Int32,System.Boolean)">
            <summary>
            Creates an instance of a PrinterAlert object.
            </summary>
            <param name="condition">The printer condition that will trigger the alert.</param>
            <param name="destination">The destination that the alert will be sent to.</param>
            <param name="onSet">If true, the alert will be triggered when the condition occurs.</param>
            <param name="onClear">If true, the alert will be triggered when the condition is cleared.</param>
            <param name="destinationAddress">The destination address, if the destination requires one.</param>
            <param name="port">The destination port, if the destination requires one.</param>
            <param name="quelling">If true, the alert is quelled.</param>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterAlert.#ctor(Zebra.Sdk.Settings.AlertCondition,Zebra.Sdk.Settings.AlertDestination,System.String,System.Boolean,System.Boolean,System.String,System.Int32,System.Boolean)">
            <summary>
            Creates an instance of a PrinterAlert object, including a Set-Get-Do name.
            </summary>
            <param name="condition">The printer condition that will trigger the alert.</param>
            <param name="destination">The destination that the alert will be sent to.</param>
            <param name="sgdName">If <c>condition</c> is <c>SGD_SET</c>, the name of the Set-Get-Do to be monitored.</param>
            <param name="onSet">If true, the alert will be triggered when the condition occurs.</param>
            <param name="onClear">If true, the alert will be triggered when the condition is cleared.</param>
            <param name="destinationAddress">The destination address, if the destination requires one.</param>
            <param name="port">The destination port, if the destination requires one.</param>
            <param name="quelling">If true, the alert is quelled.</param>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterAlert.#ctor(Zebra.Sdk.Settings.AlertCondition,Zebra.Sdk.Settings.AlertDestination,System.Boolean,System.Boolean,System.String,System.Int32,System.Boolean,System.String)">
            <summary>
            Creates an instance of a PrinterAlert object, including the printer alert text.
            </summary>
            <param name="condition">The printer condition that will trigger the alert.</param>
            <param name="destination">The destination that the alert will be sent to.</param>
            <param name="onSet">If true, the alert will be triggered when the condition occurs.</param>
            <param name="onClear">If true, the alert will be triggered when the condition is cleared.</param>
            <param name="destinationAddress">The destination address, if the destination requires one.</param>
            <param name="port">The destination port, if the destination requires one.</param>
            <param name="quelling">If true, the alert is quelled.</param>
            <param name="alertText">The text received from the printer.</param>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterAlert.#ctor(Zebra.Sdk.Settings.AlertCondition,Zebra.Sdk.Settings.AlertDestination,System.String,System.Boolean,System.Boolean,System.String,System.Int32,System.Boolean,System.String)">
            <summary>
            Creates an instance of a PrinterAlert object, including a Set-Get-Do name and the printer alert text.
            </summary>
            <param name="condition">The printer condition that will trigger the alert.</param>
            <param name="destination">The destination that the alert will be sent to.</param>
            <param name="sgdName">If <c>condition</c> is <c>SGD_SET</c>, the name of the Set-Get-Do to be monitored.</param>
            <param name="onSet">If true, the alert will be triggered when the condition occurs.</param>
            <param name="onClear">If true, the alert will be triggered when the condition is cleared.</param>
            <param name="destinationAddress">The destination address, if the destination requires one.</param>
            <param name="port">The destination port, if the destination requires one.</param>
            <param name="quelling">If true, the alert is quelled.</param>
            <param name="alertText">The text received from the printer.</param>
        </member>
        <member name="P:Zebra.Sdk.Printer.PrinterAlert.DestinationAsSgdString">
            <summary>
            Return the <c>string</c> representation of the alert destination for Set-Get-Do.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Printer.PrinterAlert.ConditionName">
            <summary>
            Return the <c>AlertCondition</c> of the alert.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Printer.PrinterAlert.Condition">
            <summary>
            Gets the current alert condition.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Printer.PrinterAlert.OnSet">
            <summary>
            Return true if the alert is fired when 'set'.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Printer.PrinterAlert.OnClear">
            <summary>
            Return alert will be triggered on 'clear'.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Printer.PrinterAlert.SgdName">
            <summary>
            Return the <c>string</c> representation of the Set-Get-Do Name.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Printer.PrinterAlert.Destination">
            <summary>
            Return the <c>AlertDestination</c> used by the alert.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Printer.PrinterAlert.DestinationAddress">
            <summary>
            Return the destination where the alert should be sent, for example, an IP Address or an email address, depending 
            on the value of getDestinationAsSGDString.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Printer.PrinterAlert.Port">
            <summary>
            Return the destination port number where the alert should be sent.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Printer.PrinterAlert.Quelling">
            <summary>
            Return the quelling state of the alert.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Printer.PrinterAlert.AlertText">
            <summary>
            Return the text received from the printer.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Printer.PrinterLanguage">
            <summary>
            Enumeration of the various printer control languages supported by Zebra Printers.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterLanguage.ZPL">
            <summary>
            Printer control language ZPL
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterLanguage.CPCL">
            <summary>
            Printer control language CPCL
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterLanguage.LINE_PRINT">
            <summary>
            Printer control language line_print mode.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterLanguage.GetLanguage(System.String)">
            <summary>
            Converts the string name to the appropriate enum value.
            </summary>
            <remarks>
            The <c>name</c> parameter accepts the value returned from the printer's 'device.langauges' SGD.
            </remarks>
            <param name="name">The printer control language name (e.g.&#160;"zpl", "cpcl", or "line_print")</param>
            <returns>The printer language</returns>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language cannot be determined.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterLanguage.ToString">
            <summary>
            The name of the printer language - (e.g.&#160;"ZPL" or "CPCL").
            </summary>
            <returns>ZPL, CPCL, or LINE_PRINT</returns>
        </member>
        <member name="T:Zebra.Sdk.Printer.PrinterObjectProperties">
            <summary>
            Container for properties of a printer object.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterObjectProperties.drivePrefix">
            <summary>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterObjectProperties.fileName">
            <summary>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterObjectProperties.extension">
            <summary>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterObjectProperties.crc32">
            <summary>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterObjectProperties.fileSize">
            <summary>
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Printer.PrinterObjectProperties.DrivePrefix">
            <summary>
            Gets/sets the drive prefix with the trailing colon.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Printer.PrinterObjectProperties.FileName">
            <summary>
            Gets/sets the file name.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Printer.PrinterObjectProperties.Extension">
            <summary>
            Gets/sets the file extension.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Printer.PrinterObjectProperties.FullName">
            <summary>
            Gets the full name of the file on the printer.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Printer.PrinterObjectProperties.FileSize">
            <summary>
            Gets/sets the size of the file in bytes
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Printer.PrinterObjectProperties.CRC32">
            <summary>
            Gets/sets the 32-bit CRC value of the file.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Printer.PrinterReconnectionHandler">
            <summary>
            Interface definition for a callback to be invoked when a printer comes back online and has been rediscovered.
            </summary>
            <see cref="T:Zebra.Sdk.Comm.ConnectionReestablisher"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterReconnectionHandler.PrinterOnline(Zebra.Sdk.Printer.ZebraPrinterLinkOs,System.String)">
            <summary>
            Called when the printer is back online and has been rediscovered.
            </summary>
            <param name="printer">The printer object which came back online.</param>
            <param name="firmwareVersion">The new firmware version on the printer.</param>
        </member>
        <member name="T:Zebra.Sdk.Printer.PrinterStatus">
            <summary>
      A class used to obtain the status of a Zebra printer.
    </summary><example>
      Desktop
      <code source="../SdkApi_Test/Test/Zebra/Sdk/Printer/Examples/PrinterStatusExample.cs" />
    </example><example>
      Androidâ„¢
      <code source="../XamarinSdk/XamarinTest/XamarinTest.Android/Test/Zebra/Sdk/Printer/Examples/PrinterStatusExample.cs" />
    </example><example>
      iOS
      <code source="../XamarinSdk/XamarinTest/XamarinTest.iOS/Test/Zebra/Sdk/Printer/Examples/PrinterStatusExample.cs" />
    </example>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterStatus.printMode">
            <summary>
            The print mode. For CPCL printers this is always <see cref="F:Zebra.Sdk.Printer.ZplPrintMode.UNKNOWN"/>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterStatus.labelLengthInDots">
            <summary>
            The length of the label in dots. For CPCL printers this is always 0.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterStatus.numberOfFormatsInReceiveBuffer">
            <summary>
            The number of formats currently in the receive buffer of the printer. For CPCL printers this is always 0.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterStatus.labelsRemainingInBatch">
            <summary>
            The number of labels remaining in the batch. For CPCL printers this is always 0.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterStatus.isPartialFormatInProgress">
            <summary>
            <c>true</c> if there is a partial format in progress. For CPCL printers this is always <c>false</c>.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterStatus.isHeadCold">
            <summary>
            <c>true</c> if the head is cold. For CPCL printers this is always <c>false</c>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterStatus.isHeadOpen">
            <summary>
            <c>true</c> if the head is open.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterStatus.isHeadTooHot">
            <summary>
            <c>true</c> if the head is too hot. For CPCL printers this is always <c>false</c>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterStatus.isPaperOut">
            <summary>
            <c>true</c> if the paper is out.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterStatus.isRibbonOut">
            <summary>
            <c>true</c> if the ribbon is out.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterStatus.isReceiveBufferFull">
            <summary>
            <c>true</c> if the receive buffer is full. For CPCL printers this is always <c>false</c>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterStatus.isPaused">
            <summary>
            <c>true</c> if the printer is paused. For CPCL printers this is always <c>false</c>
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterStatus.isReadyToPrint">
            <summary>
            <c>true</c> if the printer reports back that it is ready to print
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterStatus.printerConnection">
            <summary>
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterStatus.UpdateStatus">
            <summary>
            </summary>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterStatus.#ctor(Zebra.Sdk.Comm.Connection)">
            <summary>
            Constructs a PrinterStatus instance that can be used to determine the status of a printer.
            </summary>
            <remarks>
            This will only query the printer's status upon creation. If the status needs to be updated see <see cref="M:Zebra.Sdk.Printer.ZebraPrinter.GetCurrentStatus"/>
            </remarks>
            <param name="printerConnection">Connection to the target printer</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterStatus.GetStatusFromPrinter">
            <summary>
            </summary>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="T:Zebra.Sdk.Printer.PrinterStatusMessages">
            <summary>
            This class is used to acquire a human readable string of the current errors/warnings stored in a
            <see cref="T:Zebra.Sdk.Printer.PrinterStatus"/> instance.
            </summary>
            <example><code source="../SdkApi_Test/Test/Zebra/Sdk/Printer/Examples/PrinterStatusMessagesExample.cs"/></example>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterStatusMessages.HEAD_OPEN_MSG">
            <summary>
            Message to indicate the head is open.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterStatusMessages.HEAD_TOO_HOT_MSG">
            <summary>
            Message to indicate the head is too hot.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterStatusMessages.PAPER_OUT_MSG">
            <summary>
            Message to indicate the paper is out.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterStatusMessages.RIBBON_OUT_MSG">
            <summary>
            Message to indicate the ribbon is out.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterStatusMessages.RECEIVE_BUFFER_FULL_MSG">
            <summary>
            Message to indicate the receive buffer is full.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterStatusMessages.PAUSE_MSG">
            <summary>
            Message to indicate printer is paused.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.PrinterStatusMessages.NULL_MSG">
            <summary>
            Message to indicate <c>printerStatus</c> is null.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterStatusMessages.#ctor(Zebra.Sdk.Printer.PrinterStatus)">
            <summary>
            Used to acquire a human readable string of the current errors/warnings stored in <c>printerStatus</c>
            </summary>
            <param name="printerStatus">an instance of <see cref="T:Zebra.Sdk.Printer.PrinterStatus"/> that will be used to acquire the human readable string
            of warnings/errors stored in <c>printerStatus</c></param>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterStatusMessages.GetStatusMessage">
            <summary>
            Used to acquire a human readable string of the current errors/warnings passed to this instance.
            </summary>
            <returns>A human readable string array of the current errors/warnings passed to this instance.</returns>
        </member>
        <member name="T:Zebra.Sdk.Printer.PrinterUtil">
            <summary>
      Numerous utilities to simplify printer operations.
    </summary><remarks>
      Androidâ„¢ USB connection not supported.
    </remarks><example>
      Desktop
      <code source="../SdkApi_Test/Test/Zebra/Sdk/Printer/Examples/PrinterUtilExample.cs" />
    </example><example>
      Androidâ„¢
      <code source="../XamarinSdk/XamarinTest/XamarinTest.Android/Test/Zebra/Sdk/Printer/Examples/PrinterUtilExample.cs" />
    </example><example>
      iOS
      <code source="../XamarinSdk/XamarinTest/XamarinTest.iOS/Test/Zebra/Sdk/Printer/Examples/PrinterUtilExample.cs" />
    </example>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.SendContents(System.String,System.String)">
            <summary>
            Send contents of <c>data</c> directly to the device specified via <c>connectionString</c> using UTF-8 encoding.
            </summary>
            <remarks>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="connectionString">The connection string.</param>
            <param name="data">Data to send to the printer.</param>
            <exception cref="T:System.IO.IOException">If there is an error encoding <c>data</c>.</exception>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.SendContents(System.String,System.String,System.String)">
            <summary>
            Send contents of <c>data</c> directly to the device specified via <c>connectionString</c> using <c>encoding</c>.
            </summary>
            <remarks>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="connectionString">The connection string.</param>
            <param name="data">Data to send to the printer.</param>
            <param name="encoding">A character-encoding name (eg. UTF-8).</param>
            <exception cref="T:System.IO.IOException">If there is an error encoding <c>data</c>.</exception>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.SendContents(System.String,System.IO.Stream)">
            <summary>
            Send contents of <c>data</c> directly to the device specified via <c>connectionString</c> using UTF-8 encoding.
            </summary>
            <remarks>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="connectionString">The connection string.</param>
            <param name="data">Data to send to the printer.</param>
            <exception cref="T:System.IO.IOException">If there is an error encoding <c>data</c>.</exception>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.SendContents(System.String,System.IO.Stream,System.String)">
            <summary>
            Send contents of <c>data</c> directly to the device specified via <c>connectionString</c> using <c>encoding</c>.
            </summary>
            <remarks>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="connectionString">The connection string.</param>
            <param name="data">Data to send to the printer.</param>
            <param name="encoding">A character-encoding name (eg. UTF-8).</param>
            <exception cref="T:System.IO.IOException">If there is an error encoding <c>data</c>.</exception>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.SendJSON(System.String,System.IO.Stream,System.String)">
            <summary>
            Send contents of <c>data</c> directly to the device specified via <c>connectionString</c> using <c>encoding</c>.
            </summary>
            <remarks>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="connectionString">The connection string.</param>
            <param name="data">Data to send to the printer.</param>
            <param name="encoding">A character-encoding name (eg. UTF-8).</param>
            <exception cref="T:System.IO.IOException">If there is an error encoding <c>data</c>.</exception>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.GetPortStatus(System.String)">
            <summary>
            Retrieves a list of currently open tcp ports on the printer.
            </summary>
            <remarks>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="connectionString">The connection string.</param>
            <returns>The port status.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language could not be determined.</exception>
            <exception cref="T:Zebra.Sdk.Printer.NotALinkOsPrinterException">This feature is only available on Link-OS&#8482; printers.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.GetOdometerStatus(System.String)">
            <summary>
            Retrieves status of the printer odometer which includes the total print length, head clean counter, label dot
            length, head new, latch open counter, and both user resettable counters.
            </summary>
            <remarks>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="connectionString">The connection string.</param>
            <returns>The odometer status.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language could not be determined.</exception>
            <exception cref="T:Zebra.Sdk.Printer.NotALinkOsPrinterException">This feature is only available on Link-OS&#8482; printers.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.GetPrinterStatus(System.String)">
            <summary>
            Retrieves status of the printer which includes any error messages currently set along with the number of labels
            remaining in queue, number of labels remaining in batch, and whether or not a label is currently being processed.
            </summary>
            <remarks>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="connectionString">The connection string.</param>
            <returns>The printer status.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language could not be determined.</exception>
            <exception cref="T:Zebra.Sdk.Printer.NotALinkOsPrinterException">This feature is only available on Link-OS&#8482; printers.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.QuickStatus(System.String)">
            <summary>
            Retrieves the quick status of the printer.
            </summary>
            <remarks>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="connectionString">The connection string.</param>
            <returns>Highest level error or &quot;Ready to Print&quot;.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language could not be determined.</exception>
            <exception cref="T:Zebra.Sdk.Printer.NotALinkOsPrinterException">This feature is only available on Link-OS&#8482; printers.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.SetClock(System.String,System.String)">
            <summary>
            Set the RTC time and date on the printer.
            </summary>
            <remarks>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="connectionString">The connection string.</param>
            <param name="dateTime">Format MM-dd-yyyy HH:mm:ss.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language could not be determined.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the format of <c>dateTime</c> is invalid.</exception>
            <exception cref="T:Zebra.Sdk.Printer.NotALinkOsPrinterException">This feature is only available on Link-OS&#8482; printers.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.DeleteFileReportDeleted(System.String,System.String)">
            <summary>
            Deletes file(s) from the printer and reports what files were actually removed.
            </summary>
            <remarks>
            The <c>filePath</c> may also contain wildcards.<br/>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="connectionString">The connection string. (May be null)</param>
            <param name="filePath">The location of the file on the printer. Wildcards are also accepted. (e.g. "E:FORMAT.ZPL", "E:*.*")</param>
            <returns>An array of the files which were deleted.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language could not be determined.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the format of <c>dateTime</c> is invalid.</exception>
            <exception cref="T:Zebra.Sdk.Printer.NotALinkOsPrinterException">This feature is only available on Link-OS&#8482; printers.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.DeleteFile(System.String,System.String)">
            <summary>
            Deletes file(s) from the printer and reports what files were actually removed.
            </summary>
            <remarks>
            The <c>filePath</c> may also contain wildcards.<br/>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="connectionString">The connection string. (May be null)</param>
            <param name="filePath">The location of the file on the printer. Wildcards are also accepted. (e.g. "E:FORMAT.ZPL", "E:*.*")</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language could not be determined.</exception>
            <exception cref="T:Zebra.Sdk.Printer.NotALinkOsPrinterException">This feature is only available on Link-OS&#8482; printers.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.ListFiles(System.String,System.String)">
            <summary>
            Retrieves the names of the files which are stored on the device.
            </summary>
            <remarks>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="connectionString">The connection string. (May be null)</param>
            <param name="filter">Filter for returned files. (e.g. "E:*.ZPL", "*:*.*", "R:MYFILE.*")</param>
            <returns>List of file names on the printer.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language could not be determined.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If there is an error parsing the directory data returned by the device.</exception>
            <exception cref="T:Zebra.Sdk.Printer.NotALinkOsPrinterException">This feature is only available on Link-OS&#8482; printers.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.GetObjectFromPrinter(System.String,System.String)">
            <summary>
            Retrieves a file from the printer's file system and returns the contents of that file as a byte[].
            </summary>
            <remarks>
            Will retrieve the following file extensions: .FNT, .ZPL, .GRF, .DAT, .BAS, .STO, .PNG, .LBL, .TTF, .PCX, .BMP, .IMG, .TTE,
            .WML, .CSV, .HTM, .BAE, .TXT.<br/>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="connectionString">The connection string.</param>
            <param name="filePathOnPrinter">File to retrieve. (e.g. "R:MYFILE.PNG")</param>
            <returns>File contents.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language could not be determined.</exception>
            <exception cref="T:Zebra.Sdk.Printer.NotALinkOsPrinterException">This feature is only available on Link-OS&#8482; printers.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the filename is invalid or does not exist.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.GetObjectFromPrinter(System.IO.Stream,System.String,System.String)">
            <summary>
            Retrieves a file from the printer's file system and returns the contents of that file as a byte[].
            </summary>
            <remarks>
            Will retrieve the following file extensions: .FNT, .ZPL, .GRF, .DAT, .BAS, .STO, .PNG, .LBL, .TTF, .PCX, .BMP, .IMG, .TTE,
            .WML, .CSV, .HTM, .BAE, .TXT.<br/>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="destinationStream">Stream to receive file contents.</param>
            <param name="connectionString">The connection string.</param>
            <param name="filePathOnPrinter">The file to retrieve. (e.g. "R:MYFILE.PNG")</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language could not be determined.</exception>
            <exception cref="T:Zebra.Sdk.Printer.NotALinkOsPrinterException">This feature is only available on Link-OS&#8482; printers.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the filename is invalid or does not exist.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.GetObjectFromPrinterViaFtp(System.String,System.String,System.String)">
            <summary>
            Retrieves a file from the printer's file system and returns the contents of that file as a byte[].
            </summary>
            <remarks>
            Will retrieve the following file extensions: .FNT, .ZPL, .GRF, .DAT, .BAS, .STO, .PNG, .LBL, .TTF, .PCX, .BMP, .IMG, .TTE,
            .WML, .CSV, .HTM, .BAE, .TXT.<br/>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="connectionString">The connection string.</param>
            <param name="filePathOnPrinter">File to retrieve. (e.g. "R:MYFILE.PNG")</param>
            <param name="ftpPassword">Password to use for ftp, if null a default password will be used.</param>
            <returns>File contents.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device, or the ftp password is not correct.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language could not be determined.</exception>
            <exception cref="T:Zebra.Sdk.Printer.NotALinkOsPrinterException">This feature is only available on Link-OS&#8482; printers.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the filename is invalid or does not exist.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.GetObjectFromPrinterViaFtp(System.IO.Stream,System.String,System.String,System.String)">
            <summary>
            Retrieves a file from the printer's file system and returns the contents of that file as a byte[].
            </summary>
            <remarks>
            Will retrieve the following file extensions: .FNT, .ZPL, .GRF, .DAT, .BAS, .STO, .PNG, .LBL, .TTF, .PCX, .BMP, .IMG, .TTE,
            .WML, .CSV, .HTM, .BAE, .TXT.<br/>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="destination">Stream to receive the file contents.</param>
            <param name="connectionString">The connection string.</param>
            <param name="filePathOnPrinter">File to retrieve. (e.g. "R:MYFILE.PNG")</param>
            <param name="ftpPassword">Password to use for ftp, if null a default password will be used.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device, or the ftp password is not correct.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language could not be determined.</exception>
            <exception cref="T:Zebra.Sdk.Printer.NotALinkOsPrinterException">This feature is only available on Link-OS&#8482; printers.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the filename is invalid or does not exist.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.UpdateFirmware(System.String,System.String,System.Int64)">
            <summary>
            Update the printer firmware.
            </summary>
            <remarks>
            <a href="http://www.zebra.com/firmware">Download Firmware Here</a><br/>
            See <a href="../../../../zebra/sdk/comm/ConnectionBuilder">ConnectionBuilder</a> for the format of <c>connection</c>
            </remarks>
            <param name="connection">The connection string.</param>
            <param name="firmwareFilePath">File path of firmware file.</param>
            <param name="timeout">Timeout in milliseconds. The minimum allowed timeout is 10 minutes (600000ms) due to the need to
            reset the printer after flashing the firmware. If a timeout value less than the minimum is provided, the minimum
            will be used instead.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the connection can not be opened or is closed prematurely.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language could not be determined.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If an invalid firmware file is specified for the printer.</exception>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException">If an error occurs while waiting for the printer to come back online.</exception>
            <exception cref="T:System.TimeoutException">If the maximum timeout is reached prior to the printer coming back online with the new
            firmware.</exception>
            <exception cref="T:System.IO.FileNotFoundException">If the firmware file cannot be found or cannot be opened.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.ConvertGraphic(System.String,Zebra.Sdk.Graphics.ZebraImageI,System.IO.Stream)">
            <summary>
            Encodes supplied image in either ZPL or CPCL after dithering and resizing.
            </summary>
            <param name="filePathOnPrinter">The printer file path you wish to store the image to.</param>
            <param name="image">ZebraImage to be dithered and resized.</param>
            <param name="convertedGraphicOutputStream">Stream to store encoded image data.</param>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the file type is not supported or an invalid image is supplied.</exception>
            <exception cref="T:System.IO.IOException">Could not read/write to file.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.ConvertGraphic(System.String,Zebra.Sdk.Graphics.ZebraImageI,System.Int32,System.Int32,System.IO.Stream)">
            <summary>
            Encodes supplied image in either ZPL or CPCL after dithering and resizing.
            </summary>
            <param name="filePathOnPrinter">The printer file path you wish to store the image to.</param>
            <param name="image">ZebraImage to be dithered and resized.</param>
            <param name="width">Width of the resulting image. If 0 the image is not resized.</param>
            <param name="height">Height of the resulting image. If 0 the image is not resized.</param>
            <param name="convertedGraphicOutputStream">Stream to store converted image data encoded with the printers native
            language.</param>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the file type is not supported or an invalid image is supplied.</exception>
            <exception cref="T:System.IO.IOException">Could not read/write to file.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.CreateProfile(System.String,System.String)">
            <summary>
            Create a profile of your printer's settings, alerts, and files for cloning to other printers.
            </summary>
            <remarks>
            A profile contains setting values which can be used to clone another printer to match the original configuration.
            Some settings (such as I.P.address) which could conflict with the original printer will not be contained in the profile<br/>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="connectionString">The connection string.</param>
            <param name="profilePath">The location of where to store the profile.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language could not be determined.</exception>
            <exception cref="T:System.IO.IOException">If there is an issue creating the profile.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">Could not interpret the response from the printer.</exception>
            <exception cref="T:Zebra.Sdk.Printer.NotALinkOsPrinterException">This feature is only available on Link-OS&#8482; printers.</exception>
            <see cref="M:Zebra.Sdk.Printer.ProfileUtil.CreateProfile(System.String)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.CreateBackup(System.String,System.String)">
            <summary>
            Create a backup of your printer's settings, alerts, and files.
            </summary>
            <remarks>
            A backup contains a snapshot of all pertinent settings to fully restore your printer.<br/>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="connectionString">The connection string.</param>
            <param name="profilePath">The location of where to store the profile. The extension must be .zprofile; if it is not, the
            method will change it to.zprofile for you.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language could not be determined.</exception>
            <exception cref="T:System.IO.IOException">If there is an issue creating the profile.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">Could not interpret the response from the printer.</exception>
            <exception cref="T:Zebra.Sdk.Printer.NotALinkOsPrinterException">This feature is only available on Link-OS&#8482; printers.</exception>
            <see cref="M:Zebra.Sdk.Printer.ProfileUtil.CreateBackup(System.String)"/>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.LoadProfile(System.String,System.String,Zebra.Sdk.Printer.FileDeletionOption)">
            <summary>
            Takes settings, alerts, and files from a profile, and applies them to a printer.
            </summary>
            <remarks>
            Before doing so, it deletes the files described by <c>filesToDelete</c> from the printer.<br/>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="connectionString">The connection string.</param>
            <param name="profilePath">Path to the profile to load. (e.g. /home/user/profile.zprofile)</param>
            <param name="filesToDelete">An enum describing which files to delete.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language could not be determined.</exception>
            <exception cref="T:System.IO.IOException">If there is an issue creating the profile.</exception>
            <exception cref="T:Zebra.Sdk.Printer.NotALinkOsPrinterException">This feature is only available on Link-OS&#8482; printers.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.LoadProfile(System.String,System.String,Zebra.Sdk.Printer.FileDeletionOption,System.Boolean)">
            <summary>
            Takes settings, alerts, and files from a profile, and applies them to a printer.
            </summary>
            <remarks>
            Before doing so, it deletes the files described by <c>filesToDelete</c> from the printer.<br/>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="connectionString">The connection string.</param>
            <param name="profilePath">Path to the profile to load. (e.g. /home/user/profile.zprofile)</param>
            <param name="filesToDelete">An enum describing which files to delete.</param>
            <param name="isVerbose">Increases the amount of detail presented to the user.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language could not be determined.</exception>
            <exception cref="T:System.IO.IOException">If there is an issue creating the profile.</exception>
            <exception cref="T:Zebra.Sdk.Printer.NotALinkOsPrinterException">This feature is only available on Link-OS&#8482; printers.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.LoadBackup(System.String,System.String)">
            <summary>
            Takes settings, alerts, and files from a backup, and applies them to a printer.
            </summary>
            <remarks>
            This method will also delete all files on your printer before applying the backup.<br/>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="connectionString">The connection string.</param>
            <param name="backupPath">Path to the profile to load. (e.g. /home/user/profile.zprofile)</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language could not be determined.</exception>
            <exception cref="T:System.IO.IOException">If there is an issue creating the profile.</exception>
            <exception cref="T:Zebra.Sdk.Printer.NotALinkOsPrinterException">This feature is only available on Link-OS&#8482; printers.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.LoadBackup(System.String,System.String,System.Boolean)">
            <summary>
            Takes settings, alerts, and files from a backup, and applies them to a printer.
            </summary>
            <remarks>
            This method will also delete all files on your printer before applying the backup.<br/>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="connectionString">The connection string.</param>
            <param name="backupPath">Path to the profile to load. (e.g. /home/user/profile.zprofile)</param>
            <param name="isVerbose">Increases the amount of detail presented to the user.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language could not be determined.</exception>
            <exception cref="T:System.IO.IOException">If there is an issue creating the profile.</exception>
            <exception cref="T:Zebra.Sdk.Printer.NotALinkOsPrinterException">This feature is only available on Link-OS&#8482; printers.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.StoreFile(System.String,System.String,System.String)">
            <summary>
            Stores the file on the printer at the specified location and name using any required file wrappers.
            </summary>
            <remarks>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="connectionString">The connection string.</param>
            <param name="filePath">The path of the file to store.</param>
            <param name="remoteName">The path on the printer.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language could not be determined.</exception>
            <exception cref="T:System.IO.IOException">If there is an issue storing the file.</exception>
            <exception cref="T:Zebra.Sdk.Printer.NotALinkOsPrinterException">This feature is only available on Link-OS&#8482; printers.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If there is an issue storing the file.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.ResetPrinter(System.String)">
            <summary>
            Resets the specified printer.
            </summary>
            <remarks>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="connectionString">The connection string.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language could not be determined.</exception>
            <exception cref="T:Zebra.Sdk.Printer.NotALinkOsPrinterException">This feature is only available on Link-OS&#8482; printers.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.ResetNetwork(System.String)">
            <summary>
            Resets the network of the specified printer.
            </summary>
            <remarks>
            Usually performed to enable changed network settings to take effect.<br/>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="connectionString">The connection string.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language could not be determined.</exception>
            <exception cref="T:Zebra.Sdk.Printer.NotALinkOsPrinterException">This feature is only available on Link-OS&#8482; printers.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.RestorePrinterDefaults(System.String)">
            <summary>
            Restores the printer's settings to their factory default configuration.
            </summary>
            <remarks>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="connectionString">The connection string.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language could not be determined.</exception>
            <exception cref="T:Zebra.Sdk.Printer.NotALinkOsPrinterException">This feature is only available on Link-OS&#8482; printers.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.RestoreNetworkDefaults(System.String)">
            <summary>
            Restores the printer's network settings to their factory default configuration.
            </summary>
            <remarks>
            Use caution when issuing this command because you may lose connectivity with your printer if your network requires non-default settings.<br/>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="connectionString">The connection string.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language could not be determined.</exception>
            <exception cref="T:Zebra.Sdk.Printer.NotALinkOsPrinterException">This feature is only available on Link-OS&#8482; printers.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.PrintConfigLabel(System.String)">
            <summary>
            Causes the specified printer to print a configuration label.
            </summary>
            <remarks>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="connectionString">The connection string.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language could not be determined.</exception>
            <exception cref="T:Zebra.Sdk.Printer.NotALinkOsPrinterException">This feature is only available on Link-OS&#8482; printers.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.PrintNetworkConfigLabel(System.String)">
            <summary>
            Causes the specified printer to print a network configuration label.
            </summary>
            <remarks>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="connectionString">The connection string.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language could not be determined.</exception>
            <exception cref="T:Zebra.Sdk.Printer.NotALinkOsPrinterException">This feature is only available on Link-OS&#8482; printers.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.PrintDirectoryLabel(System.String)">
            <summary>
            Causes the specified printer to print a directory listing of all the files saved on the printer.
            </summary>
            <remarks>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="connectionString">The connection string.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language could not be determined.</exception>
            <exception cref="T:Zebra.Sdk.Printer.NotALinkOsPrinterException">This feature is only available on Link-OS&#8482; printers.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.GetSettingsFromPrinter(System.String)">
            <summary>
            Retrieve all settings and their attributes from the specified printer.
            </summary>
            <remarks>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of <c>connectionString</c>.
            </remarks>
            <param name="connectionString">The connection string.</param>
            <returns>A map of setting names versus Setting objects from the printer specified in the connection string.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error connecting to the device.</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language could not be determined.</exception>
            <exception cref="T:Zebra.Sdk.Printer.NotALinkOsPrinterException">This feature is only available on Link-OS&#8482; printers.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the settings could not be retrieved.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.PrinterUtil.GetCurrentStatus(Zebra.Sdk.Comm.Connection,Zebra.Sdk.Printer.PrinterLanguage)">
            <summary>
            Returns a new instance of <c>PrinterStatus</c> that can be used to determine the status of a printer.
            </summary>
            <remarks>
            Each invocation of this method will result in a query of the connected printer. If more than one status value is to be
            read, it is recommended that a copy of <c>PrinterStatus</c> is stored locally.<br/><br/>
            This method must be invoked again to retrieve the most up-to-date status of the printer. The <see cref="T:Zebra.Sdk.Printer.PrinterStatus"/> 
            object will only query the printer upon creation.<br/>
            Some Mobile printers (including the MZ series printers) will not communicate if the printer is not ready to print.
            On these printers, status information is not available when, for example, the printer is out of paper. This method 
            will throw a <see cref="T:Zebra.Sdk.Comm.ConnectionException"/> if it is called when the printer cannot communicate.
            </remarks>
            <param name="printerConnection">Connection to the printer.</param>
            <param name="language">Printer control language to be used.</param>
            <returns>A new instance of <c>PrinterStatus</c>.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an issue communicating with the printer (e.g.\u00a0the connection is not
            open.)</exception>
        </member>
        <member name="T:Zebra.Sdk.Printer.ProfileUtil">
            <summary>
      Defines functions used for creating and applying profiles to a Zebra printer.
    </summary><example>
      Desktop
      <code source="../SdkApi_Test/Test/Zebra/Sdk/Printer/Examples/ProfileUtilExample.cs" />
    </example><example>
      Androidâ„¢
      <code source="../XamarinSdk/XamarinTest/XamarinTest.Android/Test/Zebra/Sdk/Printer/Examples/ProfileUtilExample.cs" />
    </example><example>
      iOS
      <code source="../XamarinSdk/XamarinTest/XamarinTest.iOS/Test/Zebra/Sdk/Printer/Examples/ProfileUtilExample.cs" />
    </example>
        </member>
        <member name="M:Zebra.Sdk.Printer.ProfileUtil.CreateProfile(System.String)">
            <summary>
            Create a profile of your printer's settings, alerts, and files for cloning to other printers.
            </summary>
            <remarks>
            A profile contains setting values which can be used to clone another printer to match the original 
            configuration. Some settings (such as I.P.address) which could conflict with the original printer will 
            not be contained in the profile.
            </remarks>
            <param name="pathToOutputFile">Path on your local machine where you want to save the profile. 
            (e.g. /home/user/profile.zprofile). The extension must be.zprofile; if it is not, the method will 
            change it to .zprofile for you.</param>
            <exception cref="T:System.IO.IOException">If the output file could not be created.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">Could not interpret the response from the printer.</exception>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <see cref="M:Zebra.Sdk.Printer.ProfileUtil.LoadProfile(System.String)"/> for loading a profile to another printer
        </member>
        <member name="M:Zebra.Sdk.Printer.ProfileUtil.CreateProfile(System.IO.Stream)">
            <summary>
            Create a profile of your printer's settings, alerts, and files for cloning to other printers.
            </summary>
            <remarks>
            A profile contains setting values which can be used to clone another printer to match the original 
            configuration. Some settings (such as I.P.address) which could conflict with the original printer will 
            not be contained in the profile.
            </remarks>
            <param name="profileDestinationStream">The destination stream where you want to write the profile.</param>
            <exception cref="T:System.IO.IOException">If the output file could not be created.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">Could not interpret the response from the printer.</exception>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.ProfileUtil.CreateBackup(System.String)">
            <summary>
            Save a backup of your printer's settings, alerts, and files for later restoration.
            </summary>
            <remarks>
            A backup contains a snapshot of all pertinent settings to fully restore your printer.
            </remarks>
            <param name="pathToOutputFile">Path on your local machine where you want to save the backup. 
            (e.g. /home/user/profile.zprofile). The extension must be.zprofile; if it is not, the method will 
            change it to .zprofile for you.</param>
            <exception cref="T:System.IO.IOException">If the output file could not be created.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">Could not interpret the response from the printer.</exception>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <see cref="M:Zebra.Sdk.Printer.ProfileUtil.LoadProfile(System.String)"/> for loading the backup file to another printer
        </member>
        <member name="M:Zebra.Sdk.Printer.ProfileUtil.LoadProfile(System.String)">
            <summary>
            Takes settings, alerts, and files from a profile, and applies them to a printer.
            </summary>
            <param name="pathToProfile">Path to the profile to load. (e.g. /home/user/profile.zprofile)</param>
            <exception cref="T:System.IO.IOException">If the profile does not exist or could not be read.</exception>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.ProfileUtil.LoadProfile(System.String,Zebra.Sdk.Printer.FileDeletionOption,System.Boolean)">
            <summary>
            Takes settings, alerts, and files from a profile, and applies them to a printer.
            </summary>
            <remarks>
            Before doing so, it deletes the files described by <c>filesToDelete</c> from the printer.
            </remarks>
            <param name="pathToProfile">Path to the profile to load. (e.g. /home/user/profile.zprofile)</param>
            <param name="filesToDelete">An enum describing which files to delete.</param>
            <param name="isVerbose">Increases the amount of detail presented to the user when loading firmware from the profile</param>
            <exception cref="T:System.IO.IOException">If the profile does not exist or could not be read.</exception>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.ProfileUtil.LoadBackup(System.String)">
            <summary>
            Takes settings, alerts, and files from a backup, and applies them to a printer.
            </summary>
            <remarks>
            This method will also delete all files on your printer before applying the backup.
            </remarks>
            <param name="pathToBackup">Path to the profile to load. (e.g. /home/user/profile.zprofile)</param>
            <exception cref="T:System.IO.IOException">If the profile does not exist or could not be read.</exception>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.ProfileUtil.LoadBackup(System.String,System.Boolean)">
            <summary>
            Takes settings, alerts, and files from a backup, and applies them to a printer.
            </summary>
            <remarks>
            his method will also delete all files on your printer before applying the backup.
            </remarks>
            <param name="pathToBackup">Path to the profile to load. (e.g. /home/user/profile.zprofile)</param>
            <param name="isVerbose">Increases the amount of detail presented to the user when loading firmware from the profile</param>
            <exception cref="T:System.IO.IOException">If the profile does not exist or could not be read.</exception>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
        </member>
        <member name="T:Zebra.Sdk.Printer.SettingsSetter">
            <summary>
            A utility class used to wrap with a map and send settings commands to a connection. 
            </summary>
            <remarks>
            Settings commands are accepted by Link-OS printers, version 1.0 and higher.
            </remarks>
            <example><code source="../SdkApi_Test/Test/Zebra/Sdk/Printer/Examples/SettingsSetterExample.cs"/></example>
        </member>
        <member name="M:Zebra.Sdk.Printer.SettingsSetter.Process(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sends the <c>settingsToSet</c> to the <c>destinationDevice</c> and then returns the updated setting values.
            </summary>
            <remarks> Due to the setting verification and validation, additional time and data traffic will be needed for each 
            <c>SettingsSetter</c> Process call. It is recommended to bundle all changing settings into one map and one 
            method call to reduce this overhead.
            </remarks>
            <param name="destinationDevice">The connection string.</param>
            <param name="settingsToSet">The settings map to send to the printer.</param>
            <returns>The settings' values after the map has been sent to the printer.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting could not be set or retrieved.</exception>
        </member>
        <member name="T:Zebra.Sdk.Printer.SGD">
            <summary>
            A utility class used to wrap and send SGD commands to a connection.
            </summary>
            <example><code source="../SdkApi_Test/Test/Zebra/Sdk/Printer/Examples/SGDExample.cs"/></example>
        </member>
        <member name="M:Zebra.Sdk.Printer.SGD.SET(System.String,System.Int32,Zebra.Sdk.Comm.Connection)">
            <summary>
            Constructs an SGD SET command and sends it to the printer.
            </summary>
            <remarks>
            This method will not wait for a response from the printer.If the SGD SET command returns a response, the caller 
            is responsible for reading the data off of the connection.If a response is expected, consider using the analogous 
            <see cref="M:Zebra.Sdk.Printer.SGD.DO(System.String,System.String,Zebra.Sdk.Comm.Connection)"/> command.
            </remarks>
            <param name="setting">the SGD setting</param>
            <param name="value">the setting's value</param>
            <param name="printerConnection">the connection to send the command to</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">if an I/O error occurs</exception>
            <see cref="M:Zebra.Sdk.Printer.SGD.SET(System.String,System.String,Zebra.Sdk.Comm.Connection)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.SGD.SET(System.String,System.String,Zebra.Sdk.Comm.Connection)">
            <summary>
            Constructs an SGD SET command and sends it to the printer.
            </summary>
            <remarks>
            This method will not wait for a response from the printer. If the SGD SET command returns a response, the caller is 
            responsible for reading the data off of the connection. If a response is expected, consider using the analogous 
            <see cref="M:Zebra.Sdk.Printer.SGD.DO(System.String,System.String,Zebra.Sdk.Comm.Connection)"/> command.
            </remarks>
            <param name="setting"></param>
            <param name="value"></param>
            <param name="printerConnection"></param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">if an I/O error occurs</exception>
            <see cref="M:Zebra.Sdk.Printer.SGD.SET(System.String,System.Int32,Zebra.Sdk.Comm.Connection)"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.SGD.GET(System.String,Zebra.Sdk.Comm.Connection)">
            <summary>
            Constructs an SGD GET command and sends it to the printer.
            </summary>
            <remarks>
            This method waits for a maximum of <see cref="P:Zebra.Sdk.Comm.Connection.MaxTimeoutForRead"/> milliseconds for any data to be received. Once some data has been 
            received it waits until no more data is available within <see cref="P:Zebra.Sdk.Comm.Connection.TimeToWaitForMoreData"/> milliseconds. This method returns the 
            SGD value associated with <c>setting</c> without the surrounding quotes.
            </remarks>
            <param name="setting">the SGD setting</param>
            <param name="printerConnection">the connection to send the command to</param>
            <returns>the setting's value</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">if an I/O error occurs</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.SGD.GET(System.String,Zebra.Sdk.Comm.Connection,System.Int32,System.Int32)">
            <summary>
            Constructs an SGD GET command and sends it to the printer.
            </summary>
            <remarks>
            This method waits for a maximum of <c>maxTimeoutForRead</c> milliseconds for any data to be received.Once some data has been received it 
            waits until no more data is available within <c>timeToWaitForMoreData</c> milliseconds. This method returns the SGD value associated 
            with <c>setting</c> without the surrounding quotes.
            </remarks>
            <param name="setting">the SGD setting</param>
            <param name="printerConnection">the connection to send the command to</param>
            <param name="maxTimeoutForRead">the maximum time, in milliseconds, to wait for a response from the printer</param>
            <param name="timeToWaitForMoreData">the maximum time, in milliseconds, to wait in-between reads after the initial data is received</param>
            <returns>the setting's value</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">if an I/O error occurs</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.SGD.DO(System.String,System.String,Zebra.Sdk.Comm.Connection)">
            <summary>
            Constructs an SGD DO command and sends it to the printer.
            </summary>
            <remarks>
            This method waits for a maximum of <see cref="P:Zebra.Sdk.Comm.Connection.MaxTimeoutForRead"/> milliseconds for any data to be received. Once some data has been 
            received it waits until no more data is available within <see cref="P:Zebra.Sdk.Comm.Connection.TimeToWaitForMoreData"/> milliseconds. This method returns the 
            SGD value associated with <c>setting</c> without the surrounding quotes.
            </remarks>
            <param name="setting">the SGD setting</param>
            <param name="value">the setting's value</param>
            <param name="printerConnection">the connection to send the command to</param>
            <returns>The response from the SGD DO command</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">if an I/O error occurs</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.SGD.DO(System.IO.Stream,System.String,System.String,Zebra.Sdk.Comm.Connection)">
            <summary>
            Constructs an SGD DO command and sends it to the printer.
            </summary>
            <remarks>
            This method waits for a maximum of <see cref="P:Zebra.Sdk.Comm.Connection.MaxTimeoutForRead"/> milliseconds for any data to be received. Once some data has been 
            received it waits until no more data is available within <see cref="P:Zebra.Sdk.Comm.Connection.TimeToWaitForMoreData"/> milliseconds. This method write the SGD
            value associated with <c>setting</c>, without the surrounding quotes, to <c>responseData</c>.
            </remarks>
            <param name="responseData">output stream to receive the response.</param>
            <param name="setting">the SGD setting</param>
            <param name="value">the setting's value</param>
            <param name="printerConnection">the connection to send the command to</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">if an I/O error occurs</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.SGD.DO(System.String,System.String,Zebra.Sdk.Comm.Connection,System.Int32,System.Int32)">
            <summary>
            Constructs an SGD DO command and sends it to the printer.
            </summary>
            <remarks>
            This method waits for a maximum of <see cref="P:Zebra.Sdk.Comm.Connection.MaxTimeoutForRead"/> milliseconds for any data to be received. Once some data has been 
            received it waits until no more data is available within <see cref="P:Zebra.Sdk.Comm.Connection.TimeToWaitForMoreData"/> milliseconds. This method returns the 
            SGD value associated with <c>setting</c> without the surrounding quotes.
            </remarks>
            <param name="setting">the SGD setting</param>
            <param name="value">the setting's value</param>
            <param name="printerConnection">the connection to send the command to</param>
            <param name="maxTimeoutForRead">the maximum time, in milliseconds, to wait for a response from the printer</param>
            <param name="timeToWaitForMoreData">the maximum time, in milliseconds, to wait in-between reads after the initial data is received</param>
            <returns>The response from the SGD DO command</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">if an I/O error occurs</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.SGD.DO(System.IO.Stream,System.String,System.String,Zebra.Sdk.Comm.Connection,System.Int32,System.Int32)">
            <summary>
            Constructs an SGD DO command and sends it to the printer.
            </summary>
            <remarks>
            This method waits for a maximum of <c>maxTimeoutForRead</c> milliseconds for any data to be received. Once some data has been 
            received it waits until no more data is available within <c>timeToWaitForMoreData</c> milliseconds. This method write the SGD
            value associated with <c>setting</c> without the surrounding quotes.
            </remarks>
            <param name="responseData">output stream to receive the response.</param>
            <param name="setting">the SGD setting</param>
            <param name="value">the setting's value</param>
            <param name="printerConnection">the connection to send the command to</param>
            <param name="maxTimeoutForRead">the maximum time, in milliseconds, to wait for a response from the printer</param>
            <param name="timeToWaitForMoreData">the maximum time, in milliseconds, to wait in-between reads after the initial data is received</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">if an I/O error occurs</exception>
        </member>
        <member name="T:Zebra.Sdk.Printer.SGD.QuoteRemovingOutputStream">
            <summary>
            A utility class used to remove quotes from an output stream
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.SGD.QuoteRemovingOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Constructs a <c>QuoteRemovingOutputStream</c>
            </summary>
            <param name="outputStream"></param>
        </member>
        <member name="T:Zebra.Sdk.Printer.SnmpException">
            <summary>
            Signals that an error has occurred when attempting to communicate with SNMP.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.SnmpException.#ctor(System.String)">
            <summary>
            Constructs an <c>SnmpException</c> with <c>message</c> as the detailed error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="T:Zebra.Sdk.Printer.SnmpPrinter">
            <summary>
            An instance of an SNMP only Zebra printer.
            </summary>
            <remarks>The printer does not make a raw port connection.</remarks>
            <example><code source="../SdkApi_Test/Test/Zebra/Sdk/Printer/Examples/SnmpPrinterExample.cs"/></example>
        </member>
        <member name="M:Zebra.Sdk.Printer.SnmpPrinter.#ctor(System.String)">
            <summary>
            Creates an instance of a Zebra printer which is limited to only SNMP operations.
            </summary>
            <remarks>
            The SNMP get and set community names default to "public". If you wish to use other community names, use
            <see cref="M:Zebra.Sdk.Printer.SnmpPrinter.#ctor(System.String,System.String,System.String)"/>.
            </remarks>
            <param name="address">The IP Address or DNS Hostname.</param>
            <exception cref="T:Zebra.Sdk.Printer.SnmpException">If there was an exception communicating over SNMP.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.SnmpPrinter.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates an instance of a Zebra printer, with the given community names, which is limited to only SNMP operations.
            </summary>
            <param name="address">The IP Address or DNS Hostname.</param>
            <param name="getCommunityName">SNMP get community name.</param>
            <param name="setCommunityName">SNMP set community name.</param>
            <exception cref="T:Zebra.Sdk.Printer.SnmpException">If there was an exception communicating over SNMP.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.SnmpPrinter.GetConnection(System.String)">
            <summary>
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="P:Zebra.Sdk.Printer.SnmpPrinter.DiscoTimeoutInMSec">
            <summary>
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.SnmpPrinter.GetOidValue(System.String)">
            <summary>
            Gets the value of the specified <c>oid</c>.
            </summary>
            <param name="oid">Object identifier.</param>
            <returns>The value of the OID.</returns>
            <exception cref="T:Zebra.Sdk.Printer.SnmpException">If there was an exception communicating over SNMP.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.SnmpPrinter.SetOidValue(System.String,System.String)">
            <summary>
            Sets the value of the specified <c>oid</c> to <c>valueToSet</c>.
            </summary>
            <param name="oid">Object identifier.</param>
            <param name="valueToSet">The value to set the OID to.</param>
            <exception cref="T:Zebra.Sdk.Printer.SnmpException">If there was an exception communicating over SNMP</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.SnmpPrinter.SetOidValue(System.String,System.Int32)">
            <summary>
            Sets the value of the specified <c>oid</c> to <c>valueToSet</c>.
            </summary>
            <param name="oid">Object identifier.</param>
            <param name="valueToSet">The value to set the OID to.</param>
            <exception cref="T:Zebra.Sdk.Printer.SnmpException">If there was an exception communicating over SNMP</exception>
        </member>
        <member name="P:Zebra.Sdk.Printer.SnmpPrinter.CommunityNameGet">
            <summary>
            Gets the SNMP get community name.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Printer.SnmpPrinter.CommunityNameSet">
            <summary>
            Gets the SNMP set community name.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Printer.StorageInfo">
            <summary>
            A container class which holds information about various printer drives.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.StorageInfo.#ctor">
            <summary>
            Creates an empty <c>StorageInfo</c> container
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.StorageInfo.driveLetter">
            <summary>
            The drive's alphabetical identifier.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.StorageInfo.driveType">
            <summary>
            The type of drive. (e.g. flash, RAM)
            </summary>
            <see cref="T:Zebra.Sdk.Printer.DriveType"/>
        </member>
        <member name="F:Zebra.Sdk.Printer.StorageInfo.bytesFree">
            <summary>
            The number of bytes remaining on the drive.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.StorageInfo.isPersistent">
            <summary>
            Bool defining whether or not files persist across printer reboots.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Printer.TcpPortStatus">
            <summary>
            Class for describing the status of ports open on a Zebra printer.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.TcpPortStatus.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a container which describes the status of a specific port on a Zebra printer.
            </summary>
            <param name="printerPort">The printer's port.</param>
            <param name="portName">The name of the protocol used by the port.</param>
            <param name="remoteIpAddress">Remote IP connected to the port.</param>
            <param name="remotePort">Remote port number.</param>
            <param name="status">Port status.</param>
        </member>
        <member name="P:Zebra.Sdk.Printer.TcpPortStatus.PrinterPort">
            <summary>
            The port number open on the printer.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Printer.TcpPortStatus.PortName">
            <summary>
            The name of the protocol associated with that port, for example, HTTP for 80, FTP for 21.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Printer.TcpPortStatus.RemoteIpAddress">
            <summary>
            The remote IP connected to the printer's port, will be 0.0.0.0 if not connected.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Printer.TcpPortStatus.RemotePort">
            <summary>
            The port number of the remote connected to the printer, will be 0 if no connection.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Printer.TcpPortStatus.Status">
            <summary>
            The status of the printer's port, such as {@code LISTEN}, {@code ESTABLISHED}.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.TcpPortStatus.ToString">
            <summary>
            String description of the port status, prints as "PORT(NAME) REMOTE-IP:REMOTE-PORT STATUS"
            </summary>
            <returns>Description of the port status.</returns>
        </member>
        <member name="T:Zebra.Sdk.Printer.ToolsUtil">
            <summary>
            This is a utility class for performing printer actions. (Restore defaults, calibrate, etc.)
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.ToolsUtil.Calibrate">
            <summary>
            Sends the appropriate calibrate command to the printer.
            </summary>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.ToolsUtil.RestoreDefaults">
            <summary>
            Sends the appropriate restore defaults command to the printer.
            </summary>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.ToolsUtil.PrintConfigurationLabel">
            <summary>
            Sends the appropriate print configuration command to the printer.
            </summary>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.ToolsUtil.SendCommand(System.String)">
            <summary>
            Converts the specified command to bytes using the default charset and sends the bytes to the printer.
            </summary>
            <param name="command">The command to send to the printer.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.ToolsUtil.SendCommand(System.String,System.String)">
            <summary>
            Converts the specified command to bytes using the specified charset "encoding" and sends the bytes to the
            printer.
            </summary>
            <param name="command">The command to send to the printer.</param>
            <param name="encoding">A character-encoding name (eg. UTF-8).</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.ToolsUtil.Reset">
            <summary>
            Sends the appropriate reset command to the printer.
            </summary>
            <remarks>
            You should call <see cref="M:Zebra.Sdk.Comm.Connection.Close"/> after this method, as resetting the printer will terminate the connection.
            </remarks>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs.</exception>
            <example><code source="../SdkApi_Test/Test/Zebra/Sdk/Printer/Examples/ToolsUtilExample.cs"/></example>
        </member>
        <member name="T:Zebra.Sdk.Printer.ToolsUtilLinkOs">
            <summary>
            Utility class for performing Link-OS&#8482; printer actions.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.ToolsUtilLinkOs.RestoreNetworkDefaults">
            <summary>
            Send the restore network defaults command to the printer.
            </summary>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.ToolsUtilLinkOs.PrintNetworkConfigurationLabel">
            <summary>
            Send the print network configuration command to the printer.
            </summary>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.ToolsUtilLinkOs.PrintDirectoryLabel">
            <summary>
            Send the print directory label command to the printer.
            </summary>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.ToolsUtilLinkOs.ResetNetwork">
            <summary>
            Sends the network reset command to the printer.
            </summary>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.ToolsUtilLinkOs.SetClock(System.String)">
            <summary>
            Set the RTC time and date on the printer.
            </summary>
            <remarks>
            Accepted <c>dateTime</c> values include date (e.g. &quot;MM-dd-yyyy&quot;), time(e.g. &quot; HH:mm:ss&quot;), 
            or both(e.g. &quot; MM-dd-yyyy HH:mm:ss&quot;).
            </remarks>
            <param name="dateTime">Date and or time in the proper format (MM-dd-yyyy, HH:mm:ss, or MM-dd-yyyy HH:mm:ss).</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If the format of <c>dateTime</c> is invalid.</exception>
        </member>
        <member name="T:Zebra.Sdk.Printer.XmlPrinter">
            <summary>
      A class used to print template formats using XML as input.
    </summary><remarks>
      Androidâ„¢ USB connection not supported.
    </remarks><example>
      Desktop
      <code source="../SdkApi_Test/Test/Zebra/Sdk/Printer/Examples/XmlPrinterExample.cs" />
    </example><example>
      Androidâ„¢
      <code source="../XamarinSdk/XamarinTest/XamarinTest.Android/Test/Zebra/Sdk/Printer/Examples/XmlPrinterExample.cs" />
    </example><example>
      iOS
      <code source="../XamarinSdk/XamarinTest/XamarinTest.iOS/Test/Zebra/Sdk/Printer/Examples/XmlPrinterExample.cs" />
    </example>
        </member>
        <member name="M:Zebra.Sdk.Printer.XmlPrinter.Print(System.IO.Stream,System.String,System.String,System.IO.Stream)">
            <summary>
            Print template formats using XML as input data.
            </summary>
            <param name="sourceDataStream">The source stream containing the XML.</param>
            <param name="templateFilename">The template to merge the XML to.</param>
            <param name="defaultQuantityString">The quantity, if not specified in the data.</param>
            <param name="outputDataStream">Optional stream to send data to.</param>
            <exception cref="T:System.IO.IOException">If an I/O error occurs.</exception>"
            <exception cref="T:System.ArgumentException">If there is an issue with the arguments.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.XmlPrinter.Print(System.String,System.IO.Stream,System.String,System.String,System.IO.Stream)">
            <summary>
            Print template formats using XML as input data to <c>destinationDevice</c>.
            </summary>
            <param name="destinationDevice">The connection string.</param>
            <param name="sourceDataStream">The source stream containing the XML.</param>
            <param name="templateFilename">The template to merge the XML to.</param>
            <param name="defaultQuantityString">The quantity, if not specified in the data.</param>
            <param name="outputDataStream">Optional stream to send data to.<br/>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of
            <c>destinationDevice</c></param>.
            <exception cref="T:System.IO.IOException">If an I/O error occurs.</exception>"
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If it was not possible to connect to the device.</exception>
            <exception cref="T:System.ArgumentException">If there is an issue with the arguments.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.XmlPrinter.Print(System.IO.Stream,System.String,System.String,System.IO.Stream,System.Boolean)">
            <summary>
            Print template formats using XML as input data with optional running commentary to standard out.
            </summary>
            <param name="sourceDataStream">The source stream containing the XML.</param>
            <param name="templateFilename">The template to merge the XML to.</param>
            <param name="defaultQuantityString">The quantity, if not specified in the data.</param>
            <param name="outputDataStream">Optional stream to send data to.</param>
            <param name="verbose">If true, print a running commentary to standard out.</param>
            <exception cref="T:System.IO.IOException">If an I/O error occurs.</exception>"
            <exception cref="T:System.ArgumentException">If there is an issue with the arguments.</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.XmlPrinter.Print(System.String,System.IO.Stream,System.String,System.String,System.IO.Stream,System.Boolean)">
            <summary>
            Print template formats using XML as input data to a device with connection string <c>destinationDevice</c>.
            </summary>
            <param name="destinationDevice">The connection string.</param>
            <param name="sourceDataStream">The source stream containing the XML.</param>
            <param name="templateFilename">The template to merge the XML to.</param>
            <param name="defaultQuantityString">The quantity, if not specified in the data.</param>
            <param name="outputDataStream">Optional stream to send data to.</param>
            <param name="verbose">If true, print a running commentary to standard out.<br/>
            See <a href="../../../../Zebra/Sdk/Comm/ConnectionBuilder.html">ConnectionBuilder</a> for the format of
            <c>destinationDevice</c>.</param>
            <exception cref="T:System.IO.IOException">If an I/O error occurs.</exception>"
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If it was not possible to connect to the device.</exception>
            <exception cref="T:System.ArgumentException">If there is an issue with the arguments.</exception>
        </member>
        <member name="T:Zebra.Sdk.Printer.ZebraPrinter">
            <summary>
            An interface used to obtain various properties of a Zebra printer.
            </summary>
            <example><code source="../SdkApi_Test/Test/Zebra/Sdk/Printer/Examples/ZebraPrinterExample.cs"/></example>
        </member>
        <member name="P:Zebra.Sdk.Printer.ZebraPrinter.PrinterControlLanguage">
            <summary>
            Returns the printer control language (e.g.&#160;ZPL or CPCL) of the printer.
            </summary>
            <see cref="T:Zebra.Sdk.Printer.PrinterLanguage"/> 
        </member>
        <member name="M:Zebra.Sdk.Printer.ZebraPrinter.GetCurrentStatus">
            <summary>
            Returns a new instance of <c>PrinterStatus</c> that can be used to determine the status of a printer.
            </summary>
            <remarks>
            Each invocation of this method will result in a query of the connected printer. If more than one status value is to be 
            read, it is recommended that a copy of <c>PrinterStatus</c> is stored locally.<br/><br/>
            <b>Note:</b> This method must be invoked again to retrieve the most up-to-date status of the printer. The <see cref="T:Zebra.Sdk.Printer.PrinterStatus"/>
            object will only query the printer upon creation.<br/>
            <b>Note:</b> Some Mobile printers (including the MZ series printers) will not communicate if the printer is not 
            ready to print.On these printers, status information is not available when, for example, the printer is out of 
            paper. This method will throw a <see cref="T:Zebra.Sdk.Comm.ConnectionException"/> if it is called when the printer cannot communicate.
            </remarks>
            <returns>A new instance of <c>PrinterStatus</c>.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an issue communicating with the printer (e.g.&#160;the connection is not
            open.)</exception>
        </member>
        <member name="P:Zebra.Sdk.Printer.ZebraPrinter.Connection">
            <summary>
            Returns the printer's connection.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.ZebraPrinter.SetConnection(Zebra.Sdk.Comm.Connection)">
            <summary>
            Changes the printer's connection.
            </summary>
            <param name="newConnection">The new connection to be used for communication with the printer.</param>
        </member>
        <member name="T:Zebra.Sdk.Printer.ZebraPrinterFactory">
            <summary>
            A factory used to acquire an instance of a ZebraPrinter.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.ZebraPrinterFactory.GetInstance(Zebra.Sdk.Comm.Connection)">
            <summary>
            Factory method to create the correct <see cref="T:Zebra.Sdk.Printer.ZebraPrinter"/> concrete class based on the printer's control language.
            </summary>
            <remarks>
            If the Set-Get-Do value, <c>appl.name</c>, starts with one of the following, the printer is determined to 
            be a CPCL printer.  Otherwise it is considered to be a ZPL printer<br/>
            <list type="bullet">
            <item><description>SH</description></item>
            <item><description>H8</description></item>
            <item><description>C</description></item>
            </list>
            </remarks>
            <param name="connection">An open connection to a printer</param>
            <returns>An instance of a <see cref="T:Zebra.Sdk.Printer.ZebraPrinter"/></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language cannot be determined</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.ZebraPrinterFactory.GetInstance(System.String[],Zebra.Sdk.Comm.Connection)">
            <summary>
            Factory method to create the correct <see cref="T:Zebra.Sdk.Printer.ZebraPrinter"/> concrete class based on the printer's control language.
            </summary>
            <remarks>
            If the Set-Get-Do value, <c>appl.name</c>, starts with one of the <c>cpclFwVersionPrefixes</c>, the
            printer is determined to be a CPCL printer.Otherwise it is considered to be a ZPL printer.
            </remarks>
            <param name="cpclFwVersionPrefixes">An array of possible CPCL version number prefixes</param>
            <param name="connection">An open connection to a printer</param>
            <returns>An instance of a <see cref="T:Zebra.Sdk.Printer.ZebraPrinter"/></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs</exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">If the printer language cannot be determined</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.ZebraPrinterFactory.GetInstance(Zebra.Sdk.Printer.PrinterLanguage,Zebra.Sdk.Comm.Connection)">
            <summary>
            Factory method to create the correct <see cref="T:Zebra.Sdk.Printer.ZebraPrinter"/> concrete class based on the printer's control language.
            </summary>
            <param name="language">The language of the printer instance to be created</param>
            <param name="connection">An open connection to a printer</param>
            <returns>An instance of a <see cref="T:Zebra.Sdk.Printer.ZebraPrinter"/></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.ZebraPrinterFactory.CreateLinkOsPrinter(Zebra.Sdk.Printer.ZebraPrinter)">
            <summary>
            Create a wrapper around a Zebra printer that provides access to Link-OS&#8482; features.
            </summary>
            <remarks>
            This method will query the printer for its Link-OS&#8482; version and its control language.
            </remarks>
            <param name="genericPrinter">An instance of a <see cref="T:Zebra.Sdk.Printer.ZebraPrinter"/></param>
            <returns>A Link-OS&#8482; printer</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.ZebraPrinterFactory.CreateLinkOsPrinter(Zebra.Sdk.Printer.ZebraPrinter,Zebra.Sdk.Printer.LinkOsInformation)">
            <summary>
            Create a wrapper around a Zebra printer that provides access to Link-OS&#8482; features.
            </summary>
            <remarks>
            This method will query the printer for its control language, but will not query the printer for Link-OS information.
            </remarks>
            <param name="genericPrinter">An instance of a <see cref="T:Zebra.Sdk.Printer.ZebraPrinter"/></param>
            <param name="info">Link-OS Information</param>
            <returns>A Link-OS&#8482; printer</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.ZebraPrinterFactory.CreateLinkOsPrinter(Zebra.Sdk.Printer.ZebraPrinter,Zebra.Sdk.Printer.PrinterLanguage)">
            <summary>
            Create a wrapper around a Zebra printer that provides access to Link-OS&#8482; features.
            </summary>
            <remarks>
            This method will query the printer for its Link-OS information, but will not query the printer for its control language.
            </remarks>
            <param name="genericPrinter">An instance of a <see cref="T:Zebra.Sdk.Printer.ZebraPrinter"/></param>
            <param name="language">The printer control language</param>
            <returns>A Link-OS&#8482; printer</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.ZebraPrinterFactory.CreateLinkOsPrinter(Zebra.Sdk.Printer.ZebraPrinter,Zebra.Sdk.Printer.LinkOsInformation,Zebra.Sdk.Printer.PrinterLanguage)">
            <summary>
            Create a wrapper around a Zebra printer that provides access to Link-OS&#8482; features.
            </summary>
            <remarks>
            This method will not query the printer for any information but will use the supplied <c>info</c> and <c>language</c>.
            </remarks>
            <param name="genericPrinter">An instance of a <see cref="T:Zebra.Sdk.Printer.ZebraPrinter"/></param>
            <param name="info">Link-OS Information</param>
            <param name="language">The printer control language</param>
            <returns>A Link-OS&#8482; printer</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.ZebraPrinterFactory.GetLinkOsPrinter(Zebra.Sdk.Comm.Connection)">
            <summary>
            Create Link-OS&#8482; Zebra printer from a connection that provides access to Link-OS&#8482; features.
            </summary>
            <remarks>
            This method will query the printer for its Link-OS&#8482; version and its control language.
            </remarks>
            <param name="connection">An open connection to a Link-OS&#8482; printer</param>
            <returns>A Link-OS&#8482; printer</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.ZebraPrinterFactory.GetLinkOsPrinter(Zebra.Sdk.Comm.Connection,Zebra.Sdk.Printer.LinkOsInformation)">
            <summary>
            Create Link-OS&#8482; Zebra printer from a connection that provides access to Link-OS&#8482; features.
            </summary>
            <remarks>
            This method will query the printer for its control language, but will not query the printer for Link-OS information.
            </remarks>
            <param name="connection">An open connection to a Link-OS&#8482; printer</param>
            <param name="info">Link-OS Information</param>
            <returns>A Link-OS&#8482; printer</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.ZebraPrinterFactory.GetLinkOsPrinter(Zebra.Sdk.Comm.Connection,Zebra.Sdk.Printer.PrinterLanguage)">
            <summary>
            Create Link-OS&#8482; Zebra printer from a connection that provides access to Link-OS&#8482; features.
            </summary>
            <remarks>
            This method will query the printer for its Link-OS information, but will not query the printer for 
            its control language.
            </remarks>
            <param name="connection">An open connection to a Link-OS&#8482; printer</param>
            <param name="language">The printer control language</param>
            <returns>A Link-OS&#8482; printer</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs</exception>
        </member>
        <member name="M:Zebra.Sdk.Printer.ZebraPrinterFactory.GetLinkOsPrinter(Zebra.Sdk.Comm.Connection,Zebra.Sdk.Printer.LinkOsInformation,Zebra.Sdk.Printer.PrinterLanguage)">
            <summary>
            Create Link-OS&#8482; Zebra printer from a connection that provides access to Link-OS&#8482; features.
            </summary>
            <remarks>
            This method will not query the printer for any information but will use the supplied <c>info</c> and 
            <c>language.</c>
            </remarks>
            <param name="connection">An open connection to a Link-OS&#8482; printer</param>
            <param name="info">Link-OS Information</param>
            <param name="language">The printer control language</param>
            <returns>A Link-OS&#8482; printer</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If an I/O error occurs</exception>
        </member>
        <member name="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException">
            <summary>
            Signals that an error has occurred when determining the printer language.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException.#ctor(System.String)">
            <summary>
            Constructs a <c>ZebraPrinterLanguageUnknownException</c> with <c>message</c> as the detailed error message
            </summary>
            <param name="message">The error message</param>
        </member>
        <member name="M:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException.#ctor">
            <summary>
            Constructs a <c>ZebraPrinterLanguageUnknownException</c> with <c>"Unknown printer language"</c> as
            the detailed error message.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Printer.ZebraPrinterLinkOs">
            <summary>
            This interface defines increased capabilities of a Zebra Link-OS&#8482; printer. Link-OS&#8482; printers support many 
            features not supported by non-Link-OS&#8482; Zebra printers.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.ZebraPrinterLinkOs.GetPortStatus">
            <summary>
            Retrieve the TCP port status of the printer and returns a list of <c>TcpPortStatus</c> describing the open ports on the printer.
            </summary>
            <remarks>
            The open connection from the SDK will be listed in the return value. This method will throw 
            a <see cref="T:Zebra.Sdk.Comm.ConnectionException"/> if it is unable to communicate with the printer.<br/><br/>
            <b>Note:</b> Tabletop printers support more than one established connection on the raw port at a time, so the 
            same port may be listed more than once.
            </remarks>
            <returns>List of open ports on the ZebraPrinter. Note: The open connection from the SDK will be listed.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an issue communicating with the printer (e.g.&#160;the connection is not open.)</exception>
        </member>
        <member name="P:Zebra.Sdk.Printer.ZebraPrinterLinkOs.CommunityName">
            <summary>
            Gets/sets the printer's SNMP get community name.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Printer.ZebraPrinterLinkOs.LinkOsInformation">
            <summary>
            Returns specific Link-OS&#8482; information.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Printer.ZplPrintMode">
            <summary>
            Enumeration of the various print modes supported by Zebra Printers.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.ZplPrintMode.REWIND">
            <summary>
            Rewind print mode
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.ZplPrintMode.PEEL_OFF">
            <summary>
            Peel-off print mode
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.ZplPrintMode.TEAR_OFF">
            <summary>
            Tear-off print mode (this also implies Linerless Tear print mode)
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.ZplPrintMode.CUTTER">
            <summary>
            Cutter print mode
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.ZplPrintMode.APPLICATOR">
            <summary>
            Applicator print mode
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.ZplPrintMode.DELAYED_CUT">
            <summary>
            Delayed cut print mode
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.ZplPrintMode.LINERLESS_PEEL">
            <summary>
            Linerless peel print mode
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.ZplPrintMode.LINERLESS_REWIND">
            <summary>
            Linerless rewind print mode
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.ZplPrintMode.PARTIAL_CUTTER">
            <summary>
            Partial cutter print mode
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.ZplPrintMode.RFID">
            <summary>
            RFID print mode
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.ZplPrintMode.KIOSK">
            <summary>
            Kiosk print mode
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Printer.ZplPrintMode.UNKNOWN">
            <summary>
            Unknown print mode
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Printer.ZplPrintMode.ToString">
            <summary>
            Returns the print mode.
            </summary>
            <returns>String representation of the print mode (e.g.&#160;"Rewind").</returns>
        </member>
        <member name="T:Zebra.Sdk.Settings.AlertCondition">
            <summary>
            Enumeration of the various printer alert conditions which can be set on Zebra Printers.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.NONE">
            <summary>
            Alert condition 'None'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.PAPER_OUT">
            <summary>
            Alert condition 'Paper Out'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.RIBBON_OUT">
            <summary>
            Alert condition 'Ribbon Out'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.HEAD_TOO_HOT">
            <summary>
            Alert condition 'Head Too Hot'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.HEAD_COLD">
            <summary>
            Alert condition 'Head Cold'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.HEAD_OPEN">
            <summary>
            Alert condition 'Head Open'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.POWER_SUPPLY_OVER_TEMP">
            <summary>
            Alert condition 'Power Supply Too Hot'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.RIBBON_IN_WARNING">
            <summary>
            Alert condition 'Ribbon In'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.REWIND_FULL">
            <summary>
            Alert condition 'Rewind'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.CUTTER_JAMMED">
            <summary>
            Alert condition 'Cutter Jammed'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.PRINTER_PAUSED">
            <summary>
            Alert condition 'Printer Paused'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.PQ_JOB_COMPLETED">
            <summary>
            Alert condition 'PQ Job Completed'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.LABEL_READY">
            <summary>
            Alert condition 'Label Ready'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.HEAD_ELEMENT_BAD">
            <summary>
            Alert condition 'Head Element Bad'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.ZBI_BASIC_RUNTIME_ERROR">
            <summary>
            Alert condition 'Basic Runtime'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.ZBI_BASIC_FORCED_ERROR">
            <summary>
            Alert condition 'Basic Forced'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.POWER_ON">
            <summary>
            Alert condition 'Power On'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.CLEAN_PRINTHEAD">
            <summary>
            Alert condition 'Clean Printhead'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.MEDIA_LOW">
            <summary>
            Alert condition 'Media Low'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.RIBBON_LOW">
            <summary>
            Alert condition 'Ribbon Low'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.REPLACE_HEAD">
            <summary>
            Alert condition 'Replace Head'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.BATTERY_LOW">
            <summary>
            Alert condition 'Battery Low'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.RFID_ERROR">
            <summary>
            Alert condition 'RFID Error'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.ALL_MESSAGES">
            <summary>
            Alert condition 'All Messages'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.COLD_START">
            <summary>
            Alert condition 'Cold Start'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.SGD_SET">
            <summary>
            Alert condition 'SGD Set'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.MOTOR_OVERTEMP">
            <summary>
            Alert condition 'Motor Overtemp'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.PRINTHEAD_SHUTDOWN">
            <summary>
            Alert condition 'Printhead Shutdown'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.SHUTTING_DOWN">
            <summary>
            Alert condition 'Shutting Down'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.RESTARTING">
            <summary>
            Alert condition 'Restarting'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.NO_READER_PRESENT">
            <summary>
            Alert condition 'No Reader Present'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.THERMISTOR_FAULT">
            <summary>
            Alert condition 'Thermistor Fault'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.INVALID_HEAD">
            <summary>
            Alert condition 'Invalid Head'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.COUNTRY_CODE_ERROR">
            <summary>
            Alert condition 'Country Code Error'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.MCR_RESULT_READY">
            <summary>
            Alert condition 'MCR Result Ready'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.PMCU_DOWNLOAD">
            <summary>
            Alert condition 'PMCU Download'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.MEDIA_CARTRIDGE">
            <summary>
            Alert condition 'Media Cartridge'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.MEDIA_CARTRIDGE_LOAD_FAILURE">
            <summary>
            Alert condition 'Media Cartridge Load Failure'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.MEDIA_CARTRIDGE_EJECT_FAILURE">
            <summary>
            Alert condition 'Media Cartridge Eject Failure'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.MEDIA_CARTRIDGE_FORCED_EJECT">
            <summary>
            Alert condition 'Media Cartridge Forced Eject'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertCondition.CLEANING_MODE">
            <summary>
            Alert condition 'Cleaning Mode'
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Settings.AlertCondition.CreateAlertCondition(System.String)">
            <summary>
            Creates an AlertCondition based on the <c>condition</c>.
            </summary>
            <remarks>If the <c>condition</c> is invalid a ZebraIllegalArgumentException will be thrown.</remarks>
            <param name="condition">Name of one of the values of AlertCondition.</param>
            <returns>Based on the string <c>condition</c></returns>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If <c>condition</c> is not a valid alert condition.</exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.AlertCondition.CreateAlertConditionFromName(System.String)">
            <summary>
            Creates an AlertCondition based on the <c>conditionName</c>.
            </summary>
            <remarks>If the <c>conditionName</c> is invalid a ZebraIllegalArgumentException will be thrown.</remarks>
            <param name="conditionName">Name of one of the conditions in AlertCondition.</param>
            <returns>Based on the string <c>conditionName</c></returns>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If <c>conditionName</c> is not a valid alert condition.</exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.AlertCondition.ToString">
            <summary>
            Returns the alert condition.
            </summary>
            <returns>String representation of the alert condition (e.g.&#160;"PAPER OUT").</returns>
        </member>
        <member name="P:Zebra.Sdk.Settings.AlertCondition.ConditionName">
            <summary>
            Gets/sets the alert condition name
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Settings.AlertCondition.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Zebra.Sdk.Settings.AlertCondition.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="T:Zebra.Sdk.Settings.AlertDestination">
            <summary>
            Enumeration of the various alert destinations which can be set on Zebra Printers.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertDestination.SERIAL">
            <summary>
            Alert Destination 'Serial'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertDestination.PARALLEL">
            <summary>
            Alert Destination 'Parallel'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertDestination.EMAIL">
            <summary>
            Alert Destination 'E-Mail'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertDestination.TCP">
            <summary>
            Alert Destination 'TCP'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertDestination.UDP">
            <summary>
            Alert Destination 'UDP'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertDestination.SNMP">
            <summary>
            Alert Destination 'SNMP'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertDestination.USB">
            <summary>
            Alert Destination 'USB'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertDestination.HTTP">
            <summary>
            Alert Destination 'HTTP-POST'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertDestination.BLUETOOTH">
            <summary>
            Alert Destination 'Bluetooth'
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Settings.AlertDestination.SDK">
            <summary>
            Alert Destination 'SDK'
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Settings.AlertDestination.DestinationAsSGDString">
            <summary>
            Returns the alert destination as a string.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Settings.AlertDestination.CreateAlertDestination(System.String)">
            <summary>
            Creates an AlertDestination based on the <c>destination</c>.
            </summary>
            <remarks>If the <c>destination</c> is invalid a ZebraIllegalArgumentException will be thrown.</remarks>
            <param name="destination">Name of one of the values of AlertDestination.</param>
            <returns>Based on the <c>destination</c></returns>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If <c>destination</c> is not a valid alert destination.</exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.AlertDestination.CreateAlertDestinationFromName(System.String)">
            <summary>
            Creates an AlertDestination based on the <c>destinationName</c>.
            <see cref="P:Zebra.Sdk.Settings.AlertDestination.DestinationName"/>
            </summary>
            <remarks>If the <c>destinationName</c> is invalid a ZebraIllegalArgumentException will be thrown.</remarks>
            <param name="destinationName">Name of one of the destinations in AlertDestination.</param>
            <returns>Based on the <c>destinationName</c></returns>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If <c>destinationName</c> is not a valid alert destination.</exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.AlertDestination.ToString">
            <summary>
            Returns the alert destination.
            </summary>
            <returns>String representation of the alert destination (e.g.&#160;"TCP").</returns>
        </member>
        <member name="P:Zebra.Sdk.Settings.AlertDestination.DestinationName">
            <summary>
            Gets/Sets the alert destination name.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Settings.AlertDestination.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Zebra.Sdk.Settings.AlertDestination.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ConnectionUtil.SelectConnection(Zebra.Sdk.Comm.Connection)">
            <summary>
            Decide whether to use the status channel or the print channel to get settings from the printer. For a 
            multichannel connection, prefer the status channel.
            </summary>
            <param name="printerConnection">A connection to the printer.</param>
            <returns>The appropriate connection.</returns>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.JsonHelper.BuildQuery(System.Collections.Generic.List{System.String})">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.Text.EncoderFallbackException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.JsonHelper.ParseGetResponse(System.Byte[])">
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.JsonHelper.BuildSetCommand(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.Text.EncoderFallbackException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.JsonValidator.IsResponseComplete(System.Byte[])">
            <see cref="M:Zebra.Sdk.Comm.ResponseValidator.IsResponseComplete(System.Byte[])"/> 
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.SettingRange.IsInRange(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns>true if value is within the setting's range</returns>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.SettingRangeInteger.#ctor(System.String)">
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.SettingRangeString.#ctor(System.String)">
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.SgdValidator.IsResponseComplete(System.Byte[])">
            <see cref="M:Zebra.Sdk.Comm.ResponseValidator.IsResponseComplete(System.Byte[])"/> 
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsList.Refresh">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsList.GetValue(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsList.GetValues(System.Collections.Generic.List{System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsList.GetAllSettingIds">
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsList.GetAllSettingValues">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsList.FilterOutUnreadableSettings(System.Collections.Generic.List{System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsList.SetSetting(System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsList.UpdateInternalState(System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsList.IsSettingReadOnly(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsList.IsSettingWriteOnly(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsList.IsSettingClonable(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsList.IsSettingArchivable(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsList.GetSettingRange(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsList.IsSettingValid(System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsList.GetAllSettings">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsList.GetSettingById(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsList.CheckSettingsList(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsList.GetSettingType(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsList.GetSetting(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsList.SetSettings(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsList.SetSetting(System.String,Zebra.Sdk.Settings.Setting)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsList.SetAllSettings(System.Collections.Generic.Dictionary{System.String,Zebra.Sdk.Settings.Setting})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsList.ProcessSettingsViaMap(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsList.GetSettingsKeys">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListFromConnection.GetUpdatedJsonData">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListFromConnection.GetValues(System.Collections.Generic.List{System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            /// <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListFromConnection.DoJsonQuery(System.Collections.Generic.List{System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListFromConnection.SetSetting(System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListFromConnection.SetSettings(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListFromConnection.UpdateSettingsWithResponse(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListFromConnection.ProcessSettingsViaMap(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListFromConnection.StoreSettingValues(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListFromProfile.GetUpdatedJsonData">
            <see cref="M:Zebra.Sdk.Settings.Internal.ZebraSettingsList.GetUpdatedJsonData"/> 
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListFromProfile.GetValues(System.Collections.Generic.List{System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListFromProfile.SetSetting(System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <see cref="M:Zebra.Sdk.Settings.Internal.ZebraSettingsList.SetSetting(System.String,System.String)"/> 
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListFromProfile.SetSetting(System.String,Zebra.Sdk.Settings.Setting)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <see cref="M:Zebra.Sdk.Settings.Internal.ZebraSettingsList.SetSetting(System.String,Zebra.Sdk.Settings.Setting)"/>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListFromProfile.SetSettings(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <see cref="M:Zebra.Sdk.Settings.Internal.ZebraSettingsList.SetSettings(System.Collections.Generic.Dictionary{System.String,System.String})"/> 
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListFromProfile.SetAllSettings(System.Collections.Generic.Dictionary{System.String,Zebra.Sdk.Settings.Setting})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <see cref="M:Zebra.Sdk.Settings.Internal.ZebraSettingsList.SetAllSettings(System.Collections.Generic.Dictionary{System.String,Zebra.Sdk.Settings.Setting})"/> 
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListFromProfile.StoreSettingValues">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListFromProfile.ProcessSettingsViaMap(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <see cref="M:Zebra.Sdk.Settings.Internal.ZebraSettingsList.ProcessSettingsViaMap(System.Collections.Generic.Dictionary{System.String,System.String})"/> 
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListI.IsSettingValid(System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListI.GetSettingRange(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListI.IsSettingReadOnly(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListI.IsSettingWriteOnly(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListI.IsSettingArchivable(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListI.IsSettingClonable(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListI.SetSetting(System.String,System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListI.SetSettings(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListI.GetAllSettingValues">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListI.GetAllSettings">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListI.GetAllSettingIds">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListI.GetValue(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListI.GetValues(System.Collections.Generic.List{System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListI.GetSettingType(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListI.GetSetting(System.String)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListI.SetSetting(System.String,Zebra.Sdk.Settings.Setting)">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListI.SetAllSettings(System.Collections.Generic.Dictionary{System.String,Zebra.Sdk.Settings.Setting})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Internal.ZebraSettingsListI.ProcessSettingsViaMap(System.Collections.Generic.Dictionary{System.String,System.String})">
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException"></exception>
        </member>
        <member name="T:Zebra.Sdk.Settings.Setting">
            <summary>
            A class that represents an internal device setting.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Settings.Setting.Value">
            <summary>
            Gets or sets the setting's value.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Settings.Setting.Type">
            <summary>
            Gets or sets a string describing the data type of the setting.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Settings.Setting.Range">
            <summary>
            Gets or sets a string that describes the acceptable range of values for this setting.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Settings.Setting.Clone">
            <summary>
            Gets or sets if this setting can be applied when loading a profile
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Settings.Setting.Archive">
            <summary>
             Gets or sets if this setting can be applied when loading a backup
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Settings.Setting.Access">
            <summary>
            Gets or sets a string that describes the access permissions for the setting. RW is returned for settings that have 
            read and write permissions. R is returned for settings that are read-only W is returned for settings that are write-only
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Settings.Setting.IsReadOnly">
            <summary>
            Returns true if the setting does not have write access.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Settings.Setting.IsWriteOnly">
            <summary>
            Returns true if the setting does not have read access.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Settings.Setting.IsValid(System.String)">
            <summary>
            Returns true if <c>value</c> is valid for the given setting.
            </summary>
            <param name="value">Setting value.</param>
            <returns>true if value is within the setting's range</returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.Setting.ToString">
            <summary>
            Retruns a human readable string of the setting.
            </summary>
            <returns>Setting [settingData=value=Value type=Type range=Range].</returns>
        </member>
        <member name="T:Zebra.Sdk.Settings.SettingsException">
            <summary>
            Signals that an error occurred retrieving a setting
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Settings.SettingsException.#ctor">
            <summary>
            Constructs a <c>SettingsException</c> with <c>Setting not found</c> as the detailed error message.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Settings.SettingsException.#ctor(System.String)">
            <summary>
            Constructs a <c>SettingsException</c> with <c>message</c> as the detailed error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Zebra.Sdk.Settings.SettingsException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a <c>SettingsException</c> with the <c>message</c> as the detailed error message and 
            <c>cause</c> as the source of the exception.
            </summary>
            <param name="message">The error message.</param>
            <param name="cause">The cause of the exception</param>
        </member>
        <member name="T:Zebra.Sdk.Settings.SettingsProvider">
            <summary>
      Interface that provides access to device related settings.
    </summary><example>
      Desktop
      <code source="../SdkApi_Test/Test/Zebra/Sdk/Setting/Examples/SettingsProviderExample.cs" />
    </example><example>
      Androidâ„¢
      <code source="../XamarinSdk/XamarinTest/XamarinTest.Android/Test/Zebra/Sdk/Setting/Examples/SettingsProviderExample.cs" />
    </example><example>
      iOS
      <code source="../XamarinSdk/XamarinTest/XamarinTest.iOS/Test/Zebra/Sdk/Setting/Examples/SettingsProviderExample.cs" />
    </example>
        </member>
        <member name="M:Zebra.Sdk.Settings.SettingsProvider.GetAvailableSettings">
            <summary>
            Retrieve all of the setting identifiers for a device.
            </summary>
            <remarks>
            These are the IDs that may be used as keys for retrieving and updating settings for a device.
            <see cref="M:Zebra.Sdk.Settings.SettingsProvider.GetSettingValue(System.String)"/>
            </remarks>
            <returns>Set of identifiers available for a device.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the settings could not be loaded</exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.SettingsProvider.GetSettingValue(System.String)">
            <summary>
            Retrieves the device's setting value for a setting id.
            </summary>
            <param name="settingId">The setting id.</param>
            <returns>The setting's value.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting could not be retrieved.</exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.SettingsProvider.GetSettingsValues(System.Collections.Generic.List{System.String})">
            <summary>
            Retrieves the device's setting values for a list of setting IDs.
            </summary>
            <param name="listOfSettings">List of setting IDs.</param>
            <returns>The settings' values.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the settings could not be retrieved.</exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.SettingsProvider.GetAllSettings">
            <summary>
            Retrieve all settings and their attributes.
            </summary>
            <returns>Map of setting IDs and setting attributes contained in the profile</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the settings could not be retrieved</exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.SettingsProvider.GetAllSettingValues">
            <summary>
            Retrieves all of the device's setting values.
            </summary>
            <returns>Values of all the settings provided by the device.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the settings could not be loaded</exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.SettingsProvider.SetSetting(System.String,System.String)">
            <summary>
            Sets the setting to the given value.
            </summary>
            <param name="settingId">The setting id.</param>
            <param name="value">The setting's value</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting is read only, does not exist, or if the setting could not be set</exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.SettingsProvider.SetSettings(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Set more than one setting.
            </summary>
            <param name="settingValuePairs">Map a setting ID to the new value for the setting.</param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the settings cannot be sent to the device.</exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.SettingsProvider.GetSettingRange(System.String)">
            <summary>
            Retrieves the allowable range for a setting.
            </summary>
            <param name="settingId">The setting id.</param>
            <returns>The setting's range as a string</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting does not exist</exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.SettingsProvider.IsSettingValid(System.String,System.String)">
            <summary>
            Returns true if value is valid for the given setting.
            </summary>
            <param name="settingId">The setting id.</param>
            <param name="value">The setting's value</param>
            <returns>True if value is valid for the given setting.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting does not exist</exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.SettingsProvider.IsSettingReadOnly(System.String)">
            <summary>
            Returns true if the setting is read only.
            </summary>
            <param name="settingId">The setting id</param>
            <returns>True if the setting is read only</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting does not exist</exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.SettingsProvider.IsSettingWriteOnly(System.String)">
            <summary>
            Returns true if the setting is write only.
            </summary>
            <param name="settingId">The setting id</param>
            <returns>True if the setting is write only</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting does not exist</exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.SettingsProvider.GetSettingType(System.String)">
            <summary>
            Returns the data type of the setting.
            </summary>
            <param name="settingId">The setting id</param>
            <returns>The data type of the setting (e.g. string, bool, enum, etc.)</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If the setting does not exist</exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.SettingsProvider.ProcessSettingsViaMap(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Change or retrieve printer settings. 
            </summary>
            <remarks>
            Due to the setting verification and validation, additional time and data traffic will be needed for each 
            <c>ProcessSettingsViaMap</c> method call. It is recommended to bundle all settings into one map and one method call to
            reduce this overhead.
            </remarks>
            <param name="settingValuePairs">The settings to change or retrieve</param>
            <returns>Results of the setting commands</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If there is an error communicating with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Settings.SettingsException">If a setting is malformed, or one or more settings could not be set.</exception>
        </member>
        <member name="T:Zebra.Sdk.Settings.SettingsRanges">
            <summary>
            Methods to use the LinkOS 3.2 JSON syntax to get the ranges for a list of SDGs, without the need to use an allconfig.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Settings.SettingsRanges.GetRanges(System.Collections.Generic.List{System.String},Zebra.Sdk.Comm.Connection,Zebra.Sdk.Printer.PrinterLanguage,Zebra.Sdk.Printer.LinkOsInformation)">
            <summary>
            Use the LinkOS 3.2 JSON syntax to get the ranges for a list of SDGs, without the need to use an allconfig.
            </summary>
            <param name="settings">A list of SGD names.</param>
            <param name="printerConnection">A connection to a LinkOS printer.</param>
            <param name="printerLanguage">the current printer control language</param>
            <param name="version">LinkOS version</param>
            <returns>A map from setting name to a string representing the range.</returns>
            <exception cref="T:System.InvalidOperationException">If the printer is not LinkOS 3.2 or higher.</exception>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If the connection fails.</exception>
            <exception cref="T:System.IO.IOException">If there is an error parsing the JSON response from the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.SettingsRanges.ParseJsonForRanges(System.String)">
            <summary>
            Parse the JSON response from the JSON get range command. Assumes that the only field requested in the JSON get 
            command was the "range" field.
            </summary>
            <param name="jsonResponse">Response from a LinkOS 3.2 or greater printer.</param>
            <returns>Map from setting names to range strings.</returns>
        </member>
        <member name="T:Zebra.Sdk.Settings.SettingsValues">
            <summary>
            Methods to use the LinkOS 3.2 JSON syntax to get the values for a list of SDGs, without the need to use an allconfig.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Settings.SettingsValues.GetValues(System.Collections.Generic.List{System.String},Zebra.Sdk.Comm.Connection,Zebra.Sdk.Printer.PrinterLanguage,Zebra.Sdk.Printer.LinkOsInformation)">
            <summary>
            Get the values for a list of settings from a printer.
            </summary>
            <remarks>
             Use either JSON or SGD get commands to request the values from the printer, 
             depending on the connection type and the printer language.  The default 
             timeout values from the connection will be used when communicating with the 
             printer. If printerConnection is a <c>MultichannelConnection</c>, prefer the status channel.
            </remarks>
            <param name="settingNames">The settings to be retrieved.</param>
            <param name="printerConnection">A connection to the printer.</param>
            <param name="printerLanguage">The printer control language for the connection.</param>
            <param name="version">The LinkOS version information.</param>
            <returns>A map from setting name to value.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If it was not possible to communicate with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If it was not possible to parse the response from the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.SettingsValues.SetValues(System.Collections.Generic.Dictionary{System.String,System.String},Zebra.Sdk.Comm.Connection,Zebra.Sdk.Printer.PrinterLanguage,Zebra.Sdk.Printer.LinkOsInformation)">
            <summary>
            Set each of the settings in settingValues on a printer.
            </summary>
            <remarks>
            Use either JSON or SGD set commands to set the values on the printer, depending on the connection type and 
            the printer language.The default timeout values from the connection will be used when communicating with the 
            printer.If printerConnection is a <c>MultichannelConnection</c>, prefer the status channel.
            </remarks>
            <param name="settingValues">Map from setting names to desired values.</param>
            <param name="printerConnection">A connection to the printer.</param>
            <param name="printerLanguage">The printer control language for the connection.</param>
            <param name="version">The LinkOS version information.</param>
            <returns>A map from setting name to value.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If it was not possible to communicate with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.SettingsValues.GetValuesUsingJson(System.Collections.Generic.List{System.String},Zebra.Sdk.Comm.Connection)">
            <summary>
            Get the values for a list of settings from a LinkOS printer.
            </summary>
            <remarks>
            Use JSON to request the values from the printer. The default timeout values from the connection will 
            be used when communicating with the printer.
            </remarks>
            <param name="settingNames">The settings to be retrieved.</param>
            <param name="printerConnection">A connection to the printer.</param>
            <returns>A map from setting name to value.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If it was not possible to communicate with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If it was not possible to parse the response from the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.SettingsValues.GetValuesUsingSGD(System.Collections.Generic.List{System.String},Zebra.Sdk.Comm.Connection)">
            <summary>
            Get the values for a list of settings from a printer.
            </summary>
            <remarks>
            Use SGD get commands to request the values from the printer.The default timeout values from the connection 
            will be used when communicating with the printer.
            </remarks>
            <param name="settingNames">The settings to be retrieved.</param>
            <param name="printerConnection">A connection to the printer.</param>
            <returns>A map from setting name to value.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If it was not possible to communicate with the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.SettingsValues.ShouldUseJson(Zebra.Sdk.Comm.Connection,Zebra.Sdk.Printer.PrinterLanguage,Zebra.Sdk.Printer.LinkOsInformation)">
            <summary>
            Decide whether JSON can be used to get settings from the printer, or whether SGD setvar/getvar must be used.
            </summary>
            <param name="printerConnection">A connection to the printer.</param>
            <param name="printerLanguage">The printer control language for the connection.</param>
            <param name="version">The LinkOS version information.</param>
            <returns><c>true</c> if JSON can be used, <c>false</c> if SGD setvar/getvar must be used.</returns>
        </member>
        <member name="M:Zebra.Sdk.Settings.SettingsValues.SetValuesUsingJson(System.Collections.Generic.Dictionary{System.String,System.String},Zebra.Sdk.Comm.Connection)">
            <summary>
            Set each of the settings in settingValues on a LinkOS printer.
            </summary>
            <remarks>
            Use JSON to set the values on the printer. The default timeout values from the connection will be 
            used when communicating with the printer.Return a map of the values from the printer after the set 
            operation was performed.
            </remarks>
            <param name="settingValues">Map from setting names to desired values.</param>
            <param name="printerConnection">A connection to the printer.</param>
            <returns>A map from setting name to value.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If it was not possible to communicate with the printer.</exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException">If it was not possible to parse the response from the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Settings.SettingsValues.SetValuesUsingSGD(System.Collections.Generic.Dictionary{System.String,System.String},Zebra.Sdk.Comm.Connection)">
            <summary>
            Set each of the settings in settingValues on a printer.
            </summary>
            <remarks>
            Use SGD set commands to set the values on the printer. The default timeout values from the connection will 
            be used when communicating with the printer.Return a map of the values from the printer after the set operation was performed.
            </remarks>
            <param name="settingValues">Map from setting names to desired values.</param>
            <param name="printerConnection">A connection to the printer.</param>
            <returns>A map from setting name to value.</returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException">If it was not possible to communicate with the printer.</exception>
        </member>
        <member name="M:Zebra.Sdk.Util.FileConversion.Internal.CisdfUnwrapperStream.#ctor(System.IO.Stream)">
            <summary>
            </summary>
            <param name="sourceStream"></param>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Util.FileConversion.Internal.CisdfUnwrapperStream.ReadByte">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Util.FileConversion.Internal.CisdfUnwrapperStream.SkipToHeaderInfo">
            <summary>
            </summary>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Util.FileConversion.Internal.CisdfUnwrapperStream.GrabNextCisdfLine">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Util.FileConversion.Internal.DYDataProviderStream.#ctor(System.IO.Stream)">
            <summary>
            </summary>
            <param name="sourceStream"></param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Util.FileConversion.Internal.DYDataProviderStream.GetTotalBytesInData">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Util.FileConversion.Internal.DYDataProviderStream.GetBytesPerRow">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Util.FileConversion.Internal.DY_UnwrapperStream.DY_SourceDataType.GetSourceType(System.String)">
            <summary>
            </summary>
            <param name="letterCode"></param>
            <returns></returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Util.FileConversion.Internal.MetadataExtractorPassthruStream.#ctor(System.IO.Stream)">
            <summary>
            </summary>
            <param name="sourceStream"></param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Util.FileConversion.Internal.PrinterFileUnwrapperStream.#ctor(System.IO.Stream,Zebra.Sdk.Util.FileConversion.Internal.PrinterWrappingType)">
            <summary>
            </summary>
            <param name="inputStream"></param>
            <param name="fileType"></param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Util.FileConversion.Internal.ZebraImageHeaderPrependerStream.#ctor(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="dyDataProviderStream"></param>
            <param name="bytesPerRow"></param>
            <param name="totalBytesInData"></param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.CPCLUtilities.VERSION_PREFIXES">
            <summary>
            "SH", "H8", "C"
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.CPCLUtilities.PRINTER_STATUS">
            <summary>
            ESC + h (0x1b 0x68)
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.CPCLUtilities.PRINTER_CONFIG_LABEL">
            <summary>
            ESC + V (0x1b 0x56)
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.CPCLUtilities.PRINTER_FORM_FEED">
            <summary>
            ESC + FormFeed (0x1b 0x0C)
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.FileUtilities.ParseDriveAndExtension(System.String)">
            <summary>
            
            </summary>
            <param name="printerDriveAndFileName"></param>
            <returns></returns>
            <exception cref = "T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.FileUtilities.GetFileNameOnPrinter(System.String)">
            <summary>
            
            </summary>
            <param name="filePath"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.MultipartFileSender.Send(Zebra.Sdk.Comm.Connection,Zebra.Sdk.Util.Internal.PrinterFileDescriptor)">
            <summary>
            </summary>
            <param name="connection"></param>
            <param name="printerFileDescriptor"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.MultipartFileSender.Send(Zebra.Sdk.Comm.Connection,System.Collections.Generic.List{Zebra.Sdk.Util.Internal.PrinterFileDescriptor})">
            <summary>
            </summary>
            <param name="connection"></param>
            <param name="fileDescriptors"></param>
            <returns></returns>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.MultipartFileSender.Send">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.MultipartFileSender.GetPrinterResponse">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.NetworkUtil.IsCardPrinter(System.String)">
            <summary>
            Determines if the device is a zebra card printer
            </summary>
            <returns>true if device is a card printer</returns>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.NULLobj">
            <summary>
            0, marks free or usable space
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.FONTobj">
            <summary>
            1, bitmap or smooth font
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.BCODEobj">
            <summary>
            2, barcode data
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.FORMATobj">
            <summary>
            3, stored ZPL format
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.GIMAGEobj">
            <summary>
            4, GRF graphic image object
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.PMAPobj">
            <summary>
            5, print map - unused
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.PARSERobj">
            <summary>
            6, general purpose storage - used by DBCOs for parsing and bitmaps
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.CACHEobj">
            <summary>
            7, Intellifont cache
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.ANYobj">
            <summary>
            8, wildcard
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.MAGobj">
            <summary>
            9, Mag tables
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.MULobj">
            <summary>
            10, Multiplication tables
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.MIRobj">
            <summary>
            11, Mirror tables
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.DEFAULTobj">
            <summary>
            12, use context-specific default
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.MAGICobj">
            <summary>
            13, magic mode buffers
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.KEYobj">
            <summary>
            14, access locks for certain ZPL commands
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.FNTENCobj">
            <summary>
            15, JisToUnicode tables
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.BASICobj">
            <summary>
            16, Saved BASIC program
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.STORAGEobj">
            <summary>
            17, Data storage object
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.PIMAGEobj">
            <summary>
            18, PNG graphic image object
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.DBCobj">
            <summary>
            19, Downloadable Bar Code object
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.BZNCRYPobj">
            <summary>
            20, BAZ encrypted BASIC object
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.LABELobj">
            <summary>
            21, Stored label format
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.TTFobj">
            <summary>
            22, TrueType Font
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.PCXobj">
            <summary>
            23, PCX bitmap
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.BMPobj">
            <summary>
            24, Bitmap
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.IMGobj">
            <summary>
            25, GEM bitmap graphic
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.ASCobj">
            <summary>
            26, DPL Datamax 7-bit format
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.TTEobj">
            <summary>
            27, TrueType Extension Font
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.TTlistobj">
            <summary>
            28, TT?  we will list TTE and TTF objects on the same label
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.NRD_TLSobj">
            <summary>
            29, WLAN security certificate for TLS and TTLS
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.PAC_FASTobj">
            <summary>
            30, WLAN security certificate for FAST
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.EFORMATobj">
            <summary>
            31, stored EPL format
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.GETobj">
            <summary>
            32, Mirror feedback template file
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.WMLobj">
            <summary>
            33, WML menu file
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.MIBobj">
            <summary>
            34, MIB file for auto-generated SNMP MIB
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.CSVobj">
            <summary>
            35, Comma Seperated Values file
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.HTMobj">
            <summary>
            36, User-custom webpages
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.BAEobj">
            <summary>
            37, BAE DES encrypted BASIC object
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.TXTobj">
            <summary>
            38, Text file
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ObjectType.EXCODEobj">
            <summary>
            39, Executable code - MUST BE LAST IN LIST!
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.PrinterFileMetadata.#ctor(System.IO.Stream)">
            <summary>
            The contentStream will be exhausted. It is all read in to determine the metadata, you need a new stream to read
            from for other stream operations.
            </summary>
            <param name="contentStream"></param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:Zebra.Sdk.Util.Internal.PrinterFilePath">
            <summary>
            For internal use of the Zebra Printer API only.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.ReflectionUtil.LoadUsbCardConnectionReestablisher(Zebra.Sdk.Comm.Connection,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.SGDUtilities.APPL_NAME">
            <summary>
            appl.name
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.SGDUtilities.HOST_STATUS">
            <summary>
            device.host_status
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.SGDUtilities.DISCOVERY_NAME">
            <summary>
            ip.discovery_packet
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.SGDUtilities.DEVICE_LANGUAGES">
            <summary>
            device.languages
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.SGDUtilities.DEVICE_RESET">
            <summary>
            device.reset
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.SGDUtilities.PRINTER_RESET_JSON">
            <summary>
            Printer Reset JSON Command {}{"device.reset":""}
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.SGDUtilities.NETWORK_RESET">
            <summary>
            device.prompted_network_reset
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.SGDUtilities.NETWORK_RESET_JSON">
            <summary>
            Printer Reset JSON Command {}{"device.prompted_network_reset":"y"}
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.SGDUtilities.PRINTER_DEFAULT">
            <summary>
            ezpl.restore_defaults
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.SGDUtilities.PRINTER_DEFAULT_JSON">
            <summary>
            Printer Reset JSON Command {}{"ezpl.restore_defaults":"reload printer"}
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.SGDUtilities.NETWORK_DEFAULT">
            <summary>
            device.prompted_default_network
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.SGDUtilities.NETWORK_DEFAULT_JSON">
            <summary>
            Printer Reset JSON Command {}{"device.prompted_default_network":"y"}
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.SGDUtilities.CALIBRATE_PRINTER">
            <summary>
            zpl.calibrate
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.SGDUtilities.CALIBRATE_PRINTER_JSON">
            <summary>
            Calibrate Command {}{"zpl.calibrate":""}
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.SGDUtilities.DecorateWithGetCommand(System.String)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <returns>! U1 getvar "command"\r\n</returns>
        </member>
        <member name="T:Zebra.Sdk.Util.Internal.Sleeper">
            <summary>
            Wrapper class for System.Threading.Tasks Task functions. For internal use of the Zebra Printer API only.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.Sleeper.Sleep(System.Int64)">
            <summary>
            For internal use of the Zebra Printer API only. Wrapper for <see cref='M:System.Threading.Tasks.Task.Delay(System.Int32)'/> to not throw an 
            exception. Causes the currently executing thread to sleep (temporarily cease execution) for the specified number 
            of milliseconds. The thread does not lose ownership of any monitors.
            </summary>
            <param name="millis"></param>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.HasWrite.#ctor(System.Object)">
            @param targetStream
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.HasWrite.Write(System.Byte[],System.Int32,System.Int32)">
            @param data
            @param offset
            @param length
            @throws IOException
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.StringUtilities.CRLF">
            <summary>
            Windows line terminator - carriage return + line feed
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.StringUtilities.LF">
            <summary>
            Line feed
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.StringUtilities.IndexOf(System.String,System.String[],System.Int32)">
            <summary>
            
            </summary>
            <param name="inputString">The string that should be searched.</param>
            <param name="searchPatterns">The list of patterns to search for.</param>
            <param name="start">start index in inputString</param>
            <returns>The index in <c>inputString</c> of the first pattern that is found. If none of the patterns are 
            found, -1 is returned.</returns>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.StringUtilities.Split(System.String,System.String)">
            <summary>
            Split <c>input</c> into lines.
            </summary>
            <remarks>
            Lines are terminated by &lt;CR&gt;&lt;LF&gt;. The last line does not have to 
            end in &lt;CR&gt;&lt;LF&gt;, although it may.The &lt;CR&gt;&lt;LF&gt; terminators are removed.
            </remarks>
            <param name="input">Text to be split into lines.</param>
            <param name="delimiter">the delimiter to split on</param>
            <returns>An array of lines - with trailing CRLF removed.</returns>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.StringUtilities.Join(System.String[],System.String)">
            <summary>
            Join an array of strings into a single string separated by a delimiter.
            </summary>
            <param name="strings"></param>
            <param name="delimiter"></param>
            <returns>a delimited list of the elements in <c>strings</c></returns>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.StringUtilities.CountSubstringOccurences(System.String,System.String)">
            <summary>
            Count the number of distinct occurrences of <c>substring</c> in <c>stringToSearch</c>.
            </summary>
            <remarks>
            If there are overlapping occurrences of <c>substring</c> in <c>stringToSearch</c>, counting starts again after the 
            end of each match.
            <para>
            <code>CountSubstringOccurences(&quot; aaa&quot;, &quot;aa&quot;)</code>
            returns 1, not 2.
            </para>
            </remarks>
            <param name="stringToSearch">String to be searched</param>
            <param name="substring">String to search for</param>
            <returns>number of occurrences</returns>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.StringUtilities.StripQuotes(System.String)">
            <summary>
            Remove all double quotes from <c>str</c>
            </summary>
            <param name="str">the string to strip the quotes from</param>
            <returns><c>str</c> minus the quotes</returns>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.StringUtilities.PadWithChar(System.String,System.Char,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="initialString">String to be padded</param>
            <param name="padding">character used for padding</param>
            <param name="lengthWithPadding">total length the return string should be</param>
            <param name="padInFront">whether or not to append <c>padding</c> in front of <c>initialString</c></param>
            <returns></returns>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.StringUtilities.DoesPrefixExistInArray(System.String[],System.String)">
            <summary>
            
            </summary>
            <param name="prefixes">the prefixes to search for</param>
            <param name="value">string to search</param>
            <returns>true if <c>prefixes</c> exists in <c>value</c></returns>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.StringUtilities.ByteArrayToHexString(System.Byte[])">
            <summary>
            </summary>
            <param name="byteArray"></param>
            <returns>The hex representation of the byte array</returns>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.StringUtilities.HexToByteArray(System.String)">
            <summary>
            
            </summary>
            <param name="hexString"></param>
            <returns>A byte array</returns>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.StringUtilities.StringToLong(System.String)">
            <summary>
            
            </summary>
            <param name="stringWithLeadingIntegers">(e.g. 1234 Bytes, 9876 Main St)</param>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.StringUtilities.ConvertKeyValueJsonToMap(System.Byte[])">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.StringUtilities.ConvertKeyValueJsonToMap(System.String)">
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.StringUtilities.GetStringValueForKey(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            </summary>
            <param name="map"></param>
            <param name="key"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.StringUtilities.GetIntValueForKey(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            </summary>
            <param name="map"></param>
            <param name="key"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.StringUtilities.ConvertStringToDouble(System.String)">
            <summary>
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.StringUtilities.ConvertDoubleToString(System.Double)">
            <summary>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Zebra.Sdk.Util.Internal.TaskExecutor">
            <summary>
            Executes a group of tasks with a cap on the number of concurrent threads running.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.TaskExecutor.Execute(System.Threading.Tasks.Task[],System.Int32)">
            <summary>
            </summary>
            <param name="tasks">Group of tasks to execute</param>
            <param name="numConcurrentThreads">Number of threads to execute concurrently</param>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ZPLUtilities.ZPL_INTERNAL_FORMAT_PREFIX_CHAR">
            <summary>
            Internal printer representation of the ZPL format prefix
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ZPLUtilities.ZPL_INTERNAL_COMMAND_PREFIX_CHAR">
            <summary>
            Internal printer representation of the ZPL command prefix
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ZPLUtilities.ZPL_INTERNAL_DELIMITER_CHAR">
            <summary>
            Internal printer representation of the ZPL delimiter
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ZPLUtilities.ZPL_INTERNAL_FORMAT_PREFIX">
            <summary>
            Internal printer representation of the ZPL format prefix, as a String
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ZPLUtilities.ZPL_INTERNAL_COMMAND_PREFIX">
            <summary>
            Internal printer representation of the ZPL command prefix, as a String
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ZPLUtilities.ZPL_INTERNAL_DELIMITER">
            <summary>
            Internal printer representation of the ZPL delimiter, as a String
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ZPLUtilities.PRINTER_INFO">
            <summary>
            Printer Status Command ~HI
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ZPLUtilities.PRINTER_STATUS">
            <summary>
            Printer Expanded Status Command ~HS
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ZPLUtilities.PRINTER_CONFIG_LABEL">
            <summary>
            Config Label ~WC
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ZPLUtilities.PRINTER_DIRECTORY_LABEL">
            <summary>
            Directory label ^XA^WD*:*.*^XZ
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ZPLUtilities.PRINTER_NETWORK_CONFIG_LABEL">
            <summary>
            Config Label ~WL
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ZPLUtilities.PRINTER_CALIBRATE">
            <summary>
            Printer Calibrate Command ~JC
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ZPLUtilities.PRINTER_RESET">
            <summary>
            Printer Reset Command ~JR
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ZPLUtilities.PRINTER_RESET_NETWORK">
            <summary>
            Printer Network Reset Command ~WR
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ZPLUtilities.PRINTER_RESTORE_DEFAULTS">
            <summary>
            Printer restore defaults command ^XA^JUF^XZ
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ZPLUtilities.PRINTER_GET_SUPER_HOST_STATUS">
            <summary>
            Printer get super host status command ^XA^HZA^XZ
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ZPLUtilities.PRINTER_GET_STORAGE_INFO_COMMAND">
            <summary>
            Printer get storage info ^XA^HW*:XXXX.QQQ^XZ Use XXXX.QQQ to get drive info without matching a file name
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ZPLUtilities.FILE_DRIVE_INFO_SETTING_NAME">
            <summary>
            Printer get file drive info for Linkos 2.5 and higher
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Util.Internal.ZPLUtilities.FILE_DRIVE_LISTING_SETTING_NAME">
            <summary>
            Printer get drive listing for Linkos 2.5 and higher
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.ZPLUtilities.DecorateWithCommandPrefix(System.String)">
            <summary>
            
            </summary>
            <param name="command">the command to decorate with the internal command prefix</param>
            <returns>the command decorated with the internal ZPL command prefix. If <c>command</c> contains a '~' it 
            will be replace with the internal command prefix, otherwise the internal command prefix will simply be prefixed 
            to the front of <c>command</c></returns>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.ZPLUtilities.DecorateWithFormatPrefix(System.String)">
            <summary>
            
            </summary>
            <param name="format">the format to decorate with the internal format prefix</param>
            <returns>the format decorated with the internal ZPL format prefix. If <c>format</c> contains a '^' it will 
            be replace with the internal format prefix, otherwise the internal format prefix will simply be prefixed to the
            front of <c>format</c></returns>
        </member>
        <member name="M:Zebra.Sdk.Util.Internal.ZPLUtilities.ReplaceAllWithInternalDelimeter(System.String)">
            <summary>
            
            </summary>
            <param name="format">the format to decorate with the internal format prefix</param>
            <returns>the format decorated with the internal ZPL format prefix. If <c>format</c> contains a '^' it will
            be replace with the internal format prefix, otherwise the internal format prefix will simply be prefixed to the 
            front of <c>format</c></returns>
        </member>
        <member name="T:Zebra.Sdk.Weblink.ConfigurationStatus">
            <summary>
            Enumeration of a task's status.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Weblink.ConfigurationStatus.NOT_STARTED">
            <summary>
            Configuration state indicating the task has not been started.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Weblink.ConfigurationStatus.IN_PROCESS">
            <summary>
            Configuration state indicating the task is in process.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Weblink.ConfigurationStatus.SUCCESSFULLY_COMPLETED">
            <summary>
            Configuration state indicating the task completed successfully.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Weblink.ConfigurationStatus.CONFIGURATION_FAILED">
            <summary>
            Configuration state indicating the task failed.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Weblink.WeblinkAddressStrategy">
            <summary>
            ENumeration to determine how the Weblink address is set.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Weblink.WeblinkAddressStrategy.AUTO_SELECT">
            <summary>
            Looks at current weblink settings and determine which location to set based on if the URL is set and valid and if 
            the printer is connected to the address.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Weblink.WeblinkAddressStrategy.FORCE_CONNECTION_1">
            <summary>
            Overrides any setting in Weblink location 1.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Weblink.WeblinkAddressStrategy.FORCE_CONNECTION_2">
            <summary>
            Overrides any setting in Weblink location 2.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Weblink.WeblinkConfigurationState">
            <summary>
            Enumeration of the weblink configuration task's state.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Weblink.WeblinkConfigurationState.ConnectToPrinter">
            <summary>
            Configuration state indicating the task is creating a connection to the printer.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Weblink.WeblinkConfigurationState.GetSettings">
            <summary>
            Configuration state indicating the task is retrieving the printer's settings.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Weblink.WeblinkConfigurationState.ConfigureWeblink">
            <summary>
            Configuration state indicating the task is configuring the weblink setting.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Weblink.WeblinkConfigurationState.RestartPrinter">
            <summary>
            Configuration state indicating the task is restarting the printer.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Weblink.WeblinkConfigurationState.ReconnectToPrinter">
            <summary>
            Configuration state indicating the task is waiting for the printer to restart and then reconnect.
            </summary>
        </member>
        <member name="F:Zebra.Sdk.Weblink.WeblinkConfigurationState.VerifyWeblinkConnection">
            <summary>
            Configuration state indicating the task is validating the printer's profile manager connection.
            </summary>
        </member>
        <member name="T:Zebra.Sdk.Weblink.WeblinkConfigurationStateUpdater">
            <summary>
            Callback for updating the status of a Weblink configuration task.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Weblink.WeblinkConfigurationStateUpdater.UpdateState(Zebra.Sdk.Weblink.WeblinkConfigurationState)">
            <summary>
            Sets the new state of the Weblink Configurator defined by <c>WeblinkConfigurationState</c>.
            </summary>
            <param name="newState">The updated WeblinkConfiguration state.</param>
        </member>
        <member name="M:Zebra.Sdk.Weblink.WeblinkConfigurationStateUpdater.ProgressUpdate(System.String)">
            <summary>
            Provides a custom message for the current weblink configuration state.
            </summary>
            <param name="message">Custom message.</param>
        </member>
        <member name="T:Zebra.Sdk.Weblink.WeblinkConfigurator">
            <summary>
            Task to configure a printers Weblink setting.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Weblink.WeblinkConfigurator.#ctor(Zebra.Sdk.Printer.Discovery.DiscoveredPrinter)">
            <summary>
            Initializes a new instance of the WeblinkConfiguratior class.
            </summary>
            <param name="printer">The <see cref="T:Zebra.Sdk.Printer.Discovery.DiscoveredPrinter"/> to configure.</param>
        </member>
        <member name="M:Zebra.Sdk.Weblink.WeblinkConfigurator.#ctor(Zebra.Sdk.Comm.Connection)">
            <summary>
            Initializes a new instance of the WeblinkConfiguratior class.
            </summary>
            <param name="connection">A <see cref="T:Zebra.Sdk.Comm.Connection"/> to a printer</param>
        </member>
        <member name="M:Zebra.Sdk.Weblink.WeblinkConfigurator.Configure(System.String,Zebra.Sdk.Weblink.WeblinkAddressStrategy,Zebra.Sdk.Weblink.WeblinkConfigurationStateUpdater)">
            <summary>
            Configures a printer to connect to a Zebra Weblink server and attempts to validate a successful connection.
            </summary>
            <remarks>
            Please note that this function will block while waiting for the printer to reset and while validating the 
            connection. This could take an excess of 60 seconds.
            </remarks>
            <param name="webLinkAddress">Weblink address to set.</param>
            <param name="strategy">Determines which weblink setting will be configured.</param>
            <param name="webConfigStatusUpdater">Callback object to report task status.</param>
            <exception cref="T:Zebra.Sdk.Weblink.ZebraWeblinkException">Thrown when a configuration error occurs.</exception>
        </member>
        <member name="M:Zebra.Sdk.Weblink.WeblinkConfigurator.VerifyPrinterNumConnections(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},Zebra.Sdk.Weblink.WeblinkConfigurationStateUpdater)">
            <summary>
            </summary>
            <param name="settings"></param>
            <param name="allSettings"></param>
            <param name="webConfigStatusUpdater"></param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException"></exception>
            <exception cref="T:Zebra.Sdk.Weblink.ZebraWeblinkException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Weblink.WeblinkConfigurator.ReconnectToPrinter(Zebra.Sdk.Weblink.WeblinkConfigurationStateUpdater)">
            <summary>
            </summary>
            <param name="webConfigStatusUpdater"></param>
            <exception cref="T:Zebra.Sdk.Printer.Discovery.DiscoveryException"></exception>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Weblink.WeblinkConfigurator.RestartPrinter(Zebra.Sdk.Weblink.WeblinkConfigurationStateUpdater)">
            <summary>
            </summary>
            <param name="webConfigStatusUpdater"></param>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Weblink.WeblinkConfigurator.GetSettingsToConfigure(System.String,Zebra.Sdk.Weblink.WeblinkAddressStrategy,Zebra.Sdk.Weblink.WeblinkConfigurationStateUpdater,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            </summary>
            <param name="webLinkAddress"></param>
            <param name="strategy"></param>
            <param name="webConfigStatusUpdater"></param>
            <param name="allSettings"></param>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Weblink.ZebraWeblinkException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Weblink.WeblinkConfigurator.GetSettings">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
            <exception cref="T:Zebra.Sdk.Printer.ZebraPrinterLanguageUnknownException"></exception>
            <exception cref="T:Zebra.Sdk.Device.ZebraIllegalArgumentException"></exception>
        </member>
        <member name="M:Zebra.Sdk.Weblink.WeblinkConfigurator.ConnectToPrinter">
            <summary>
            </summary>
            <exception cref="T:Zebra.Sdk.Comm.ConnectionException"></exception>
        </member>
        <member name="P:Zebra.Sdk.Weblink.WeblinkConfigurator.CurrentState">
            <summary>
            Returns the current <see cref="T:Zebra.Sdk.Weblink.WeblinkConfigurationState"/>.
            </summary>
        </member>
        <member name="P:Zebra.Sdk.Weblink.WeblinkConfigurator.Status">
            <summary>
            Returns the <see cref="T:Zebra.Sdk.Weblink.ConfigurationStatus"/> of the weblink configuration task.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Weblink.WeblinkConfigurator.IsValidWeblinkUrl(System.String)">
            <summary>
            Returns true if the supplied weblink <c>url</c> is valid for the Zebra weblink server.
            </summary>
            <param name="url">Potential URL to a Zebra Weblink server.</param>
            <returns>true if the URL is a properly formed URL for the Zebra Weblink server.</returns>
        </member>
        <member name="T:Zebra.Sdk.Weblink.ZebraWeblinkException">
            <summary>
            Signals that an error occured while configuring weblink.
            </summary>
        </member>
        <member name="M:Zebra.Sdk.Weblink.ZebraWeblinkException.#ctor(System.Exception)">
            <summary>
            Constructs a <c>ZebraWeblinkException</c> with a base Exception.
            </summary>
            <param name="e">The base exception.</param>
        </member>
        <member name="M:Zebra.Sdk.Weblink.ZebraWeblinkException.#ctor(System.String)">
            <summary>
            Constructs a <c>ZebraWeblinkException</c> with a custom detailed error message.
            </summary>
            <param name="message">The custom error message.</param>
        </member>
    </members>
</doc>
